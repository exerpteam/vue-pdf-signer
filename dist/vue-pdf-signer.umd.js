(function(Q,z){typeof exports=="object"&&typeof module<"u"?z(exports,require("vue")):typeof define=="function"&&define.amd?define(["exports","vue"],z):(Q=typeof globalThis<"u"?globalThis:Q||self,z(Q.VuePdfSigner={},Q.Vue))})(this,(function(Q,z){"use strict";var DA=Q=>{throw TypeError(Q)};var eC=(Q,z,AI)=>z.has(Q)||DA("Cannot "+AI);var x=(Q,z,AI)=>(eC(Q,z,"read from private field"),AI?AI.call(Q):z.get(Q)),tI=(Q,z,AI)=>z.has(Q)?DA("Cannot add the same private member more than once"):z instanceof WeakSet?z.add(Q):z.set(Q,AI),oI=(Q,z,AI,_)=>(eC(Q,z,"write to private field"),_?_.call(Q,AI):z.set(Q,AI),AI),eI=(Q,z,AI)=>(eC(Q,z,"access private method"),AI);var KA=(Q,z,AI,_)=>({set _(ig){oI(Q,z,ig,AI)},get _(){return x(Q,z,_)}});var kI,RI,SI,vI,xg,rI,EI,bI,vg,SA,pA,ng,lg,rg;var AI=typeof document<"u"?document.currentScript:null;const _=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser"),ig=[.001,0,0,.001,0,0],Eg=1.35,wI={ANY:1,DISPLAY:2,PRINT:4,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,IS_EDITING:128,OPLIST:256},FI={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3},DC="pdfjs_internal_editor_",p={DISABLE:-1,NONE:0,FREETEXT:3,HIGHLIGHT:9,STAMP:13,INK:15,SIGNATURE:101,COMMENT:102},k={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23,HIGHLIGHT_COLOR:31,HIGHLIGHT_THICKNESS:32,HIGHLIGHT_FREE:33,HIGHLIGHT_SHOW_ALL:34,DRAW_STEP:41},FA={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048},sI={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4},yg={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3},q={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26},fI={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5},Hg={ERRORS:0,WARNINGS:1,INFOS:5},Mg={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91,setStrokeTransparent:92,setFillTransparent:93,rawFillPath:94},ug={moveTo:0,lineTo:1,curveTo:2,closePath:3},zA={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};let tg=Hg.WARNINGS;function JA(c){Number.isInteger(c)&&(tg=c)}function kA(){return tg}function eg(c){tg>=Hg.INFOS&&console.log(`Info: ${c}`)}function F(c){tg>=Hg.WARNINGS&&console.log(`Warning: ${c}`)}function j(c){throw new Error(c)}function $(c,I){c||j(I)}function LA(c){switch(c?.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function KC(c,I=null,g=null){if(!c)return null;if(g&&typeof c=="string"&&(g.addDefaultProtocol&&c.startsWith("www.")&&c.match(/\./g)?.length>=2&&(c=`http://${c}`),g.tryConvertEncoding))try{c=UA(c)}catch{}const C=I?URL.parse(c,I):URL.parse(c);return LA(C)?C:null}function SC(c,I,g=!1){const C=URL.parse(c);return C?(C.hash=I,C.href):g&&KC(c,"http://example.com")?c.split("#",1)[0]+`${I?`#${I}`:""}`:""}function J(c,I,g,C=!1){return Object.defineProperty(c,I,{value:g,enumerable:!C,configurable:!0,writable:!1}),g}const QI=(function(){function I(g,C){this.message=g,this.name=C}return I.prototype=new Error,I.constructor=I,I})();class pC extends QI{constructor(I,g){super(I,"PasswordException"),this.code=g}}class Pg extends QI{constructor(I,g){super(I,"UnknownErrorException"),this.details=g}}class fg extends QI{constructor(I){super(I,"InvalidPDFException")}}class Dg extends QI{constructor(I,g,C){super(I,"ResponseException"),this.status=g,this.missing=C}}class TA extends QI{constructor(I){super(I,"FormatError")}}class zI extends QI{constructor(I){super(I,"AbortException")}}function FC(c){(typeof c!="object"||c?.length===void 0)&&j("Invalid argument for bytesToString");const I=c.length,g=8192;if(I<g)return String.fromCharCode.apply(null,c);const C=[];for(let A=0;A<I;A+=g){const l=Math.min(A+g,I),Z=c.subarray(A,l);C.push(String.fromCharCode.apply(null,Z))}return C.join("")}function dg(c){typeof c!="string"&&j("Invalid argument for stringToBytes");const I=c.length,g=new Uint8Array(I);for(let C=0;C<I;++C)g[C]=c.charCodeAt(C)&255;return g}function QA(c){return String.fromCharCode(c>>24&255,c>>16&255,c>>8&255,c&255)}function jA(){const c=new Uint8Array(4);return c[0]=1,new Uint32Array(c.buffer,0,1)[0]===1}function OA(){try{return new Function(""),!0}catch{return!1}}class ZI{static get isLittleEndian(){return J(this,"isLittleEndian",jA())}static get isEvalSupported(){return J(this,"isEvalSupported",OA())}static get isOffscreenCanvasSupported(){return J(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}static get isImageDecoderSupported(){return J(this,"isImageDecoderSupported",typeof ImageDecoder<"u")}static get platform(){const{platform:I,userAgent:g}=navigator;return J(this,"platform",{isAndroid:g.includes("Android"),isLinux:I.includes("Linux"),isMac:I.includes("Mac"),isWindows:I.includes("Win"),isFirefox:g.includes("Firefox")})}static get isCSSRoundSupported(){return J(this,"isCSSRoundSupported",globalThis.CSS?.supports?.("width: round(1.5px, 1px)"))}}const _g=Array.from(Array(256).keys(),c=>c.toString(16).padStart(2,"0"));class t{static makeHexColor(I,g,C){return`#${_g[I]}${_g[g]}${_g[C]}`}static scaleMinMax(I,g){let C;I[0]?(I[0]<0&&(C=g[0],g[0]=g[2],g[2]=C),g[0]*=I[0],g[2]*=I[0],I[3]<0&&(C=g[1],g[1]=g[3],g[3]=C),g[1]*=I[3],g[3]*=I[3]):(C=g[0],g[0]=g[1],g[1]=C,C=g[2],g[2]=g[3],g[3]=C,I[1]<0&&(C=g[1],g[1]=g[3],g[3]=C),g[1]*=I[1],g[3]*=I[1],I[2]<0&&(C=g[0],g[0]=g[2],g[2]=C),g[0]*=I[2],g[2]*=I[2]),g[0]+=I[4],g[1]+=I[5],g[2]+=I[4],g[3]+=I[5]}static transform(I,g){return[I[0]*g[0]+I[2]*g[1],I[1]*g[0]+I[3]*g[1],I[0]*g[2]+I[2]*g[3],I[1]*g[2]+I[3]*g[3],I[0]*g[4]+I[2]*g[5]+I[4],I[1]*g[4]+I[3]*g[5]+I[5]]}static applyTransform(I,g,C=0){const A=I[C],l=I[C+1];I[C]=A*g[0]+l*g[2]+g[4],I[C+1]=A*g[1]+l*g[3]+g[5]}static applyTransformToBezier(I,g,C=0){const A=g[0],l=g[1],Z=g[2],i=g[3],d=g[4],s=g[5];for(let G=0;G<6;G+=2){const b=I[C+G],m=I[C+G+1];I[C+G]=b*A+m*Z+d,I[C+G+1]=b*l+m*i+s}}static applyInverseTransform(I,g){const C=I[0],A=I[1],l=g[0]*g[3]-g[1]*g[2];I[0]=(C*g[3]-A*g[2]+g[2]*g[5]-g[4]*g[3])/l,I[1]=(-C*g[1]+A*g[0]+g[4]*g[1]-g[5]*g[0])/l}static axialAlignedBoundingBox(I,g,C){const A=g[0],l=g[1],Z=g[2],i=g[3],d=g[4],s=g[5],G=I[0],b=I[1],m=I[2],B=I[3];let o=A*G+d,W=o,Y=A*m+d,w=Y,a=i*b+s,h=a,N=i*B+s,V=N;if(l!==0||Z!==0){const R=l*G,X=l*m,n=Z*b,y=Z*B;o+=n,w+=n,Y+=y,W+=y,a+=R,V+=R,N+=X,h+=X}C[0]=Math.min(C[0],o,Y,W,w),C[1]=Math.min(C[1],a,N,h,V),C[2]=Math.max(C[2],o,Y,W,w),C[3]=Math.max(C[3],a,N,h,V)}static inverseTransform(I){const g=I[0]*I[3]-I[1]*I[2];return[I[3]/g,-I[1]/g,-I[2]/g,I[0]/g,(I[2]*I[5]-I[4]*I[3])/g,(I[4]*I[1]-I[5]*I[0])/g]}static singularValueDecompose2dScale(I,g){const C=I[0],A=I[1],l=I[2],Z=I[3],i=C**2+A**2,d=C*l+A*Z,s=l**2+Z**2,G=(i+s)/2,b=Math.sqrt(G**2-(i*s-d**2));g[0]=Math.sqrt(G+b||1),g[1]=Math.sqrt(G-b||1)}static normalizeRect(I){const g=I.slice(0);return I[0]>I[2]&&(g[0]=I[2],g[2]=I[0]),I[1]>I[3]&&(g[1]=I[3],g[3]=I[1]),g}static intersect(I,g){const C=Math.max(Math.min(I[0],I[2]),Math.min(g[0],g[2])),A=Math.min(Math.max(I[0],I[2]),Math.max(g[0],g[2]));if(C>A)return null;const l=Math.max(Math.min(I[1],I[3]),Math.min(g[1],g[3])),Z=Math.min(Math.max(I[1],I[3]),Math.max(g[1],g[3]));return l>Z?null:[C,l,A,Z]}static pointBoundingBox(I,g,C){C[0]=Math.min(C[0],I),C[1]=Math.min(C[1],g),C[2]=Math.max(C[2],I),C[3]=Math.max(C[3],g)}static rectBoundingBox(I,g,C,A,l){l[0]=Math.min(l[0],I,C),l[1]=Math.min(l[1],g,A),l[2]=Math.max(l[2],I,C),l[3]=Math.max(l[3],g,A)}static#I(I,g,C,A,l,Z,i,d,s,G){if(s<=0||s>=1)return;const b=1-s,m=s*s,B=m*s,o=b*(b*(b*I+3*s*g)+3*m*C)+B*A,W=b*(b*(b*l+3*s*Z)+3*m*i)+B*d;G[0]=Math.min(G[0],o),G[1]=Math.min(G[1],W),G[2]=Math.max(G[2],o),G[3]=Math.max(G[3],W)}static#g(I,g,C,A,l,Z,i,d,s,G,b,m){if(Math.abs(s)<1e-12){Math.abs(G)>=1e-12&&this.#I(I,g,C,A,l,Z,i,d,-b/G,m);return}const B=G**2-4*b*s;if(B<0)return;const o=Math.sqrt(B),W=2*s;this.#I(I,g,C,A,l,Z,i,d,(-G+o)/W,m),this.#I(I,g,C,A,l,Z,i,d,(-G-o)/W,m)}static bezierBoundingBox(I,g,C,A,l,Z,i,d,s){s[0]=Math.min(s[0],I,i),s[1]=Math.min(s[1],g,d),s[2]=Math.max(s[2],I,i),s[3]=Math.max(s[3],g,d),this.#g(I,C,l,i,g,A,Z,d,3*(-I+3*(C-l)+i),6*(I-2*C+l),3*(C-I),s),this.#g(I,C,l,i,g,A,Z,d,3*(-g+3*(A-Z)+d),6*(g-2*A+Z),3*(A-g),s)}}function UA(c){return decodeURIComponent(escape(c))}let qg=null,zC=null;function xA(c){return qg||(qg=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,zC=new Map([["ﬅ","ſt"]])),c.replaceAll(qg,(I,g,C)=>g?g.normalize("NFKC"):zC.get(C))}function JC(){if(typeof crypto.randomUUID=="function")return crypto.randomUUID();const c=new Uint8Array(32);return crypto.getRandomValues(c),FC(c)}const $g="pdfjs_internal_id_";function vA(c,I,g){if(!Array.isArray(g)||g.length<2)return!1;const[C,A,...l]=g;if(!c(C)&&!Number.isInteger(C)||!I(A))return!1;const Z=l.length;let i=!0;switch(A.name){case"XYZ":if(Z<2||Z>3)return!1;break;case"Fit":case"FitB":return Z===0;case"FitH":case"FitBH":case"FitV":case"FitBV":if(Z>1)return!1;break;case"FitR":if(Z!==4)return!1;i=!1;break;default:return!1}for(const d of l)if(!(typeof d=="number"||i&&d===null))return!1;return!0}function GI(c,I,g){return Math.min(Math.max(c,I),g)}function kC(c){return Uint8Array.prototype.toBase64?c.toBase64():btoa(FC(c))}function rA(c){return Uint8Array.fromBase64?Uint8Array.fromBase64(c):dg(atob(c))}typeof Promise.try!="function"&&(Promise.try=function(c,...I){return new Promise(g=>{g(c(...I))})}),typeof Math.sumPrecise!="function"&&(Math.sumPrecise=function(c){return c.reduce((I,g)=>I+g,0)});const DI="http://www.w3.org/2000/svg";class _I{static CSS=96;static PDF=72;static PDF_TO_CSS_UNITS=this.CSS/this.PDF}async function sg(c,I="text"){if(cg(c,document.baseURI)){const g=await fetch(c);if(!g.ok)throw new Error(g.statusText);switch(I){case"arraybuffer":return g.arrayBuffer();case"blob":return g.blob();case"json":return g.json()}return g.text()}return new Promise((g,C)=>{const A=new XMLHttpRequest;A.open("GET",c,!0),A.responseType=I,A.onreadystatechange=()=>{if(A.readyState===XMLHttpRequest.DONE){if(A.status===200||A.status===0){switch(I){case"arraybuffer":case"blob":case"json":g(A.response);return}g(A.responseText);return}C(new Error(A.statusText))}},A.send(null)})}class Gg{constructor({viewBox:I,userUnit:g,scale:C,rotation:A,offsetX:l=0,offsetY:Z=0,dontFlip:i=!1}){this.viewBox=I,this.userUnit=g,this.scale=C,this.rotation=A,this.offsetX=l,this.offsetY=Z,C*=g;const d=(I[2]+I[0])/2,s=(I[3]+I[1])/2;let G,b,m,B;switch(A%=360,A<0&&(A+=360),A){case 180:G=-1,b=0,m=0,B=1;break;case 90:G=0,b=1,m=1,B=0;break;case 270:G=0,b=-1,m=-1,B=0;break;case 0:G=1,b=0,m=0,B=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}i&&(m=-m,B=-B);let o,W,Y,w;G===0?(o=Math.abs(s-I[1])*C+l,W=Math.abs(d-I[0])*C+Z,Y=(I[3]-I[1])*C,w=(I[2]-I[0])*C):(o=Math.abs(d-I[0])*C+l,W=Math.abs(s-I[1])*C+Z,Y=(I[2]-I[0])*C,w=(I[3]-I[1])*C),this.transform=[G*C,b*C,m*C,B*C,o-G*C*d-m*C*s,W-b*C*d-B*C*s],this.width=Y,this.height=w}get rawDims(){const I=this.viewBox;return J(this,"rawDims",{pageWidth:I[2]-I[0],pageHeight:I[3]-I[1],pageX:I[0],pageY:I[1]})}clone({scale:I=this.scale,rotation:g=this.rotation,offsetX:C=this.offsetX,offsetY:A=this.offsetY,dontFlip:l=!1}={}){return new Gg({viewBox:this.viewBox.slice(),userUnit:this.userUnit,scale:I,rotation:g,offsetX:C,offsetY:A,dontFlip:l})}convertToViewportPoint(I,g){const C=[I,g];return t.applyTransform(C,this.transform),C}convertToViewportRectangle(I){const g=[I[0],I[1]];t.applyTransform(g,this.transform);const C=[I[2],I[3]];return t.applyTransform(C,this.transform),[g[0],g[1],C[0],C[1]]}convertToPdfPoint(I,g){const C=[I,g];return t.applyInverseTransform(C,this.transform),C}}class IC extends QI{constructor(I,g=0){super(I,"RenderingCancelledException"),this.extraDelay=g}}function Kg(c){const I=c.length;let g=0;for(;g<I&&c[g].trim()==="";)g++;return c.substring(g,g+5).toLowerCase()==="data:"}function gC(c){return typeof c=="string"&&/\.pdf$/i.test(c)}function EA(c){return[c]=c.split(/[#?]/,1),c.substring(c.lastIndexOf("/")+1)}function PA(c,I="document.pdf"){if(typeof c!="string")return I;if(Kg(c))return F('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),I;const C=(i=>{try{return new URL(i)}catch{try{return new URL(decodeURIComponent(i))}catch{try{return new URL(i,"https://foo.bar")}catch{try{return new URL(decodeURIComponent(i),"https://foo.bar")}catch{return null}}}}})(c);if(!C)return I;const A=i=>{try{let d=decodeURIComponent(i);return d.includes("/")?(d=d.split("/").at(-1),d.test(/^\.pdf$/i)?d:i):d}catch{return i}},l=/\.pdf$/i,Z=C.pathname.split("/").at(-1);if(l.test(Z))return A(Z);if(C.searchParams.size>0){const i=Array.from(C.searchParams.values()).reverse();for(const s of i)if(l.test(s))return A(s);const d=Array.from(C.searchParams.keys()).reverse();for(const s of d)if(l.test(s))return A(s)}if(C.hash){const d=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i.exec(C.hash);if(d)return A(d[0])}return I}class LC{started=Object.create(null);times=[];time(I){I in this.started&&F(`Timer is already running for ${I}`),this.started[I]=Date.now()}timeEnd(I){I in this.started||F(`Timer has not been started for ${I}`),this.times.push({name:I,start:this.started[I],end:Date.now()}),delete this.started[I]}toString(){const I=[];let g=0;for(const{name:C}of this.times)g=Math.max(C.length,g);for(const{name:C,start:A,end:l}of this.times)I.push(`${C.padEnd(g)} ${l-A}ms
`);return I.join("")}}function cg(c,I){const g=I?URL.parse(c,I):URL.parse(c);return g?.protocol==="http:"||g?.protocol==="https:"}function hI(c){c.preventDefault()}function II(c){c.preventDefault(),c.stopPropagation()}function fA(c){console.log("Deprecated API usage: "+c)}class CC{static#I;static toDateObject(I){if(I instanceof Date)return I;if(!I||typeof I!="string")return null;this.#I||=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");const g=this.#I.exec(I);if(!g)return null;const C=parseInt(g[1],10);let A=parseInt(g[2],10);A=A>=1&&A<=12?A-1:0;let l=parseInt(g[3],10);l=l>=1&&l<=31?l:1;let Z=parseInt(g[4],10);Z=Z>=0&&Z<=23?Z:0;let i=parseInt(g[5],10);i=i>=0&&i<=59?i:0;let d=parseInt(g[6],10);d=d>=0&&d<=59?d:0;const s=g[7]||"Z";let G=parseInt(g[8],10);G=G>=0&&G<=23?G:0;let b=parseInt(g[9],10)||0;return b=b>=0&&b<=59?b:0,s==="-"?(Z+=G,i+=b):s==="+"&&(Z-=G,i-=b),new Date(Date.UTC(C,A,l,Z,i,d))}}function _A(c,{scale:I=1,rotation:g=0}){const{width:C,height:A}=c.attributes.style,l=[0,0,parseInt(C),parseInt(A)];return new Gg({viewBox:l,userUnit:1,scale:I,rotation:g})}function Sg(c){if(c.startsWith("#")){const I=parseInt(c.slice(1),16);return[(I&16711680)>>16,(I&65280)>>8,I&255]}return c.startsWith("rgb(")?c.slice(4,-1).split(",").map(I=>parseInt(I)):c.startsWith("rgba(")?c.slice(5,-1).split(",").map(I=>parseInt(I)).slice(0,3):(F(`Not a valid color format: "${c}"`),[0,0,0])}function qA(c){const I=document.createElement("span");I.style.visibility="hidden",I.style.colorScheme="only light",document.body.append(I);for(const g of c.keys()){I.style.color=g;const C=window.getComputedStyle(I).color;c.set(g,Sg(C))}I.remove()}function v(c){const{a:I,b:g,c:C,d:A,e:l,f:Z}=c.getTransform();return[I,g,C,A,l,Z]}function XI(c){const{a:I,b:g,c:C,d:A,e:l,f:Z}=c.getTransform().invertSelf();return[I,g,C,A,l,Z]}function jI(c,I,g=!1,C=!0){if(I instanceof Gg){const{pageWidth:A,pageHeight:l}=I.rawDims,{style:Z}=c,i=ZI.isCSSRoundSupported,d=`var(--total-scale-factor) * ${A}px`,s=`var(--total-scale-factor) * ${l}px`,G=i?`round(down, ${d}, var(--scale-round-x))`:`calc(${d})`,b=i?`round(down, ${s}, var(--scale-round-y))`:`calc(${s})`;!g||I.rotation%180===0?(Z.width=G,Z.height=b):(Z.width=b,Z.height=G)}C&&c.setAttribute("data-main-rotation",I.rotation)}class nI{constructor(){const{pixelRatio:I}=nI;this.sx=I,this.sy=I}get scaled(){return this.sx!==1||this.sy!==1}get symmetric(){return this.sx===this.sy}limitCanvas(I,g,C,A,l=-1){let Z=1/0,i=1/0,d=1/0;C=nI.capPixels(C,l),C>0&&(Z=Math.sqrt(C/(I*g))),A!==-1&&(i=A/I,d=A/g);const s=Math.min(Z,i,d);return this.sx>s||this.sy>s?(this.sx=s,this.sy=s,!0):!1}static get pixelRatio(){return globalThis.devicePixelRatio||1}static capPixels(I,g){if(g>=0){const C=Math.ceil(window.screen.availWidth*window.screen.availHeight*this.pixelRatio**2*(1+g/100));return I>0?Math.min(I,C):C}return I}}const AC=["image/apng","image/avif","image/bmp","image/gif","image/jpeg","image/png","image/svg+xml","image/webp","image/x-icon"];class bg{#I=null;#g=null;#C;#A=null;#Z=null;#l=null;#i=null;static#d=null;constructor(I){this.#C=I,bg.#d||=Object.freeze({freetext:"pdfjs-editor-remove-freetext-button",highlight:"pdfjs-editor-remove-highlight-button",ink:"pdfjs-editor-remove-ink-button",stamp:"pdfjs-editor-remove-stamp-button",signature:"pdfjs-editor-remove-signature-button"})}render(){const I=this.#I=document.createElement("div");I.classList.add("editToolbar","hidden"),I.setAttribute("role","toolbar");const g=this.#C._uiManager._signal;I.addEventListener("contextmenu",hI,{signal:g}),I.addEventListener("pointerdown",bg.#c,{signal:g});const C=this.#A=document.createElement("div");C.className="buttons",I.append(C);const A=this.#C.toolbarPosition;if(A){const{style:l}=I,Z=this.#C._uiManager.direction==="ltr"?1-A[0]:A[0];l.insetInlineEnd=`${100*Z}%`,l.top=`calc(${100*A[1]}% + var(--editor-toolbar-vert-offset))`}return I}get div(){return this.#I}static#c(I){I.stopPropagation()}#G(I){this.#C._focusEventsAllowed=!1,II(I)}#m(I){this.#C._focusEventsAllowed=!0,II(I)}#s(I){const g=this.#C._uiManager._signal;I.addEventListener("focusin",this.#G.bind(this),{capture:!0,signal:g}),I.addEventListener("focusout",this.#m.bind(this),{capture:!0,signal:g}),I.addEventListener("contextmenu",hI,{signal:g})}hide(){this.#I.classList.add("hidden"),this.#g?.hideDropdown()}show(){this.#I.classList.remove("hidden"),this.#Z?.shown(),this.#l?.shown()}addDeleteButton(){const{editorType:I,_uiManager:g}=this.#C,C=document.createElement("button");C.className="delete",C.tabIndex=0,C.setAttribute("data-l10n-id",bg.#d[I]),this.#s(C),C.addEventListener("click",A=>{g.delete()},{signal:g._signal}),this.#A.append(C)}get#W(){const I=document.createElement("div");return I.className="divider",I}async addAltText(I){const g=await I.render();this.#s(g),this.#A.append(g,this.#W),this.#Z=I}addComment(I){if(this.#l)return;const g=I.render();g&&(this.#s(g),this.#A.prepend(g,this.#W),this.#l=I,I.toolbar=this)}addColorPicker(I){if(this.#g)return;this.#g=I;const g=I.renderButton();this.#s(g),this.#A.append(g,this.#W)}async addEditSignatureButton(I){const g=this.#i=await I.renderEditButton(this.#C);this.#s(g),this.#A.append(g,this.#W)}async addButton(I,g){switch(I){case"colorPicker":this.addColorPicker(g);break;case"altText":await this.addAltText(g);break;case"editSignature":await this.addEditSignatureButton(g);break;case"delete":this.addDeleteButton();break;case"comment":this.addComment(g);break}}updateEditSignatureButton(I){this.#i&&(this.#i.title=I)}remove(){this.#I.remove(),this.#g?.destroy(),this.#g=null}}class $A{#I=null;#g=null;#C;constructor(I){this.#C=I}#A(){const I=this.#g=document.createElement("div");I.className="editToolbar",I.setAttribute("role","toolbar"),I.addEventListener("contextmenu",hI,{signal:this.#C._signal});const g=this.#I=document.createElement("div");return g.className="buttons",I.append(g),this.#l(),I}#Z(I,g){let C=0,A=0;for(const l of I){const Z=l.y+l.height;if(Z<C)continue;const i=l.x+(g?l.width:0);if(Z>C){A=i,C=Z;continue}g?i>A&&(A=i):i<A&&(A=i)}return[g?1-A:A,C]}show(I,g,C){const[A,l]=this.#Z(g,C),{style:Z}=this.#g||=this.#A();I.append(this.#g),Z.insetInlineEnd=`${100*A}%`,Z.top=`calc(${100*l}% + var(--editor-toolbar-vert-offset))`}hide(){this.#g.remove()}#l(){const I=document.createElement("button");I.className="highlightButton",I.tabIndex=0,I.setAttribute("data-l10n-id","pdfjs-highlight-floating-button1");const g=document.createElement("span");I.append(g),g.className="visuallyHidden",g.setAttribute("data-l10n-id","pdfjs-highlight-floating-button-label");const C=this.#C._signal;I.addEventListener("contextmenu",hI,{signal:C}),I.addEventListener("click",()=>{this.#C.highlightSelection("floating_button")},{signal:C}),this.#I.append(I)}}function TC(c,I,g){for(const C of g)I.addEventListener(C,c[C].bind(c))}class Il{#I=0;get id(){return`${DC}${this.#I++}`}}class lC{#I=JC();#g=0;#C=null;static get _isSVGFittingCanvas(){const I='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>',C=new OffscreenCanvas(1,3).getContext("2d",{willReadFrequently:!0}),A=new Image;A.src=I;const l=A.decode().then(()=>(C.drawImage(A,0,0,1,1,0,0,1,3),new Uint32Array(C.getImageData(0,0,1,1).data.buffer)[0]===0));return J(this,"_isSVGFittingCanvas",l)}async#A(I,g){this.#C||=new Map;let C=this.#C.get(I);if(C===null)return null;if(C?.bitmap)return C.refCounter+=1,C;try{C||={bitmap:null,id:`image_${this.#I}_${this.#g++}`,refCounter:0,isSvg:!1};let A;if(typeof g=="string"?(C.url=g,A=await sg(g,"blob")):g instanceof File?A=C.file=g:g instanceof Blob&&(A=g),A.type==="image/svg+xml"){const l=lC._isSVGFittingCanvas,Z=new FileReader,i=new Image,d=new Promise((s,G)=>{i.onload=()=>{C.bitmap=i,C.isSvg=!0,s()},Z.onload=async()=>{const b=C.svgUrl=Z.result;i.src=await l?`${b}#svgView(preserveAspectRatio(none))`:b},i.onerror=Z.onerror=G});Z.readAsDataURL(A),await d}else C.bitmap=await createImageBitmap(A);C.refCounter=1}catch(A){F(A),C=null}return this.#C.set(I,C),C&&this.#C.set(C.id,C),C}async getFromFile(I){const{lastModified:g,name:C,size:A,type:l}=I;return this.#A(`${g}_${C}_${A}_${l}`,I)}async getFromUrl(I){return this.#A(I,I)}async getFromBlob(I,g){const C=await g;return this.#A(I,C)}async getFromId(I){this.#C||=new Map;const g=this.#C.get(I);if(!g)return null;if(g.bitmap)return g.refCounter+=1,g;if(g.file)return this.getFromFile(g.file);if(g.blobPromise){const{blobPromise:C}=g;return delete g.blobPromise,this.getFromBlob(g.id,C)}return this.getFromUrl(g.url)}getFromCanvas(I,g){this.#C||=new Map;let C=this.#C.get(I);if(C?.bitmap)return C.refCounter+=1,C;const A=new OffscreenCanvas(g.width,g.height);return A.getContext("2d").drawImage(g,0,0),C={bitmap:A.transferToImageBitmap(),id:`image_${this.#I}_${this.#g++}`,refCounter:1,isSvg:!1},this.#C.set(I,C),this.#C.set(C.id,C),C}getSvgUrl(I){const g=this.#C.get(I);return g?.isSvg?g.svgUrl:null}deleteId(I){this.#C||=new Map;const g=this.#C.get(I);if(!g||(g.refCounter-=1,g.refCounter!==0))return;const{bitmap:C}=g;if(!g.url&&!g.file){const A=new OffscreenCanvas(C.width,C.height);A.getContext("bitmaprenderer").transferFromImageBitmap(C),g.blobPromise=A.convertToBlob()}C.close?.(),g.bitmap=null}isValidId(I){return I.startsWith(`image_${this.#I}_`)}}class gl{#I=[];#g=!1;#C;#A=-1;constructor(I=128){this.#C=I}add({cmd:I,undo:g,post:C,mustExec:A,type:l=NaN,overwriteIfSameType:Z=!1,keepUndo:i=!1}){if(A&&I(),this.#g)return;const d={cmd:I,undo:g,post:C,type:l};if(this.#A===-1){this.#I.length>0&&(this.#I.length=0),this.#A=0,this.#I.push(d);return}if(Z&&this.#I[this.#A].type===l){i&&(d.undo=this.#I[this.#A].undo),this.#I[this.#A]=d;return}const s=this.#A+1;s===this.#C?this.#I.splice(0,1):(this.#A=s,s<this.#I.length&&this.#I.splice(s)),this.#I.push(d)}undo(){if(this.#A===-1)return;this.#g=!0;const{undo:I,post:g}=this.#I[this.#A];I(),g?.(),this.#g=!1,this.#A-=1}redo(){if(this.#A<this.#I.length-1){this.#A+=1,this.#g=!0;const{cmd:I,post:g}=this.#I[this.#A];I(),g?.(),this.#g=!1}}hasSomethingToUndo(){return this.#A!==-1}hasSomethingToRedo(){return this.#A<this.#I.length-1}cleanType(I){if(this.#A!==-1){for(let g=this.#A;g>=0;g--)if(this.#I[g].type!==I){this.#I.splice(g+1,this.#A-g),this.#A=g;return}this.#I.length=0,this.#A=-1}}destroy(){this.#I=null}}class mg{constructor(I){this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:g}=ZI.platform;for(const[C,A,l={}]of I)for(const Z of C){const i=Z.startsWith("mac+");g&&i?(this.callbacks.set(Z.slice(4),{callback:A,options:l}),this.allKeys.add(Z.split("+").at(-1))):!g&&!i&&(this.callbacks.set(Z,{callback:A,options:l}),this.allKeys.add(Z.split("+").at(-1)))}}#I(I){I.altKey&&this.buffer.push("alt"),I.ctrlKey&&this.buffer.push("ctrl"),I.metaKey&&this.buffer.push("meta"),I.shiftKey&&this.buffer.push("shift"),this.buffer.push(I.key);const g=this.buffer.join("+");return this.buffer.length=0,g}exec(I,g){if(!this.allKeys.has(g.key))return;const C=this.callbacks.get(this.#I(g));if(!C)return;const{callback:A,options:{bubbles:l=!1,args:Z=[],checker:i=null}}=C;i&&!i(I,g)||(A.bind(I,...Z,g)(),l||II(g))}}class ZC{static _colorsMapping=new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]);get _colors(){const I=new Map([["CanvasText",null],["Canvas",null]]);return qA(I),J(this,"_colors",I)}convert(I){const g=Sg(I);if(!window.matchMedia("(forced-colors: active)").matches)return g;for(const[C,A]of this._colors)if(A.every((l,Z)=>l===g[Z]))return ZC._colorsMapping.get(C);return g}getHexCode(I){const g=this._colors.get(I);return g?t.makeHexColor(...g):I}}class JI{#I=new AbortController;#g=null;#C=new Map;#A=new Map;#Z=null;#l=null;#i=null;#d=new gl;#c=null;#G=null;#m=null;#s=0;#W=new Set;#w=null;#B=null;#b=new Set;_editorUndoBar=null;#o=!1;#a=!1;#Y=!1;#N=null;#R=null;#h=null;#n=null;#t=!1;#X=null;#e=new Il;#u=!1;#M=!1;#H=null;#K=null;#J=null;#S=null;#Q=null;#y=p.NONE;#V=new Set;#k=null;#L=null;#j=null;#x=null;#v={isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1,hasSelectedText:!1};#O=[0,0];#p=null;#F=null;#U=null;#f=null;#z=null;static TRANSLATE_SMALL=1;static TRANSLATE_BIG=10;static get _keyboardManager(){const I=JI.prototype,g=Z=>Z.#F.contains(document.activeElement)&&document.activeElement.tagName!=="BUTTON"&&Z.hasSomethingToControl(),C=(Z,{target:i})=>{if(i instanceof HTMLInputElement){const{type:d}=i;return d!=="text"&&d!=="number"}return!0},A=this.TRANSLATE_SMALL,l=this.TRANSLATE_BIG;return J(this,"_keyboardManager",new mg([[["ctrl+a","mac+meta+a"],I.selectAll,{checker:C}],[["ctrl+z","mac+meta+z"],I.undo,{checker:C}],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],I.redo,{checker:C}],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],I.delete,{checker:C}],[["Enter","mac+Enter"],I.addNewEditorFromKeyboard,{checker:(Z,{target:i})=>!(i instanceof HTMLButtonElement)&&Z.#F.contains(i)&&!Z.isEnterHandled}],[[" ","mac+ "],I.addNewEditorFromKeyboard,{checker:(Z,{target:i})=>!(i instanceof HTMLButtonElement)&&Z.#F.contains(document.activeElement)}],[["Escape","mac+Escape"],I.unselectAll],[["ArrowLeft","mac+ArrowLeft"],I.translateSelectedEditors,{args:[-A,0],checker:g}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],I.translateSelectedEditors,{args:[-l,0],checker:g}],[["ArrowRight","mac+ArrowRight"],I.translateSelectedEditors,{args:[A,0],checker:g}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],I.translateSelectedEditors,{args:[l,0],checker:g}],[["ArrowUp","mac+ArrowUp"],I.translateSelectedEditors,{args:[0,-A],checker:g}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],I.translateSelectedEditors,{args:[0,-l],checker:g}],[["ArrowDown","mac+ArrowDown"],I.translateSelectedEditors,{args:[0,A],checker:g}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],I.translateSelectedEditors,{args:[0,l],checker:g}]]))}constructor(I,g,C,A,l,Z,i,d,s,G,b,m,B,o,W,Y){const w=this._signal=this.#I.signal;this.#F=I,this.#U=g,this.#f=C,this.#Z=A,this.#c=l,this.#L=Z,this._eventBus=i,i._on("editingaction",this.onEditingAction.bind(this),{signal:w}),i._on("pagechanging",this.onPageChanging.bind(this),{signal:w}),i._on("scalechanging",this.onScaleChanging.bind(this),{signal:w}),i._on("rotationchanging",this.onRotationChanging.bind(this),{signal:w}),i._on("setpreference",this.onSetPreference.bind(this),{signal:w}),i._on("switchannotationeditorparams",a=>this.updateParams(a.type,a.value),{signal:w}),this.#ZI(),this.#GI(),this.#q(),this.#l=d.annotationStorage,this.#N=d.filterFactory,this.#j=s,this.#n=G||null,this.#o=b,this.#a=m,this.#Y=B,this.#Q=o||null,this.viewParameters={realScale:_I.PDF_TO_CSS_UNITS,rotation:0},this.isShiftKeyDown=!1,this._editorUndoBar=W||null,this._supportsPinchToZoom=Y!==!1}destroy(){this.#z?.resolve(),this.#z=null,this.#I?.abort(),this.#I=null,this._signal=null;for(const I of this.#A.values())I.destroy();this.#A.clear(),this.#C.clear(),this.#b.clear(),this.#S?.clear(),this.#g=null,this.#V.clear(),this.#d.destroy(),this.#Z?.destroy(),this.#c?.destroy(),this.#L?.destroy(),this.#X?.hide(),this.#X=null,this.#J?.destroy(),this.#J=null,this.#R&&(clearTimeout(this.#R),this.#R=null),this.#p&&(clearTimeout(this.#p),this.#p=null),this._editorUndoBar?.destroy()}combinedSignal(I){return AbortSignal.any([this._signal,I.signal])}get mlManager(){return this.#Q}get useNewAltTextFlow(){return this.#a}get useNewAltTextWhenAddingImage(){return this.#Y}get hcmFilter(){return J(this,"hcmFilter",this.#j?this.#N.addHCMFilter(this.#j.foreground,this.#j.background):"none")}get direction(){return J(this,"direction",getComputedStyle(this.#F).direction)}get _highlightColors(){return J(this,"_highlightColors",this.#n?new Map(this.#n.split(",").map(I=>(I=I.split("=").map(g=>g.trim()),I[1]=I[1].toUpperCase(),I))):null)}get highlightColors(){const{_highlightColors:I}=this;if(!I)return J(this,"highlightColors",null);const g=new Map,C=!!this.#j;for(const[A,l]of I){const Z=A.endsWith("_HCM");if(C&&Z){g.set(A.replace("_HCM",""),l);continue}!C&&!Z&&g.set(A,l)}return J(this,"highlightColors",g)}get highlightColorNames(){return J(this,"highlightColorNames",this.highlightColors?new Map(Array.from(this.highlightColors,I=>I.reverse())):null)}getNonHCMColor(I){if(!this._highlightColors)return I;const g=this.highlightColorNames.get(I);return this._highlightColors.get(g)||I}getNonHCMColorName(I){return this.highlightColorNames.get(I)||I}setCurrentDrawingSession(I){I?(this.unselectAll(),this.disableUserSelect(!0)):this.disableUserSelect(!1),this.#m=I}setMainHighlightColorPicker(I){this.#J=I}editAltText(I,g=!1){this.#Z?.editAltText(this,I,g)}hasCommentManager(){return!!this.#c}editComment(I,g){this.#c?.open(this,I,g)}getSignature(I){this.#L?.getSignature({uiManager:this,editor:I})}get signatureManager(){return this.#L}switchToMode(I,g){this._eventBus.on("annotationeditormodechanged",g,{once:!0,signal:this._signal}),this._eventBus.dispatch("showannotationeditorui",{source:this,mode:I})}setPreference(I,g){this._eventBus.dispatch("setpreference",{source:this,name:I,value:g})}onSetPreference({name:I,value:g}){switch(I){case"enableNewAltTextWhenAddingImage":this.#Y=g;break}}onPageChanging({pageNumber:I}){this.#s=I-1}focusMainContainer(){this.#F.focus()}findParent(I,g){for(const C of this.#A.values()){const{x:A,y:l,width:Z,height:i}=C.div.getBoundingClientRect();if(I>=A&&I<=A+Z&&g>=l&&g<=l+i)return C}return null}disableUserSelect(I=!1){this.#U.classList.toggle("noUserSelect",I)}addShouldRescale(I){this.#b.add(I)}removeShouldRescale(I){this.#b.delete(I)}onScaleChanging({scale:I}){this.commitOrRemove(),this.viewParameters.realScale=I*_I.PDF_TO_CSS_UNITS;for(const g of this.#b)g.onScaleChanging();this.#m?.onScaleChanging()}onRotationChanging({pagesRotation:I}){this.commitOrRemove(),this.viewParameters.rotation=I}#E({anchorNode:I}){return I.nodeType===Node.TEXT_NODE?I.parentElement:I}#_(I){const{currentLayer:g}=this;if(g.hasTextLayer(I))return g;for(const C of this.#A.values())if(C.hasTextLayer(I))return C;return null}highlightSelection(I=""){const g=document.getSelection();if(!g||g.isCollapsed)return;const{anchorNode:C,anchorOffset:A,focusNode:l,focusOffset:Z}=g,i=g.toString(),s=this.#E(g).closest(".textLayer"),G=this.getSelectionBoxes(s);if(!G)return;g.empty();const b=this.#_(s),m=this.#y===p.NONE,B=()=>{b?.createAndAddNewEditor({x:0,y:0},!1,{methodOfCreation:I,boxes:G,anchorNode:C,anchorOffset:A,focusNode:l,focusOffset:Z,text:i}),m&&this.showAllEditors("highlight",!0,!0)};if(m){this.switchToMode(p.HIGHLIGHT,B);return}B()}#AI(){const I=document.getSelection();if(!I||I.isCollapsed)return;const C=this.#E(I).closest(".textLayer"),A=this.getSelectionBoxes(C);A&&(this.#X||=new $A(this),this.#X.show(C,A,this.direction==="ltr"))}addToAnnotationStorage(I){!I.isEmpty()&&this.#l&&!this.#l.has(I.id)&&this.#l.setValue(I.id,I)}a11yAlert(I,g=null){const C=this.#f;C&&(C.setAttribute("data-l10n-id",I),g?C.setAttribute("data-l10n-args",JSON.stringify(g)):C.removeAttribute("data-l10n-args"))}#lI(){const I=document.getSelection();if(!I||I.isCollapsed){this.#k&&(this.#X?.hide(),this.#k=null,this.#D({hasSelectedText:!1}));return}const{anchorNode:g}=I;if(g===this.#k)return;const A=this.#E(I).closest(".textLayer");if(!A){this.#k&&(this.#X?.hide(),this.#k=null,this.#D({hasSelectedText:!1}));return}if(this.#X?.hide(),this.#k=g,this.#D({hasSelectedText:!0}),!(this.#y!==p.HIGHLIGHT&&this.#y!==p.NONE)&&(this.#y===p.HIGHLIGHT&&this.showAllEditors("highlight",!0,!0),this.#t=this.isShiftKeyDown,!this.isShiftKeyDown)){const l=this.#y===p.HIGHLIGHT?this.#_(A):null;l?.toggleDrawing();const Z=new AbortController,i=this.combinedSignal(Z),d=s=>{s.type==="pointerup"&&s.button!==0||(Z.abort(),l?.toggleDrawing(!0),s.type==="pointerup"&&this.#P("main_toolbar"))};window.addEventListener("pointerup",d,{signal:i}),window.addEventListener("blur",d,{signal:i})}}#P(I=""){this.#y===p.HIGHLIGHT?this.highlightSelection(I):this.#o&&this.#AI()}#ZI(){document.addEventListener("selectionchange",this.#lI.bind(this),{signal:this._signal})}#iI(){if(this.#h)return;this.#h=new AbortController;const I=this.combinedSignal(this.#h);window.addEventListener("focus",this.focus.bind(this),{signal:I}),window.addEventListener("blur",this.blur.bind(this),{signal:I})}#dI(){this.#h?.abort(),this.#h=null}blur(){if(this.isShiftKeyDown=!1,this.#t&&(this.#t=!1,this.#P("main_toolbar")),!this.hasSelection)return;const{activeElement:I}=document;for(const g of this.#V)if(g.div.contains(I)){this.#K=[g,I],g._focusEventsAllowed=!1;break}}focus(){if(!this.#K)return;const[I,g]=this.#K;this.#K=null,g.addEventListener("focusin",()=>{I._focusEventsAllowed=!0},{once:!0,signal:this._signal}),g.focus()}#q(){if(this.#H)return;this.#H=new AbortController;const I=this.combinedSignal(this.#H);window.addEventListener("keydown",this.keydown.bind(this),{signal:I}),window.addEventListener("keyup",this.keyup.bind(this),{signal:I})}#sI(){this.#H?.abort(),this.#H=null}#$(){if(this.#G)return;this.#G=new AbortController;const I=this.combinedSignal(this.#G);document.addEventListener("copy",this.copy.bind(this),{signal:I}),document.addEventListener("cut",this.cut.bind(this),{signal:I}),document.addEventListener("paste",this.paste.bind(this),{signal:I})}#II(){this.#G?.abort(),this.#G=null}#GI(){const I=this._signal;document.addEventListener("dragover",this.dragOver.bind(this),{signal:I}),document.addEventListener("drop",this.drop.bind(this),{signal:I})}addEditListeners(){this.#q(),this.#$()}removeEditListeners(){this.#sI(),this.#II()}dragOver(I){for(const{type:g}of I.dataTransfer.items)for(const C of this.#B)if(C.isHandlingMimeForPasting(g)){I.dataTransfer.dropEffect="copy",I.preventDefault();return}}drop(I){for(const g of I.dataTransfer.items)for(const C of this.#B)if(C.isHandlingMimeForPasting(g.type)){C.paste(g,this.currentLayer),I.preventDefault();return}}copy(I){if(I.preventDefault(),this.#g?.commitOrRemove(),!this.hasSelection)return;const g=[];for(const C of this.#V){const A=C.serialize(!0);A&&g.push(A)}g.length!==0&&I.clipboardData.setData("application/pdfjs",JSON.stringify(g))}cut(I){this.copy(I),this.delete()}async paste(I){I.preventDefault();const{clipboardData:g}=I;for(const l of g.items)for(const Z of this.#B)if(Z.isHandlingMimeForPasting(l.type)){Z.paste(l,this.currentLayer);return}let C=g.getData("application/pdfjs");if(!C)return;try{C=JSON.parse(C)}catch(l){F(`paste: "${l.message}".`);return}if(!Array.isArray(C))return;this.unselectAll();const A=this.currentLayer;try{const l=[];for(const d of C){const s=await A.deserialize(d);if(!s)return;l.push(s)}const Z=()=>{for(const d of l)this.#gI(d);this.#CI(l)},i=()=>{for(const d of l)d.remove()};this.addCommands({cmd:Z,undo:i,mustExec:!0})}catch(l){F(`paste: "${l.message}".`)}}keydown(I){!this.isShiftKeyDown&&I.key==="Shift"&&(this.isShiftKeyDown=!0),this.#y!==p.NONE&&!this.isEditorHandlingKeyboard&&JI._keyboardManager.exec(this,I)}keyup(I){this.isShiftKeyDown&&I.key==="Shift"&&(this.isShiftKeyDown=!1,this.#t&&(this.#t=!1,this.#P("main_toolbar")))}onEditingAction({name:I}){switch(I){case"undo":case"redo":case"delete":case"selectAll":this[I]();break;case"highlightSelection":this.highlightSelection("context_menu");break}}#D(I){Object.entries(I).some(([C,A])=>this.#v[C]!==A)&&(this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(this.#v,I)}),this.#y===p.HIGHLIGHT&&I.hasSelectedEditor===!1&&this.#T([[k.HIGHLIGHT_FREE,!0]]))}#T(I){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:I})}setEditingState(I){I?(this.#iI(),this.#$(),this.#D({isEditing:this.#y!==p.NONE,isEmpty:this.#r(),hasSomethingToUndo:this.#d.hasSomethingToUndo(),hasSomethingToRedo:this.#d.hasSomethingToRedo(),hasSelectedEditor:!1})):(this.#dI(),this.#II(),this.#D({isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(I){if(!this.#B){this.#B=I;for(const g of this.#B)this.#T(g.defaultPropertiesToUpdate)}}getId(){return this.#e.id}get currentLayer(){return this.#A.get(this.#s)}getLayer(I){return this.#A.get(I)}get currentPageIndex(){return this.#s}addLayer(I){this.#A.set(I.pageIndex,I),this.#u?I.enable():I.disable()}removeLayer(I){this.#A.delete(I.pageIndex)}async updateMode(I,g=null,C=!1,A=!1,l=!1){if(this.#y!==I&&!(this.#z&&(await this.#z.promise,!this.#z))){if(this.#z=Promise.withResolvers(),this.#m?.commitOrRemove(),this.#y=I,I===p.NONE){this.setEditingState(!1),this.#bI(),this._editorUndoBar?.hide(),this.#z.resolve();return}I===p.SIGNATURE&&await this.#L?.loadSignatures(),this.setEditingState(!0),await this.#cI(),this.unselectAll();for(const Z of this.#A.values())Z.updateMode(I);if(!g){C&&this.addNewEditorFromKeyboard(),this.#z.resolve();return}for(const Z of this.#C.values())Z.annotationElementId===g||Z.id===g?(this.setSelected(Z),l?Z.editComment():A&&Z.enterInEditMode()):Z.unselect();this.#z.resolve()}}addNewEditorFromKeyboard(){this.currentLayer.canCreateNewEmptyEditor()&&this.currentLayer.addNewEditor()}updateToolbar(I){I.mode!==this.#y&&this._eventBus.dispatch("switchannotationeditormode",{source:this,...I})}updateParams(I,g){if(this.#B){switch(I){case k.CREATE:this.currentLayer.addNewEditor(g);return;case k.HIGHLIGHT_SHOW_ALL:this._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",data:{type:"highlight",action:"toggle_visibility"}}}),(this.#x||=new Map).set(I,g),this.showAllEditors("highlight",g);break}if(this.hasSelection)for(const C of this.#V)C.updateParams(I,g);else for(const C of this.#B)C.updateDefaultParams(I,g)}}showAllEditors(I,g,C=!1){for(const l of this.#C.values())l.editorType===I&&l.show(g);(this.#x?.get(k.HIGHLIGHT_SHOW_ALL)??!0)!==g&&this.#T([[k.HIGHLIGHT_SHOW_ALL,g]])}enableWaiting(I=!1){if(this.#M!==I){this.#M=I;for(const g of this.#A.values())I?g.disableClick():g.enableClick(),g.div.classList.toggle("waiting",I)}}async#cI(){if(!this.#u){this.#u=!0;const I=[];for(const g of this.#A.values())I.push(g.enable());await Promise.all(I);for(const g of this.#C.values())g.enable()}}#bI(){if(this.unselectAll(),this.#u){this.#u=!1;for(const I of this.#A.values())I.disable();for(const I of this.#C.values())I.disable()}}getEditors(I){const g=[];for(const C of this.#C.values())C.pageIndex===I&&g.push(C);return g}getEditor(I){return this.#C.get(I)}addEditor(I){this.#C.set(I.id,I)}removeEditor(I){I.div.contains(document.activeElement)&&(this.#R&&clearTimeout(this.#R),this.#R=setTimeout(()=>{this.focusMainContainer(),this.#R=null},0)),this.#C.delete(I.id),I.annotationElementId&&this.#S?.delete(I.annotationElementId),this.unselect(I),(!I.annotationElementId||!this.#W.has(I.annotationElementId))&&this.#l?.remove(I.id)}addDeletedAnnotationElement(I){this.#W.add(I.annotationElementId),this.addChangedExistingAnnotation(I),I.deleted=!0}isDeletedAnnotationElement(I){return this.#W.has(I)}removeDeletedAnnotationElement(I){this.#W.delete(I.annotationElementId),this.removeChangedExistingAnnotation(I),I.deleted=!1}#gI(I){const g=this.#A.get(I.pageIndex);g?g.addOrRebuild(I):(this.addEditor(I),this.addToAnnotationStorage(I))}setActiveEditor(I){this.#g!==I&&(this.#g=I,I&&this.#T(I.propertiesToUpdate))}get#mI(){let I=null;for(I of this.#V);return I}updateUI(I){this.#mI===I&&this.#T(I.propertiesToUpdate)}updateUIForDefaultProperties(I){this.#T(I.defaultPropertiesToUpdate)}toggleSelected(I){if(this.#V.has(I)){this.#V.delete(I),I.unselect(),this.#D({hasSelectedEditor:this.hasSelection});return}this.#V.add(I),I.select(),this.#T(I.propertiesToUpdate),this.#D({hasSelectedEditor:!0})}setSelected(I){this.updateToolbar({mode:I.mode,editId:I.id}),this.#m?.commitOrRemove();for(const g of this.#V)g!==I&&g.unselect();this.#V.clear(),this.#V.add(I),I.select(),this.#T(I.propertiesToUpdate),this.#D({hasSelectedEditor:!0})}isSelected(I){return this.#V.has(I)}get firstSelectedEditor(){return this.#V.values().next().value}unselect(I){I.unselect(),this.#V.delete(I),this.#D({hasSelectedEditor:this.hasSelection})}get hasSelection(){return this.#V.size!==0}get isEnterHandled(){return this.#V.size===1&&this.firstSelectedEditor.isEnterHandled}undo(){this.#d.undo(),this.#D({hasSomethingToUndo:this.#d.hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:this.#r()}),this._editorUndoBar?.hide()}redo(){this.#d.redo(),this.#D({hasSomethingToUndo:!0,hasSomethingToRedo:this.#d.hasSomethingToRedo(),isEmpty:this.#r()})}addCommands(I){this.#d.add(I),this.#D({hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:this.#r()})}cleanUndoStack(I){this.#d.cleanType(I)}#r(){if(this.#C.size===0)return!0;if(this.#C.size===1)for(const I of this.#C.values())return I.isEmpty();return!1}delete(){this.commitOrRemove();const I=this.currentLayer?.endDrawingSession(!0);if(!this.hasSelection&&!I)return;const g=I?[I]:[...this.#V],C=()=>{this._editorUndoBar?.show(A,g.length===1?g[0].editorType:g.length);for(const l of g)l.remove()},A=()=>{for(const l of g)this.#gI(l)};this.addCommands({cmd:C,undo:A,mustExec:!0})}commitOrRemove(){this.#g?.commitOrRemove()}hasSomethingToControl(){return this.#g||this.hasSelection}#CI(I){for(const g of this.#V)g.unselect();this.#V.clear();for(const g of I)g.isEmpty()||(this.#V.add(g),g.select());this.#D({hasSelectedEditor:this.hasSelection})}selectAll(){for(const I of this.#V)I.commit();this.#CI(this.#C.values())}unselectAll(){if(!(this.#g&&(this.#g.commitOrRemove(),this.#y!==p.NONE))&&!this.#m?.commitOrRemove()&&this.hasSelection){for(const I of this.#V)I.unselect();this.#V.clear(),this.#D({hasSelectedEditor:!1})}}translateSelectedEditors(I,g,C=!1){if(C||this.commitOrRemove(),!this.hasSelection)return;this.#O[0]+=I,this.#O[1]+=g;const[A,l]=this.#O,Z=[...this.#V],i=1e3;this.#p&&clearTimeout(this.#p),this.#p=setTimeout(()=>{this.#p=null,this.#O[0]=this.#O[1]=0,this.addCommands({cmd:()=>{for(const d of Z)this.#C.has(d.id)&&(d.translateInPage(A,l),d.translationDone())},undo:()=>{for(const d of Z)this.#C.has(d.id)&&(d.translateInPage(-A,-l),d.translationDone())},mustExec:!1})},i);for(const d of Z)d.translateInPage(I,g),d.translationDone()}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),this.#w=new Map;for(const I of this.#V)this.#w.set(I,{savedX:I.x,savedY:I.y,savedPageIndex:I.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!this.#w)return!1;this.disableUserSelect(!1);const I=this.#w;this.#w=null;let g=!1;for(const[{x:A,y:l,pageIndex:Z},i]of I)i.newX=A,i.newY=l,i.newPageIndex=Z,g||=A!==i.savedX||l!==i.savedY||Z!==i.savedPageIndex;if(!g)return!1;const C=(A,l,Z,i)=>{if(this.#C.has(A.id)){const d=this.#A.get(i);d?A._setParentAndPosition(d,l,Z):(A.pageIndex=i,A.x=l,A.y=Z)}};return this.addCommands({cmd:()=>{for(const[A,{newX:l,newY:Z,newPageIndex:i}]of I)C(A,l,Z,i)},undo:()=>{for(const[A,{savedX:l,savedY:Z,savedPageIndex:i}]of I)C(A,l,Z,i)},mustExec:!0}),!0}dragSelectedEditors(I,g){if(this.#w)for(const C of this.#w.keys())C.drag(I,g)}rebuild(I){if(I.parent===null){const g=this.getLayer(I.pageIndex);g?(g.changeParent(I),g.addOrRebuild(I)):(this.addEditor(I),this.addToAnnotationStorage(I),I.rebuild())}else I.parent.addOrRebuild(I)}get isEditorHandlingKeyboard(){return this.getActive()?.shouldGetKeyboardEvents()||this.#V.size===1&&this.firstSelectedEditor.shouldGetKeyboardEvents()}isActive(I){return this.#g===I}getActive(){return this.#g}getMode(){return this.#y}get imageManager(){return J(this,"imageManager",new lC)}getSelectionBoxes(I){if(!I)return null;const g=document.getSelection();for(let s=0,G=g.rangeCount;s<G;s++)if(!I.contains(g.getRangeAt(s).commonAncestorContainer))return null;const{x:C,y:A,width:l,height:Z}=I.getBoundingClientRect();let i;switch(I.getAttribute("data-main-rotation")){case"90":i=(s,G,b,m)=>({x:(G-A)/Z,y:1-(s+b-C)/l,width:m/Z,height:b/l});break;case"180":i=(s,G,b,m)=>({x:1-(s+b-C)/l,y:1-(G+m-A)/Z,width:b/l,height:m/Z});break;case"270":i=(s,G,b,m)=>({x:1-(G+m-A)/Z,y:(s-C)/l,width:m/Z,height:b/l});break;default:i=(s,G,b,m)=>({x:(s-C)/l,y:(G-A)/Z,width:b/l,height:m/Z});break}const d=[];for(let s=0,G=g.rangeCount;s<G;s++){const b=g.getRangeAt(s);if(!b.collapsed)for(const{x:m,y:B,width:o,height:W}of b.getClientRects())o===0||W===0||d.push(i(m,B,o,W))}return d.length===0?null:d}addChangedExistingAnnotation({annotationElementId:I,id:g}){(this.#i||=new Map).set(I,g)}removeChangedExistingAnnotation({annotationElementId:I}){this.#i?.delete(I)}renderAnnotationElement(I){const g=this.#i?.get(I.data.id);if(!g)return;const C=this.#l.getRawValue(g);C&&(this.#y===p.NONE&&!C.hasBeenModified||C.renderAnnotationElement(I))}setMissingCanvas(I,g,C){const A=this.#S?.get(I);A&&(A.setCanvas(g,C),this.#S.delete(I))}addMissingCanvas(I,g){(this.#S||=new Map).set(I,g)}}class yI{#I=null;#g=!1;#C=null;#A=null;#Z=null;#l=null;#i=!1;#d=null;#c=null;#G=null;#m=null;#s=!1;static#W=null;static _l10n=null;constructor(I){this.#c=I,this.#s=I._uiManager.useNewAltTextFlow,yI.#W||=Object.freeze({added:"pdfjs-editor-new-alt-text-added-button","added-label":"pdfjs-editor-new-alt-text-added-button-label",missing:"pdfjs-editor-new-alt-text-missing-button","missing-label":"pdfjs-editor-new-alt-text-missing-button-label",review:"pdfjs-editor-new-alt-text-to-review-button","review-label":"pdfjs-editor-new-alt-text-to-review-button-label"})}static initialize(I){yI._l10n??=I}async render(){const I=this.#C=document.createElement("button");I.className="altText",I.tabIndex="0";const g=this.#A=document.createElement("span");I.append(g),this.#s?(I.classList.add("new"),I.setAttribute("data-l10n-id",yI.#W.missing),g.setAttribute("data-l10n-id",yI.#W["missing-label"])):(I.setAttribute("data-l10n-id","pdfjs-editor-alt-text-button"),g.setAttribute("data-l10n-id","pdfjs-editor-alt-text-button-label"));const C=this.#c._uiManager._signal;I.addEventListener("contextmenu",hI,{signal:C}),I.addEventListener("pointerdown",l=>l.stopPropagation(),{signal:C});const A=l=>{l.preventDefault(),this.#c._uiManager.editAltText(this.#c),this.#s&&this.#c._reportTelemetry({action:"pdfjs.image.alt_text.image_status_label_clicked",data:{label:this.#w}})};return I.addEventListener("click",A,{capture:!0,signal:C}),I.addEventListener("keydown",l=>{l.target===I&&l.key==="Enter"&&(this.#i=!0,A(l))},{signal:C}),await this.#B(),I}get#w(){return this.#I&&"added"||this.#I===null&&this.guessedText&&"review"||"missing"}finish(){this.#C&&(this.#C.focus({focusVisible:this.#i}),this.#i=!1)}isEmpty(){return this.#s?this.#I===null:!this.#I&&!this.#g}hasData(){return this.#s?this.#I!==null||!!this.#G:this.isEmpty()}get guessedText(){return this.#G}async setGuessedText(I){this.#I===null&&(this.#G=I,this.#m=await yI._l10n.get("pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer",{generatedAltText:I}),this.#B())}toggleAltTextBadge(I=!1){if(!this.#s||this.#I){this.#d?.remove(),this.#d=null;return}if(!this.#d){const g=this.#d=document.createElement("div");g.className="noAltTextBadge",this.#c.div.append(g)}this.#d.classList.toggle("hidden",!I)}serialize(I){let g=this.#I;return!I&&this.#G===g&&(g=this.#m),{altText:g,decorative:this.#g,guessedText:this.#G,textWithDisclaimer:this.#m}}get data(){return{altText:this.#I,decorative:this.#g}}set data({altText:I,decorative:g,guessedText:C,textWithDisclaimer:A,cancel:l=!1}){C&&(this.#G=C,this.#m=A),!(this.#I===I&&this.#g===g)&&(l||(this.#I=I,this.#g=g),this.#B())}toggle(I=!1){this.#C&&(!I&&this.#l&&(clearTimeout(this.#l),this.#l=null),this.#C.disabled=!I)}shown(){this.#c._reportTelemetry({action:"pdfjs.image.alt_text.image_status_label_displayed",data:{label:this.#w}})}destroy(){this.#C?.remove(),this.#C=null,this.#A=null,this.#Z=null,this.#d?.remove(),this.#d=null}async#B(){const I=this.#C;if(!I)return;if(this.#s){if(I.classList.toggle("done",!!this.#I),I.setAttribute("data-l10n-id",yI.#W[this.#w]),this.#A?.setAttribute("data-l10n-id",yI.#W[`${this.#w}-label`]),!this.#I){this.#Z?.remove();return}}else{if(!this.#I&&!this.#g){I.classList.remove("done"),this.#Z?.remove();return}I.classList.add("done"),I.setAttribute("data-l10n-id","pdfjs-editor-alt-text-edit-button")}let g=this.#Z;if(!g){this.#Z=g=document.createElement("span"),g.className="tooltip",g.setAttribute("role","tooltip"),g.id=`alt-text-tooltip-${this.#c.id}`;const A=100,l=this.#c._uiManager._signal;l.addEventListener("abort",()=>{clearTimeout(this.#l),this.#l=null},{once:!0}),I.addEventListener("mouseenter",()=>{this.#l=setTimeout(()=>{this.#l=null,this.#Z.classList.add("show"),this.#c._reportTelemetry({action:"alt_text_tooltip"})},A)},{signal:l}),I.addEventListener("mouseleave",()=>{this.#l&&(clearTimeout(this.#l),this.#l=null),this.#Z?.classList.remove("show")},{signal:l})}this.#g?g.setAttribute("data-l10n-id","pdfjs-editor-alt-text-decorative-tooltip"):(g.removeAttribute("data-l10n-id"),g.textContent=this.#I),g.parentNode||I.append(g),this.#c.getElementForAltText()?.setAttribute("aria-describedby",g.id)}}class pg{#I=null;#g=!1;#C=null;#A=null;#Z=null;#l=null;#i=!1;constructor(I){this.#C=I,this.toolbar=null}render(){if(!this.#C._uiManager.hasCommentManager())return null;const I=this.#I=document.createElement("button");I.className="comment",I.tabIndex="0",I.setAttribute("data-l10n-id","pdfjs-editor-edit-comment-button");const g=this.#C._uiManager._signal;I.addEventListener("contextmenu",hI,{signal:g}),I.addEventListener("pointerdown",A=>A.stopPropagation(),{signal:g});const C=A=>{A.preventDefault(),this.edit()};return I.addEventListener("click",C,{capture:!0,signal:g}),I.addEventListener("keydown",A=>{A.target===I&&A.key==="Enter"&&(this.#g=!0,C(A))},{signal:g}),I}edit(){const{bottom:I,left:g,right:C}=this.#C.getClientDimensions(),A={top:I};this.#C._uiManager.direction==="ltr"?A.right=C:A.left=g,this.#C._uiManager.editComment(this.#C,A)}finish(){this.#I&&(this.#I.focus({focusVisible:this.#g}),this.#g=!1)}isDeleted(){return this.#i||this.#Z===""}hasBeenEdited(){return this.isDeleted()||this.#Z!==this.#A}serialize(){return this.data}get data(){return{text:this.#Z,date:this.#l,deleted:this.#i}}set data(I){if(I===null){this.#Z="",this.#i=!0;return}this.#Z=I,this.#l=new Date,this.#i=!1}setInitialText(I){this.#A=I,this.data=I}toggle(I=!1){this.#I&&(this.#I.disabled=!I)}shown(){}destroy(){this.#I?.remove(),this.#I=null,this.#Z="",this.#l=null,this.#C=null,this.#g=!1,this.#i=!1}}class Fg{#I;#g=!1;#C=null;#A;#Z;#l;#i;#d=null;#c;#G=null;#m;#s=null;constructor({container:I,isPinchingDisabled:g=null,isPinchingStopped:C=null,onPinchStart:A=null,onPinching:l=null,onPinchEnd:Z=null,signal:i}){this.#I=I,this.#C=C,this.#A=g,this.#Z=A,this.#l=l,this.#i=Z,this.#m=new AbortController,this.#c=AbortSignal.any([i,this.#m.signal]),I.addEventListener("touchstart",this.#W.bind(this),{passive:!1,signal:this.#c})}get MIN_TOUCH_DISTANCE_TO_PINCH(){return 35/nI.pixelRatio}#W(I){if(this.#A?.())return;if(I.touches.length===1){if(this.#d)return;const A=this.#d=new AbortController,l=AbortSignal.any([this.#c,A.signal]),Z=this.#I,i={capture:!0,signal:l,passive:!1},d=s=>{s.pointerType==="touch"&&(this.#d?.abort(),this.#d=null)};Z.addEventListener("pointerdown",s=>{s.pointerType==="touch"&&(II(s),d(s))},i),Z.addEventListener("pointerup",d,i),Z.addEventListener("pointercancel",d,i);return}if(!this.#s){this.#s=new AbortController;const A=AbortSignal.any([this.#c,this.#s.signal]),l=this.#I,Z={signal:A,capture:!1,passive:!1};l.addEventListener("touchmove",this.#w.bind(this),Z);const i=this.#B.bind(this);l.addEventListener("touchend",i,Z),l.addEventListener("touchcancel",i,Z),Z.capture=!0,l.addEventListener("pointerdown",II,Z),l.addEventListener("pointermove",II,Z),l.addEventListener("pointercancel",II,Z),l.addEventListener("pointerup",II,Z),this.#Z?.()}if(II(I),I.touches.length!==2||this.#C?.()){this.#G=null;return}let[g,C]=I.touches;g.identifier>C.identifier&&([g,C]=[C,g]),this.#G={touch0X:g.screenX,touch0Y:g.screenY,touch1X:C.screenX,touch1Y:C.screenY}}#w(I){if(!this.#G||I.touches.length!==2)return;II(I);let[g,C]=I.touches;g.identifier>C.identifier&&([g,C]=[C,g]);const{screenX:A,screenY:l}=g,{screenX:Z,screenY:i}=C,d=this.#G,{touch0X:s,touch0Y:G,touch1X:b,touch1Y:m}=d,B=b-s,o=m-G,W=Z-A,Y=i-l,w=Math.hypot(W,Y)||1,a=Math.hypot(B,o)||1;if(!this.#g&&Math.abs(a-w)<=Fg.MIN_TOUCH_DISTANCE_TO_PINCH)return;if(d.touch0X=A,d.touch0Y=l,d.touch1X=Z,d.touch1Y=i,!this.#g){this.#g=!0;return}const h=[(A+Z)/2,(l+i)/2];this.#l?.(h,a,w)}#B(I){I.touches.length>=2||(this.#s&&(this.#s.abort(),this.#s=null,this.#i?.()),this.#G&&(II(I),this.#G=null,this.#g=!1))}destroy(){this.#m?.abort(),this.#m=null,this.#d?.abort(),this.#d=null}}class D{#I=null;#g=null;#C=null;#A=null;#Z=!1;#l=null;#i="";#d=!1;#c=null;#G=null;#m=null;#s=null;#W="";#w=!1;#B=null;#b=!1;#o=!1;#a=!1;#Y=null;#N=0;#R=0;#h=null;#n=null;isSelected=!1;_isCopy=!1;_editToolbar=null;_initialOptions=Object.create(null);_initialData=null;_isVisible=!0;_uiManager=null;_focusEventsAllowed=!0;static _l10n=null;static _l10nResizer=null;#t=!1;#X=D._zIndex++;static _borderLineWidth=-1;static _colorManager=new ZC;static _zIndex=1;static _telemetryTimeout=1e3;static get _resizerKeyboardManager(){const I=D.prototype._resizeWithKeyboard,g=JI.TRANSLATE_SMALL,C=JI.TRANSLATE_BIG;return J(this,"_resizerKeyboardManager",new mg([[["ArrowLeft","mac+ArrowLeft"],I,{args:[-g,0]}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],I,{args:[-C,0]}],[["ArrowRight","mac+ArrowRight"],I,{args:[g,0]}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],I,{args:[C,0]}],[["ArrowUp","mac+ArrowUp"],I,{args:[0,-g]}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],I,{args:[0,-C]}],[["ArrowDown","mac+ArrowDown"],I,{args:[0,g]}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],I,{args:[0,C]}],[["Escape","mac+Escape"],D.prototype._stopResizingWithKeyboard]]))}constructor(I){this.parent=I.parent,this.id=I.id,this.width=this.height=null,this.pageIndex=I.parent.pageIndex,this.name=I.name,this.div=null,this._uiManager=I.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=I.isCentered,this._structTreeParentId=null,this.annotationElementId=I.annotationElementId||null;const{rotation:g,rawDims:{pageWidth:C,pageHeight:A,pageX:l,pageY:Z}}=this.parent.viewport;this.rotation=g,this.pageRotation=(360+g-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[C,A],this.pageTranslation=[l,Z];const[i,d]=this.parentDimensions;this.x=I.x/i,this.y=I.y/d,this.isAttachedToDOM=!1,this.deleted=!1}get editorType(){return Object.getPrototypeOf(this).constructor._type}get mode(){return Object.getPrototypeOf(this).constructor._editorType}static get isDrawer(){return!1}static get _defaultLineColor(){return J(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(I){const g=new Cl({id:I.parent.getNextId(),parent:I.parent,uiManager:I._uiManager});g.annotationElementId=I.annotationElementId,g.deleted=!0,g._uiManager.addToAnnotationStorage(g)}static initialize(I,g){if(D._l10n??=I,D._l10nResizer||=Object.freeze({topLeft:"pdfjs-editor-resizer-top-left",topMiddle:"pdfjs-editor-resizer-top-middle",topRight:"pdfjs-editor-resizer-top-right",middleRight:"pdfjs-editor-resizer-middle-right",bottomRight:"pdfjs-editor-resizer-bottom-right",bottomMiddle:"pdfjs-editor-resizer-bottom-middle",bottomLeft:"pdfjs-editor-resizer-bottom-left",middleLeft:"pdfjs-editor-resizer-middle-left"}),D._borderLineWidth!==-1)return;const C=getComputedStyle(document.documentElement);D._borderLineWidth=parseFloat(C.getPropertyValue("--outline-width"))||0}static updateDefaultParams(I,g){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(I){return!1}static paste(I,g){j("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return this.#t}set _isDraggable(I){this.#t=I,this.div?.classList.toggle("draggable",I)}get isEnterHandled(){return!0}center(){const[I,g]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*g/(I*2),this.y+=this.width*I/(g*2);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*g/(I*2),this.y-=this.width*I/(g*2);break;default:this.x-=this.width/2,this.y-=this.height/2;break}this.fixAndSetPosition()}addCommands(I){this._uiManager.addCommands(I)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=this.#X}setParent(I){I!==null?(this.pageIndex=I.pageIndex,this.pageDimensions=I.pageDimensions):this.#U(),this.parent=I}focusin(I){this._focusEventsAllowed&&(this.#w?this.#w=!1:this.parent.setSelected(this))}focusout(I){!this._focusEventsAllowed||!this.isAttachedToDOM||I.relatedTarget?.closest(`#${this.id}`)||(I.preventDefault(),this.parent?.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.isInEditMode()&&this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(I,g,C,A){const[l,Z]=this.parentDimensions;[C,A]=this.screenToPageTranslation(C,A),this.x=(I+C)/l,this.y=(g+A)/Z,this.fixAndSetPosition()}_moveAfterPaste(I,g){const[C,A]=this.parentDimensions;this.setAt(I*C,g*A,this.width*C,this.height*A),this._onTranslated()}#e([I,g],C,A){[C,A]=this.screenToPageTranslation(C,A),this.x+=C/I,this.y+=A/g,this._onTranslating(this.x,this.y),this.fixAndSetPosition()}translate(I,g){this.#e(this.parentDimensions,I,g)}translateInPage(I,g){this.#B||=[this.x,this.y,this.width,this.height],this.#e(this.pageDimensions,I,g),this.div.scrollIntoView({block:"nearest"})}translationDone(){this._onTranslated(this.x,this.y)}drag(I,g){this.#B||=[this.x,this.y,this.width,this.height];const{div:C,parentDimensions:[A,l]}=this;if(this.x+=I/A,this.y+=g/l,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:b,y:m}=this.div.getBoundingClientRect();this.parent.findNewParent(this,b,m)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:Z,y:i}=this;const[d,s]=this.getBaseTranslation();Z+=d,i+=s;const{style:G}=C;G.left=`${(100*Z).toFixed(2)}%`,G.top=`${(100*i).toFixed(2)}%`,this._onTranslating(Z,i),C.scrollIntoView({block:"nearest"})}_onTranslating(I,g){}_onTranslated(I,g){}get _hasBeenMoved(){return!!this.#B&&(this.#B[0]!==this.x||this.#B[1]!==this.y)}get _hasBeenResized(){return!!this.#B&&(this.#B[2]!==this.width||this.#B[3]!==this.height)}getBaseTranslation(){const[I,g]=this.parentDimensions,{_borderLineWidth:C}=D,A=C/I,l=C/g;switch(this.rotation){case 90:return[-A,l];case 180:return[A,l];case 270:return[A,-l];default:return[-A,-l]}}get _mustFixPosition(){return!0}fixAndSetPosition(I=this.rotation){const{div:{style:g},pageDimensions:[C,A]}=this;let{x:l,y:Z,width:i,height:d}=this;if(i*=C,d*=A,l*=C,Z*=A,this._mustFixPosition)switch(I){case 0:l=GI(l,0,C-i),Z=GI(Z,0,A-d);break;case 90:l=GI(l,0,C-d),Z=GI(Z,i,A);break;case 180:l=GI(l,i,C),Z=GI(Z,d,A);break;case 270:l=GI(l,d,C),Z=GI(Z,0,A-i);break}this.x=l/=C,this.y=Z/=A;const[s,G]=this.getBaseTranslation();l+=s,Z+=G,g.left=`${(100*l).toFixed(2)}%`,g.top=`${(100*Z).toFixed(2)}%`,this.moveInDOM()}static#u(I,g,C){switch(C){case 90:return[g,-I];case 180:return[-I,-g];case 270:return[-g,I];default:return[I,g]}}screenToPageTranslation(I,g){return D.#u(I,g,this.parentRotation)}pageTranslationToScreen(I,g){return D.#u(I,g,360-this.parentRotation)}#M(I){switch(I){case 90:{const[g,C]=this.pageDimensions;return[0,-g/C,C/g,0]}case 180:return[-1,0,0,-1];case 270:{const[g,C]=this.pageDimensions;return[0,g/C,-C/g,0]}default:return[1,0,0,1]}}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:I,pageDimensions:[g,C]}=this;return[g*I,C*I]}setDims(I,g){const[C,A]=this.parentDimensions,{style:l}=this.div;l.width=`${(100*I/C).toFixed(2)}%`,this.#d||(l.height=`${(100*g/A).toFixed(2)}%`)}fixDims(){const{style:I}=this.div,{height:g,width:C}=I,A=C.endsWith("%"),l=!this.#d&&g.endsWith("%");if(A&&l)return;const[Z,i]=this.parentDimensions;A||(I.width=`${(100*parseFloat(C)/Z).toFixed(2)}%`),!this.#d&&!l&&(I.height=`${(100*parseFloat(g)/i).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}#H(){if(this.#c)return;this.#c=document.createElement("div"),this.#c.classList.add("resizers");const I=this._willKeepAspectRatio?["topLeft","topRight","bottomRight","bottomLeft"]:["topLeft","topMiddle","topRight","middleRight","bottomRight","bottomMiddle","bottomLeft","middleLeft"],g=this._uiManager._signal;for(const C of I){const A=document.createElement("div");this.#c.append(A),A.classList.add("resizer",C),A.setAttribute("data-resizer-name",C),A.addEventListener("pointerdown",this.#K.bind(this,C),{signal:g}),A.addEventListener("contextmenu",hI,{signal:g}),A.tabIndex=-1}this.div.prepend(this.#c)}#K(I,g){g.preventDefault();const{isMac:C}=ZI.platform;if(g.button!==0||g.ctrlKey&&C)return;this.#C?.toggle(!1);const A=this._isDraggable;this._isDraggable=!1,this.#G=[g.screenX,g.screenY];const l=new AbortController,Z=this._uiManager.combinedSignal(l);this.parent.togglePointerEvents(!1),window.addEventListener("pointermove",this.#Q.bind(this,I),{passive:!0,capture:!0,signal:Z}),window.addEventListener("touchmove",II,{passive:!1,signal:Z}),window.addEventListener("contextmenu",hI,{signal:Z}),this.#m={savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height};const i=this.parent.div.style.cursor,d=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(g.target).cursor;const s=()=>{l.abort(),this.parent.togglePointerEvents(!0),this.#C?.toggle(!0),this._isDraggable=A,this.parent.div.style.cursor=i,this.div.style.cursor=d,this.#S()};window.addEventListener("pointerup",s,{signal:Z}),window.addEventListener("blur",s,{signal:Z})}#J(I,g,C,A){this.width=C,this.height=A,this.x=I,this.y=g;const[l,Z]=this.parentDimensions;this.setDims(l*C,Z*A),this.fixAndSetPosition(),this._onResized()}_onResized(){}#S(){if(!this.#m)return;const{savedX:I,savedY:g,savedWidth:C,savedHeight:A}=this.#m;this.#m=null;const l=this.x,Z=this.y,i=this.width,d=this.height;l===I&&Z===g&&i===C&&d===A||this.addCommands({cmd:this.#J.bind(this,l,Z,i,d),undo:this.#J.bind(this,I,g,C,A),mustExec:!0})}static _round(I){return Math.round(I*1e4)/1e4}#Q(I,g){const[C,A]=this.parentDimensions,l=this.x,Z=this.y,i=this.width,d=this.height,s=D.MIN_SIZE/C,G=D.MIN_SIZE/A,b=this.#M(this.rotation),m=(M,u)=>[b[0]*M+b[2]*u,b[1]*M+b[3]*u],B=this.#M(360-this.rotation),o=(M,u)=>[B[0]*M+B[2]*u,B[1]*M+B[3]*u];let W,Y,w=!1,a=!1;switch(I){case"topLeft":w=!0,W=(M,u)=>[0,0],Y=(M,u)=>[M,u];break;case"topMiddle":W=(M,u)=>[M/2,0],Y=(M,u)=>[M/2,u];break;case"topRight":w=!0,W=(M,u)=>[M,0],Y=(M,u)=>[0,u];break;case"middleRight":a=!0,W=(M,u)=>[M,u/2],Y=(M,u)=>[0,u/2];break;case"bottomRight":w=!0,W=(M,u)=>[M,u],Y=(M,u)=>[0,0];break;case"bottomMiddle":W=(M,u)=>[M/2,u],Y=(M,u)=>[M/2,0];break;case"bottomLeft":w=!0,W=(M,u)=>[0,u],Y=(M,u)=>[M,0];break;case"middleLeft":a=!0,W=(M,u)=>[0,u/2],Y=(M,u)=>[M,u/2];break}const h=W(i,d),N=Y(i,d);let V=m(...N);const R=D._round(l+V[0]),X=D._round(Z+V[1]);let n=1,y=1,K,e;if(g.fromKeyboard)({deltaX:K,deltaY:e}=g);else{const{screenX:M,screenY:u}=g,[NI,pI]=this.#G;[K,e]=this.screenToPageTranslation(M-NI,u-pI),this.#G[0]=M,this.#G[1]=u}if([K,e]=o(K/C,e/A),w){const M=Math.hypot(i,d);n=y=Math.max(Math.min(Math.hypot(N[0]-h[0]-K,N[1]-h[1]-e)/M,1/i,1/d),s/i,G/d)}else a?n=GI(Math.abs(N[0]-h[0]-K),s,1)/i:y=GI(Math.abs(N[1]-h[1]-e),G,1)/d;const T=D._round(i*n),O=D._round(d*y);V=m(...Y(T,O));const L=R-V[0],mI=X-V[1];this.#B||=[this.x,this.y,this.width,this.height],this.width=T,this.height=O,this.x=L,this.y=mI,this.setDims(C*T,A*O),this.fixAndSetPosition(),this._onResizing()}_onResizing(){}altTextFinish(){this.#C?.finish()}get toolbarButtons(){return null}async addEditToolbar(){if(this._editToolbar||this.#o)return this._editToolbar;this._editToolbar=new bg(this),this.div.append(this._editToolbar.render()),this._editToolbar.addButton("comment",this.addCommentButton());const{toolbarButtons:I}=this;if(I)for(const[g,C]of I)await this._editToolbar.addButton(g,C);return this._editToolbar.addButton("delete"),this._editToolbar}removeEditToolbar(){this._editToolbar&&(this._editToolbar.remove(),this._editToolbar=null,this.#C?.destroy())}addContainer(I){const g=this._editToolbar?.div;g?g.before(I):this.div.append(I)}getClientDimensions(){return this.div.getBoundingClientRect()}createAltText(){return this.#C||(yI.initialize(D._l10n),this.#C=new yI(this),this.#I&&(this.#C.data=this.#I,this.#I=null)),this.#C}get altTextData(){return this.#C?.data}set altTextData(I){this.#C&&(this.#C.data=I)}get guessedAltText(){return this.#C?.guessedText}async setGuessedAltText(I){await this.#C?.setGuessedText(I)}serializeAltText(I){return this.#C?.serialize(I)}hasAltText(){return!!this.#C&&!this.#C.isEmpty()}hasAltTextData(){return this.#C?.hasData()??!1}addCommentButton(){return this.#A?this.#A:this.#A=new pg(this)}get commentColor(){return null}get comment(){const I=this.#A;return{text:I.data.text,date:I.data.date,deleted:I.isDeleted(),color:this.commentColor}}set comment(I){this.#A||(this.#A=new pg(this)),this.#A.data=I}setCommentData(I){this.#A||(this.#A=new pg(this)),this.#A.setInitialText(I)}get hasEditedComment(){return this.#A?.hasBeenEdited()}async editComment(){this.#A||(this.#A=new pg(this)),this.#A.edit()}addComment(I){this.hasEditedComment&&(I.popup={contents:this.comment.text,deleted:this.comment.deleted})}render(){const I=this.div=document.createElement("div");I.setAttribute("data-editor-rotation",(360-this.rotation)%360),I.className=this.name,I.setAttribute("id",this.id),I.tabIndex=this.#Z?-1:0,I.setAttribute("role","application"),this.defaultL10nId&&I.setAttribute("data-l10n-id",this.defaultL10nId),this._isVisible||I.classList.add("hidden"),this.setInForeground(),this.#x();const[g,C]=this.parentDimensions;this.parentRotation%180!==0&&(I.style.maxWidth=`${(100*C/g).toFixed(2)}%`,I.style.maxHeight=`${(100*g/C).toFixed(2)}%`);const[A,l]=this.getInitialTranslation();return this.translate(A,l),TC(this,I,["keydown","pointerdown","dblclick"]),this.isResizable&&this._uiManager._supportsPinchToZoom&&(this.#n||=new Fg({container:I,isPinchingDisabled:()=>!this.isSelected,onPinchStart:this.#y.bind(this),onPinching:this.#V.bind(this),onPinchEnd:this.#k.bind(this),signal:this._uiManager._signal})),this._uiManager._editorUndoBar?.hide(),I}#y(){this.#m={savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height},this.#C?.toggle(!1),this.parent.togglePointerEvents(!1)}#V(I,g,C){let l=.7*(C/g)+1-.7;if(l===1)return;const Z=this.#M(this.rotation),i=(R,X)=>[Z[0]*R+Z[2]*X,Z[1]*R+Z[3]*X],[d,s]=this.parentDimensions,G=this.x,b=this.y,m=this.width,B=this.height,o=D.MIN_SIZE/d,W=D.MIN_SIZE/s;l=Math.max(Math.min(l,1/m,1/B),o/m,W/B);const Y=D._round(m*l),w=D._round(B*l);if(Y===m&&w===B)return;this.#B||=[G,b,m,B];const a=i(m/2,B/2),h=D._round(G+a[0]),N=D._round(b+a[1]),V=i(Y/2,w/2);this.x=h-V[0],this.y=N-V[1],this.width=Y,this.height=w,this.setDims(d*Y,s*w),this.fixAndSetPosition(),this._onResizing()}#k(){this.#C?.toggle(!0),this.parent.togglePointerEvents(!0),this.#S()}pointerdown(I){const{isMac:g}=ZI.platform;if(I.button!==0||I.ctrlKey&&g){I.preventDefault();return}if(this.#w=!0,this._isDraggable){this.#j(I);return}this.#L(I)}#L(I){const{isMac:g}=ZI.platform;I.ctrlKey&&!g||I.shiftKey||I.metaKey&&g?this.parent.toggleSelected(this):this.parent.setSelected(this)}#j(I){const{isSelected:g}=this;this._uiManager.setUpDragSession();let C=!1;const A=new AbortController,l=this._uiManager.combinedSignal(A),Z={capture:!0,passive:!1,signal:l},i=s=>{A.abort(),this.#l=null,this.#w=!1,this._uiManager.endDragSession()||this.#L(s),C&&this._onStopDragging()};g&&(this.#N=I.clientX,this.#R=I.clientY,this.#l=I.pointerId,this.#i=I.pointerType,window.addEventListener("pointermove",s=>{C||(C=!0,this._onStartDragging());const{clientX:G,clientY:b,pointerId:m}=s;if(m!==this.#l){II(s);return}const[B,o]=this.screenToPageTranslation(G-this.#N,b-this.#R);this.#N=G,this.#R=b,this._uiManager.dragSelectedEditors(B,o)},Z),window.addEventListener("touchmove",II,Z),window.addEventListener("pointerdown",s=>{s.pointerType===this.#i&&(this.#n||s.isPrimary)&&i(s),II(s)},Z));const d=s=>{if(!this.#l||this.#l===s.pointerId){i(s);return}II(s)};window.addEventListener("pointerup",d,{signal:l}),window.addEventListener("blur",d,{signal:l})}_onStartDragging(){}_onStopDragging(){}moveInDOM(){this.#Y&&clearTimeout(this.#Y),this.#Y=setTimeout(()=>{this.#Y=null,this.parent?.moveEditorInDOM(this)},0)}_setParentAndPosition(I,g,C){I.changeParent(this),this.x=g,this.y=C,this.fixAndSetPosition(),this._onTranslated()}getRect(I,g,C=this.rotation){const A=this.parentScale,[l,Z]=this.pageDimensions,[i,d]=this.pageTranslation,s=I/A,G=g/A,b=this.x*l,m=this.y*Z,B=this.width*l,o=this.height*Z;switch(C){case 0:return[b+s+i,Z-m-G-o+d,b+s+B+i,Z-m-G+d];case 90:return[b+G+i,Z-m+s+d,b+G+o+i,Z-m+s+B+d];case 180:return[b-s-B+i,Z-m+G+d,b-s+i,Z-m+G+o+d];case 270:return[b-G-o+i,Z-m-s-B+d,b-G+i,Z-m-s+d];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(I,g){const[C,A,l,Z]=I,i=l-C,d=Z-A;switch(this.rotation){case 0:return[C,g-Z,i,d];case 90:return[C,g-A,d,i];case 180:return[l,g-A,i,d];case 270:return[l,g-Z,d,i];default:throw new Error("Invalid rotation")}}onceAdded(I){}isEmpty(){return!1}enableEditMode(){return this.isInEditMode()?!1:(this.parent.setEditingState(!1),this.#o=!0,!0)}disableEditMode(){return this.isInEditMode()?(this.parent.setEditingState(!0),this.#o=!1,!0):!1}isInEditMode(){return this.#o}shouldGetKeyboardEvents(){return this.#a}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}get isOnScreen(){const{top:I,left:g,bottom:C,right:A}=this.getClientDimensions(),{innerHeight:l,innerWidth:Z}=window;return g<Z&&A>0&&I<l&&C>0}#x(){if(this.#s||!this.div)return;this.#s=new AbortController;const I=this._uiManager.combinedSignal(this.#s);this.div.addEventListener("focusin",this.focusin.bind(this),{signal:I}),this.div.addEventListener("focusout",this.focusout.bind(this),{signal:I})}rebuild(){this.#x()}rotate(I){}resize(){}serializeDeleted(){return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex,popupRef:this._initialData?.popupRef||""}}serialize(I=!1,g=null){j("An editor must be serializable")}static async deserialize(I,g,C){const A=new this.prototype.constructor({parent:g,id:g.getNextId(),uiManager:C,annotationElementId:I.annotationElementId});A.rotation=I.rotation,A.#I=I.accessibilityData,A._isCopy=I.isCopy||!1;const[l,Z]=A.pageDimensions,[i,d,s,G]=A.getRectInCurrentCoords(I.rect,Z);return A.x=i/l,A.y=d/Z,A.width=s/l,A.height=G/Z,A}get hasBeenModified(){return!!this.annotationElementId&&(this.deleted||this.serialize()!==null)}remove(){if(this.#s?.abort(),this.#s=null,this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),this.#Y&&(clearTimeout(this.#Y),this.#Y=null),this.#U(),this.removeEditToolbar(),this.#h){for(const I of this.#h.values())clearTimeout(I);this.#h=null}this.parent=null,this.#n?.destroy(),this.#n=null}get isResizable(){return!1}makeResizable(){this.isResizable&&(this.#H(),this.#c.classList.remove("hidden"))}get toolbarPosition(){return null}keydown(I){if(!this.isResizable||I.target!==this.div||I.key!=="Enter")return;this._uiManager.setSelected(this),this.#m={savedX:this.x,savedY:this.y,savedWidth:this.width,savedHeight:this.height};const g=this.#c.children;if(!this.#g){this.#g=Array.from(g);const Z=this.#v.bind(this),i=this.#O.bind(this),d=this._uiManager._signal;for(const s of this.#g){const G=s.getAttribute("data-resizer-name");s.setAttribute("role","spinbutton"),s.addEventListener("keydown",Z,{signal:d}),s.addEventListener("blur",i,{signal:d}),s.addEventListener("focus",this.#p.bind(this,G),{signal:d}),s.setAttribute("data-l10n-id",D._l10nResizer[G])}}const C=this.#g[0];let A=0;for(const Z of g){if(Z===C)break;A++}const l=(360-this.rotation+this.parentRotation)%360/90*(this.#g.length/4);if(l!==A){if(l<A)for(let i=0;i<A-l;i++)this.#c.append(this.#c.firstChild);else if(l>A)for(let i=0;i<l-A;i++)this.#c.firstChild.before(this.#c.lastChild);let Z=0;for(const i of g){const s=this.#g[Z++].getAttribute("data-resizer-name");i.setAttribute("data-l10n-id",D._l10nResizer[s])}}this.#F(0),this.#a=!0,this.#c.firstChild.focus({focusVisible:!0}),I.preventDefault(),I.stopImmediatePropagation()}#v(I){D._resizerKeyboardManager.exec(this,I)}#O(I){this.#a&&I.relatedTarget?.parentNode!==this.#c&&this.#U()}#p(I){this.#W=this.#a?I:""}#F(I){if(this.#g)for(const g of this.#g)g.tabIndex=I}_resizeWithKeyboard(I,g){this.#a&&this.#Q(this.#W,{deltaX:I,deltaY:g,fromKeyboard:!0})}#U(){this.#a=!1,this.#F(-1),this.#S()}_stopResizingWithKeyboard(){this.#U(),this.div.focus()}select(){if(!(this.isSelected&&this._editToolbar)){if(this.isSelected=!0,this.makeResizable(),this.div?.classList.add("selectedEditor"),!this._editToolbar){this.addEditToolbar().then(()=>{this.div?.classList.contains("selectedEditor")&&this._editToolbar?.show()});return}this._editToolbar?.show(),this.#C?.toggleAltTextBadge(!1)}}unselect(){this.isSelected&&(this.isSelected=!1,this.#c?.classList.add("hidden"),this.div?.classList.remove("selectedEditor"),this.div?.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus({preventScroll:!0}),this._editToolbar?.hide(),this.#C?.toggleAltTextBadge(!0))}updateParams(I,g){}disableEditing(){}enableEditing(){}get canChangeContent(){return!1}enterInEditMode(){this.canChangeContent&&(this.enableEditMode(),this.div.focus())}dblclick(I){this.enterInEditMode(),this.parent.updateToolbar({mode:this.constructor._editorType,editId:this.id})}getElementForAltText(){return this.div}get contentDiv(){return this.div}get isEditing(){return this.#b}set isEditing(I){this.#b=I,this.parent&&(I?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(I,g){this.#d=!0;const C=I/g,{style:A}=this.div;A.aspectRatio=C,A.height="auto"}static get MIN_SIZE(){return 16}static canCreateNewEmptyEditor(){return!0}get telemetryInitialData(){return{action:"added"}}get telemetryFinalData(){return null}_reportTelemetry(I,g=!1){if(g){this.#h||=new Map;const{action:C}=I;let A=this.#h.get(C);A&&clearTimeout(A),A=setTimeout(()=>{this._reportTelemetry(I),this.#h.delete(C),this.#h.size===0&&(this.#h=null)},D._telemetryTimeout),this.#h.set(C,A);return}I.type||=this.editorType,this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",data:I}})}show(I=this._isVisible){this.div.classList.toggle("hidden",!I),this._isVisible=I}enable(){this.div&&(this.div.tabIndex=0),this.#Z=!1}disable(){this.div&&(this.div.tabIndex=-1),this.#Z=!0}renderAnnotationElement(I){let g=I.container.querySelector(".annotationContent");if(!g)g=document.createElement("div"),g.classList.add("annotationContent",this.editorType),I.container.prepend(g);else if(g.nodeName==="CANVAS"){const C=g;g=document.createElement("div"),g.classList.add("annotationContent",this.editorType),C.before(g)}return g}resetAnnotationElement(I){const{firstChild:g}=I.container;g?.nodeName==="DIV"&&g.classList.contains("annotationContent")&&g.remove()}}class Cl extends D{constructor(I){super(I),this.annotationElementId=I.annotationElementId,this.deleted=!0}serialize(){return this.serializeDeleted()}}const QC=3285377520,aI=4294901760,HI=65535;class jC{constructor(I){this.h1=I?I&4294967295:QC,this.h2=I?I&4294967295:QC}update(I){let g,C;if(typeof I=="string"){g=new Uint8Array(I.length*2),C=0;for(let W=0,Y=I.length;W<Y;W++){const w=I.charCodeAt(W);w<=255?g[C++]=w:(g[C++]=w>>>8,g[C++]=w&255)}}else if(ArrayBuffer.isView(I))g=I.slice(),C=g.byteLength;else throw new Error("Invalid data format, must be a string or TypedArray.");const A=C>>2,l=C-A*4,Z=new Uint32Array(g.buffer,0,A);let i=0,d=0,s=this.h1,G=this.h2;const b=3432918353,m=461845907,B=b&HI,o=m&HI;for(let W=0;W<A;W++)W&1?(i=Z[W],i=i*b&aI|i*B&HI,i=i<<15|i>>>17,i=i*m&aI|i*o&HI,s^=i,s=s<<13|s>>>19,s=s*5+3864292196):(d=Z[W],d=d*b&aI|d*B&HI,d=d<<15|d>>>17,d=d*m&aI|d*o&HI,G^=d,G=G<<13|G>>>19,G=G*5+3864292196);switch(i=0,l){case 3:i^=g[A*4+2]<<16;case 2:i^=g[A*4+1]<<8;case 1:i^=g[A*4],i=i*b&aI|i*B&HI,i=i<<15|i>>>17,i=i*m&aI|i*o&HI,A&1?s^=i:G^=i}this.h1=s,this.h2=G}hexdigest(){let I=this.h1,g=this.h2;return I^=g>>>1,I=I*3981806797&aI|I*36045&HI,g=g*4283543511&aI|((g<<16|I>>>16)*2950163797&aI)>>>16,I^=g>>>1,I=I*444984403&aI|I*60499&HI,g=g*3301882366&aI|((g<<16|I>>>16)*3120437893&aI)>>>16,I^=g>>>1,(I>>>0).toString(16).padStart(8,"0")+(g>>>0).toString(16).padStart(8,"0")}}const iC=Object.freeze({map:null,hash:"",transfer:void 0});class dC{#I=!1;#g=null;#C=new Map;constructor(){this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(I,g){const C=this.#C.get(I);return C===void 0?g:Object.assign(g,C)}getRawValue(I){return this.#C.get(I)}remove(I){if(this.#C.delete(I),this.#C.size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const g of this.#C.values())if(g instanceof D)return;this.onAnnotationEditor(null)}}setValue(I,g){const C=this.#C.get(I);let A=!1;if(C!==void 0)for(const[l,Z]of Object.entries(g))C[l]!==Z&&(A=!0,C[l]=Z);else A=!0,this.#C.set(I,g);A&&this.#A(),g instanceof D&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(g.constructor._type)}has(I){return this.#C.has(I)}get size(){return this.#C.size}#A(){this.#I||(this.#I=!0,typeof this.onSetModified=="function"&&this.onSetModified())}resetModified(){this.#I&&(this.#I=!1,typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new OC(this)}get serializable(){if(this.#C.size===0)return iC;const I=new Map,g=new jC,C=[],A=Object.create(null);let l=!1;for(const[Z,i]of this.#C){const d=i instanceof D?i.serialize(!1,A):i;d&&(I.set(Z,d),g.update(`${Z}:${JSON.stringify(d)}`),l||=!!d.bitmap)}if(l)for(const Z of I.values())Z.bitmap&&C.push(Z.bitmap);return I.size>0?{map:I,hash:g.hexdigest(),transfer:C}:iC}get editorStats(){let I=null;const g=new Map;for(const C of this.#C.values()){if(!(C instanceof D))continue;const A=C.telemetryFinalData;if(!A)continue;const{type:l}=A;g.has(l)||g.set(l,Object.getPrototypeOf(C).constructor),I||=Object.create(null);const Z=I[l]||=new Map;for(const[i,d]of Object.entries(A)){if(i==="type")continue;let s=Z.get(i);s||(s=new Map,Z.set(i,s));const G=s.get(d)??0;s.set(d,G+1)}}for(const[C,A]of g)I[C]=A.computeTelemetryFinalData(I[C]);return I}resetModifiedIds(){this.#g=null}get modifiedIds(){if(this.#g)return this.#g;const I=[];for(const g of this.#C.values())!(g instanceof D)||!g.annotationElementId||!g.serialize()||I.push(g.annotationElementId);return this.#g={ids:new Set(I),hash:I.join(",")}}[Symbol.iterator](){return this.#C.entries()}}class OC extends dC{#I;constructor(I){super();const{map:g,hash:C,transfer:A}=I.serializable,l=structuredClone(g,A?{transfer:A}:null);this.#I={map:l,hash:C,transfer:A}}get print(){j("Should not call PrintAnnotationStorage.print")}get serializable(){return this.#I}get modifiedIds(){return J(this,"modifiedIds",{ids:new Set,hash:""})}}class Al{#I=new Set;constructor({ownerDocument:I=globalThis.document,styleElement:g=null}){this._document=I,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(I){this.nativeFontFaces.add(I),this._document.fonts.add(I)}removeNativeFontFace(I){this.nativeFontFaces.delete(I),this._document.fonts.delete(I)}insertRule(I){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const g=this.styleElement.sheet;g.insertRule(I,g.cssRules.length)}clear(){for(const I of this.nativeFontFaces)this._document.fonts.delete(I);this.nativeFontFaces.clear(),this.#I.clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont({systemFontInfo:I,disableFontFace:g,_inspectFont:C}){if(!(!I||this.#I.has(I.loadedName))){if($(!g,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:A,src:l,style:Z}=I,i=new FontFace(A,l,Z);this.addNativeFontFace(i);try{await i.load(),this.#I.add(A),C?.(I)}catch{F(`Cannot load system font: ${I.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(i)}return}j("Not implemented: loadSystemFont without the Font Loading API.")}}async bind(I){if(I.attached||I.missingFile&&!I.systemFontInfo)return;if(I.attached=!0,I.systemFontInfo){await this.loadSystemFont(I);return}if(this.isFontLoadingAPISupported){const C=I.createNativeFontFace();if(C){this.addNativeFontFace(C);try{await C.loaded}catch(A){throw F(`Failed to load font '${C.family}': '${A}'.`),I.disableFontFace=!0,A}}return}const g=I.createFontFaceRule();if(g){if(this.insertRule(g),this.isSyncFontLoadingSupported)return;await new Promise(C=>{const A=this._queueLoadingCallback(C);this._prepareFontLoadEvent(I,A)})}}get isFontLoadingAPISupported(){const I=!!this._document?.fonts;return J(this,"isFontLoadingAPISupported",I)}get isSyncFontLoadingSupported(){return J(this,"isSyncFontLoadingSupported",_||ZI.platform.isFirefox)}_queueLoadingCallback(I){function g(){for($(!A.done,"completeRequest() cannot be called twice."),A.done=!0;C.length>0&&C[0].done;){const l=C.shift();setTimeout(l.callback,0)}}const{loadingRequests:C}=this,A={done:!1,complete:g,callback:I};return C.push(A),A}get _loadTestFont(){const I=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return J(this,"_loadTestFont",I)}_prepareFontLoadEvent(I,g){function C(N,V){return N.charCodeAt(V)<<24|N.charCodeAt(V+1)<<16|N.charCodeAt(V+2)<<8|N.charCodeAt(V+3)&255}function A(N,V,R,X){const n=N.substring(0,V),y=N.substring(V+R);return n+X+y}let l,Z;const i=this._document.createElement("canvas");i.width=1,i.height=1;const d=i.getContext("2d");let s=0;function G(N,V){if(++s>30){F("Load test font never loaded."),V();return}if(d.font="30px "+N,d.fillText(".",0,20),d.getImageData(0,0,1,1).data[3]>0){V();return}setTimeout(G.bind(null,N,V))}const b=`lt${Date.now()}${this.loadTestFontId++}`;let m=this._loadTestFont;m=A(m,976,b.length,b);const o=16,W=1482184792;let Y=C(m,o);for(l=0,Z=b.length-3;l<Z;l+=4)Y=Y-W+C(b,l)|0;l<b.length&&(Y=Y-W+C(b+"XXX",l)|0),m=A(m,o,4,QA(Y));const w=`url(data:font/opentype;base64,${btoa(m)});`,a=`@font-face {font-family:"${b}";src:${w}}`;this.insertRule(a);const h=this._document.createElement("div");h.style.visibility="hidden",h.style.width=h.style.height="10px",h.style.position="absolute",h.style.top=h.style.left="0px";for(const N of[I.loadedName,b]){const V=this._document.createElement("span");V.textContent="Hi",V.style.fontFamily=N,h.append(V)}this._document.body.append(h),G(b,()=>{h.remove(),g.complete()})}}class ll{constructor(I,g=null){this.compiledGlyphs=Object.create(null);for(const C in I)this[C]=I[C];this._inspectFont=g}createNativeFontFace(){if(!this.data||this.disableFontFace)return null;let I;if(!this.cssFontInfo)I=new FontFace(this.loadedName,this.data,{});else{const g={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(g.style=`oblique ${this.cssFontInfo.italicAngle}deg`),I=new FontFace(this.cssFontInfo.fontFamily,this.data,g)}return this._inspectFont?.(this),I}createFontFaceRule(){if(!this.data||this.disableFontFace)return null;const I=`url(data:${this.mimetype};base64,${kC(this.data)});`;let g;if(!this.cssFontInfo)g=`@font-face {font-family:"${this.loadedName}";src:${I}}`;else{let C=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(C+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),g=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${C}src:${I}}`}return this._inspectFont?.(this,I),g}getPathGenerator(I,g){if(this.compiledGlyphs[g]!==void 0)return this.compiledGlyphs[g];const C=this.loadedName+"_path_"+g;let A;try{A=I.get(C)}catch(Z){F(`getPathGenerator - ignoring character: "${Z}".`)}const l=new Path2D(A||"");return this.fontExtraProperties||I.delete(C),this.compiledGlyphs[g]=l}}function Zl(c){if(c instanceof URL)return c.href;if(typeof c=="string"){if(_)return c;const I=URL.parse(c,window.location);if(I)return I.href}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function il(c){if(_&&typeof Buffer<"u"&&c instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(c instanceof Uint8Array&&c.byteLength===c.buffer.byteLength)return c;if(typeof c=="string")return dg(c);if(c instanceof ArrayBuffer||ArrayBuffer.isView(c)||typeof c=="object"&&!isNaN(c?.length))return new Uint8Array(c);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}function zg(c){if(typeof c!="string")return null;if(c.endsWith("/"))return c;throw new Error(`Invalid factory url: "${c}" must include trailing slash.`)}const sC=c=>typeof c=="object"&&Number.isInteger(c?.num)&&c.num>=0&&Number.isInteger(c?.gen)&&c.gen>=0,dl=c=>typeof c=="object"&&typeof c?.name=="string",sl=vA.bind(null,sC,dl);class Gl{#I=new Map;#g=Promise.resolve();postMessage(I,g){const C={data:structuredClone(I,g?{transfer:g}:null)};this.#g.then(()=>{for(const[A]of this.#I)A.call(this,C)})}addEventListener(I,g,C=null){let A=null;if(C?.signal instanceof AbortSignal){const{signal:l}=C;if(l.aborted){F("LoopbackPort - cannot use an `aborted` signal.");return}const Z=()=>this.removeEventListener(I,g);A=()=>l.removeEventListener("abort",Z),l.addEventListener("abort",Z)}this.#I.set(g,A)}removeEventListener(I,g){this.#I.get(g)?.(),this.#I.delete(g)}terminate(){for(const[,I]of this.#I)I?.();this.#I.clear()}}const Jg={DATA:1,ERROR:2},gI={CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function UC(){}function BI(c){if(c instanceof zI||c instanceof fg||c instanceof pC||c instanceof Dg||c instanceof Pg)return c;switch(c instanceof Error||typeof c=="object"&&c!==null||j('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),c.name){case"AbortException":return new zI(c.message);case"InvalidPDFException":return new fg(c.message);case"PasswordException":return new pC(c.message,c.code);case"ResponseException":return new Dg(c.message,c.status,c.missing);case"UnknownErrorException":return new Pg(c.message,c.details)}return new Pg(c.message,c.toString())}class Bg{#I=new AbortController;constructor(I,g,C){this.sourceName=I,this.targetName=g,this.comObj=C,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),C.addEventListener("message",this.#g.bind(this),{signal:this.#I.signal})}#g({data:I}){if(I.targetName!==this.sourceName)return;if(I.stream){this.#A(I);return}if(I.callback){const C=I.callbackId,A=this.callbackCapabilities[C];if(!A)throw new Error(`Cannot resolve callback ${C}`);if(delete this.callbackCapabilities[C],I.callback===Jg.DATA)A.resolve(I.data);else if(I.callback===Jg.ERROR)A.reject(BI(I.reason));else throw new Error("Unexpected callback case");return}const g=this.actionHandler[I.action];if(!g)throw new Error(`Unknown action from worker: ${I.action}`);if(I.callbackId){const C=this.sourceName,A=I.sourceName,l=this.comObj;Promise.try(g,I.data).then(function(Z){l.postMessage({sourceName:C,targetName:A,callback:Jg.DATA,callbackId:I.callbackId,data:Z})},function(Z){l.postMessage({sourceName:C,targetName:A,callback:Jg.ERROR,callbackId:I.callbackId,reason:BI(Z)})});return}if(I.streamId){this.#C(I);return}g(I.data)}on(I,g){const C=this.actionHandler;if(C[I])throw new Error(`There is already an actionName called "${I}"`);C[I]=g}send(I,g,C){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:I,data:g},C)}sendWithPromise(I,g,C){const A=this.callbackId++,l=Promise.withResolvers();this.callbackCapabilities[A]=l;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:I,callbackId:A,data:g},C)}catch(Z){l.reject(Z)}return l.promise}sendWithStream(I,g,C,A){const l=this.streamId++,Z=this.sourceName,i=this.targetName,d=this.comObj;return new ReadableStream({start:s=>{const G=Promise.withResolvers();return this.streamControllers[l]={controller:s,startCall:G,pullCall:null,cancelCall:null,isClosed:!1},d.postMessage({sourceName:Z,targetName:i,action:I,streamId:l,data:g,desiredSize:s.desiredSize},A),G.promise},pull:s=>{const G=Promise.withResolvers();return this.streamControllers[l].pullCall=G,d.postMessage({sourceName:Z,targetName:i,stream:gI.PULL,streamId:l,desiredSize:s.desiredSize}),G.promise},cancel:s=>{$(s instanceof Error,"cancel must have a valid reason");const G=Promise.withResolvers();return this.streamControllers[l].cancelCall=G,this.streamControllers[l].isClosed=!0,d.postMessage({sourceName:Z,targetName:i,stream:gI.CANCEL,streamId:l,reason:BI(s)}),G.promise}},C)}#C(I){const g=I.streamId,C=this.sourceName,A=I.sourceName,l=this.comObj,Z=this,i=this.actionHandler[I.action],d={enqueue(s,G=1,b){if(this.isCancelled)return;const m=this.desiredSize;this.desiredSize-=G,m>0&&this.desiredSize<=0&&(this.sinkCapability=Promise.withResolvers(),this.ready=this.sinkCapability.promise),l.postMessage({sourceName:C,targetName:A,stream:gI.ENQUEUE,streamId:g,chunk:s},b)},close(){this.isCancelled||(this.isCancelled=!0,l.postMessage({sourceName:C,targetName:A,stream:gI.CLOSE,streamId:g}),delete Z.streamSinks[g])},error(s){$(s instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,l.postMessage({sourceName:C,targetName:A,stream:gI.ERROR,streamId:g,reason:BI(s)}))},sinkCapability:Promise.withResolvers(),onPull:null,onCancel:null,isCancelled:!1,desiredSize:I.desiredSize,ready:null};d.sinkCapability.resolve(),d.ready=d.sinkCapability.promise,this.streamSinks[g]=d,Promise.try(i,I.data,d).then(function(){l.postMessage({sourceName:C,targetName:A,stream:gI.START_COMPLETE,streamId:g,success:!0})},function(s){l.postMessage({sourceName:C,targetName:A,stream:gI.START_COMPLETE,streamId:g,reason:BI(s)})})}#A(I){const g=I.streamId,C=this.sourceName,A=I.sourceName,l=this.comObj,Z=this.streamControllers[g],i=this.streamSinks[g];switch(I.stream){case gI.START_COMPLETE:I.success?Z.startCall.resolve():Z.startCall.reject(BI(I.reason));break;case gI.PULL_COMPLETE:I.success?Z.pullCall.resolve():Z.pullCall.reject(BI(I.reason));break;case gI.PULL:if(!i){l.postMessage({sourceName:C,targetName:A,stream:gI.PULL_COMPLETE,streamId:g,success:!0});break}i.desiredSize<=0&&I.desiredSize>0&&i.sinkCapability.resolve(),i.desiredSize=I.desiredSize,Promise.try(i.onPull||UC).then(function(){l.postMessage({sourceName:C,targetName:A,stream:gI.PULL_COMPLETE,streamId:g,success:!0})},function(s){l.postMessage({sourceName:C,targetName:A,stream:gI.PULL_COMPLETE,streamId:g,reason:BI(s)})});break;case gI.ENQUEUE:if($(Z,"enqueue should have stream controller"),Z.isClosed)break;Z.controller.enqueue(I.chunk);break;case gI.CLOSE:if($(Z,"close should have stream controller"),Z.isClosed)break;Z.isClosed=!0,Z.controller.close(),this.#Z(Z,g);break;case gI.ERROR:$(Z,"error should have stream controller"),Z.controller.error(BI(I.reason)),this.#Z(Z,g);break;case gI.CANCEL_COMPLETE:I.success?Z.cancelCall.resolve():Z.cancelCall.reject(BI(I.reason)),this.#Z(Z,g);break;case gI.CANCEL:if(!i)break;const d=BI(I.reason);Promise.try(i.onCancel||UC,d).then(function(){l.postMessage({sourceName:C,targetName:A,stream:gI.CANCEL_COMPLETE,streamId:g,success:!0})},function(s){l.postMessage({sourceName:C,targetName:A,stream:gI.CANCEL_COMPLETE,streamId:g,reason:BI(s)})}),i.sinkCapability.reject(d),i.isCancelled=!0,delete this.streamSinks[g];break;default:throw new Error("Unexpected stream case")}}async#Z(I,g){await Promise.allSettled([I.startCall?.promise,I.pullCall?.promise,I.cancelCall?.promise]),delete this.streamControllers[g]}destroy(){this.#I?.abort(),this.#I=null}}class xC{#I=!1;constructor({enableHWA:I=!1}){this.#I=I}create(I,g){if(I<=0||g<=0)throw new Error("Invalid canvas size");const C=this._createCanvas(I,g);return{canvas:C,context:C.getContext("2d",{willReadFrequently:!this.#I})}}reset(I,g,C){if(!I.canvas)throw new Error("Canvas is not specified");if(g<=0||C<=0)throw new Error("Invalid canvas size");I.canvas.width=g,I.canvas.height=C}destroy(I){if(!I.canvas)throw new Error("Canvas is not specified");I.canvas.width=0,I.canvas.height=0,I.canvas=null,I.context=null}_createCanvas(I,g){j("Abstract method `_createCanvas` called.")}}class cl extends xC{constructor({ownerDocument:I=globalThis.document,enableHWA:g=!1}){super({enableHWA:g}),this._document=I}_createCanvas(I,g){const C=this._document.createElement("canvas");return C.width=I,C.height=g,C}}class vC{constructor({baseUrl:I=null,isCompressed:g=!0}){this.baseUrl=I,this.isCompressed=g}async fetch({name:I}){if(!this.baseUrl)throw new Error("Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.");if(!I)throw new Error("CMap name must be specified.");const g=this.baseUrl+I+(this.isCompressed?".bcmap":"");return this._fetch(g).then(C=>({cMapData:C,isCompressed:this.isCompressed})).catch(C=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${g}`)})}async _fetch(I){j("Abstract method `_fetch` called.")}}class rC extends vC{async _fetch(I){const g=await sg(I,this.isCompressed?"arraybuffer":"text");return g instanceof ArrayBuffer?new Uint8Array(g):dg(g)}}class EC{addFilter(I){return"none"}addHCMFilter(I,g){return"none"}addAlphaFilter(I){return"none"}addLuminosityFilter(I){return"none"}addHighlightHCMFilter(I,g,C,A,l){return"none"}destroy(I=!1){}}class bl extends EC{#I;#g;#C;#A;#Z;#l;#i=0;constructor({docId:I,ownerDocument:g=globalThis.document}){super(),this.#A=I,this.#Z=g}get#d(){return this.#g||=new Map}get#c(){return this.#l||=new Map}get#G(){if(!this.#C){const I=this.#Z.createElement("div"),{style:g}=I;g.visibility="hidden",g.contain="strict",g.width=g.height=0,g.position="absolute",g.top=g.left=0,g.zIndex=-1;const C=this.#Z.createElementNS(DI,"svg");C.setAttribute("width",0),C.setAttribute("height",0),this.#C=this.#Z.createElementNS(DI,"defs"),I.append(C),C.append(this.#C),this.#Z.body.append(I)}return this.#C}#m(I){if(I.length===1){const d=I[0],s=new Array(256);for(let b=0;b<256;b++)s[b]=d[b]/255;const G=s.join(",");return[G,G,G]}const[g,C,A]=I,l=new Array(256),Z=new Array(256),i=new Array(256);for(let d=0;d<256;d++)l[d]=g[d]/255,Z[d]=C[d]/255,i[d]=A[d]/255;return[l.join(","),Z.join(","),i.join(",")]}#s(I){if(this.#I===void 0){this.#I="";const g=this.#Z.URL;g!==this.#Z.baseURI&&(Kg(g)?F('#createUrl: ignore "data:"-URL for performance reasons.'):this.#I=SC(g,""))}return`url(${this.#I}#${I})`}addFilter(I){if(!I)return"none";let g=this.#d.get(I);if(g)return g;const[C,A,l]=this.#m(I),Z=I.length===1?C:`${C}${A}${l}`;if(g=this.#d.get(Z),g)return this.#d.set(I,g),g;const i=`g_${this.#A}_transfer_map_${this.#i++}`,d=this.#s(i);this.#d.set(I,d),this.#d.set(Z,d);const s=this.#B(i);return this.#o(C,A,l,s),d}addHCMFilter(I,g){const C=`${I}-${g}`,A="base";let l=this.#c.get(A);if(l?.key===C||(l?(l.filter?.remove(),l.key=C,l.url="none",l.filter=null):(l={key:C,url:"none",filter:null},this.#c.set(A,l)),!I||!g))return l.url;const Z=this.#Y(I);I=t.makeHexColor(...Z);const i=this.#Y(g);if(g=t.makeHexColor(...i),this.#G.style.color="",I==="#000000"&&g==="#ffffff"||I===g)return l.url;const d=new Array(256);for(let B=0;B<=255;B++){const o=B/255;d[B]=o<=.03928?o/12.92:((o+.055)/1.055)**2.4}const s=d.join(","),G=`g_${this.#A}_hcm_filter`,b=l.filter=this.#B(G);this.#o(s,s,s,b),this.#w(b);const m=(B,o)=>{const W=Z[B]/255,Y=i[B]/255,w=new Array(o+1);for(let a=0;a<=o;a++)w[a]=W+a/o*(Y-W);return w.join(",")};return this.#o(m(0,5),m(1,5),m(2,5),b),l.url=this.#s(G),l.url}addAlphaFilter(I){let g=this.#d.get(I);if(g)return g;const[C]=this.#m([I]),A=`alpha_${C}`;if(g=this.#d.get(A),g)return this.#d.set(I,g),g;const l=`g_${this.#A}_alpha_map_${this.#i++}`,Z=this.#s(l);this.#d.set(I,Z),this.#d.set(A,Z);const i=this.#B(l);return this.#a(C,i),Z}addLuminosityFilter(I){let g=this.#d.get(I||"luminosity");if(g)return g;let C,A;if(I?([C]=this.#m([I]),A=`luminosity_${C}`):A="luminosity",g=this.#d.get(A),g)return this.#d.set(I,g),g;const l=`g_${this.#A}_luminosity_map_${this.#i++}`,Z=this.#s(l);this.#d.set(I,Z),this.#d.set(A,Z);const i=this.#B(l);return this.#W(i),I&&this.#a(C,i),Z}addHighlightHCMFilter(I,g,C,A,l){const Z=`${g}-${C}-${A}-${l}`;let i=this.#c.get(I);if(i?.key===Z||(i?(i.filter?.remove(),i.key=Z,i.url="none",i.filter=null):(i={key:Z,url:"none",filter:null},this.#c.set(I,i)),!g||!C))return i.url;const[d,s]=[g,C].map(this.#Y.bind(this));let G=Math.round(.2126*d[0]+.7152*d[1]+.0722*d[2]),b=Math.round(.2126*s[0]+.7152*s[1]+.0722*s[2]),[m,B]=[A,l].map(this.#Y.bind(this));b<G&&([G,b,m,B]=[b,G,B,m]),this.#G.style.color="";const o=(w,a,h)=>{const N=new Array(256),V=(b-G)/h,R=w/255,X=(a-w)/(255*h);let n=0;for(let y=0;y<=h;y++){const K=Math.round(G+y*V),e=R+y*X;for(let T=n;T<=K;T++)N[T]=e;n=K+1}for(let y=n;y<256;y++)N[y]=N[n-1];return N.join(",")},W=`g_${this.#A}_hcm_${I}_filter`,Y=i.filter=this.#B(W);return this.#w(Y),this.#o(o(m[0],B[0],5),o(m[1],B[1],5),o(m[2],B[2],5),Y),i.url=this.#s(W),i.url}destroy(I=!1){I&&this.#l?.size||(this.#C?.parentNode.parentNode.remove(),this.#C=null,this.#g?.clear(),this.#g=null,this.#l?.clear(),this.#l=null,this.#i=0)}#W(I){const g=this.#Z.createElementNS(DI,"feColorMatrix");g.setAttribute("type","matrix"),g.setAttribute("values","0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0"),I.append(g)}#w(I){const g=this.#Z.createElementNS(DI,"feColorMatrix");g.setAttribute("type","matrix"),g.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),I.append(g)}#B(I){const g=this.#Z.createElementNS(DI,"filter");return g.setAttribute("color-interpolation-filters","sRGB"),g.setAttribute("id",I),this.#G.append(g),g}#b(I,g,C){const A=this.#Z.createElementNS(DI,g);A.setAttribute("type","discrete"),A.setAttribute("tableValues",C),I.append(A)}#o(I,g,C,A){const l=this.#Z.createElementNS(DI,"feComponentTransfer");A.append(l),this.#b(l,"feFuncR",I),this.#b(l,"feFuncG",g),this.#b(l,"feFuncB",C)}#a(I,g){const C=this.#Z.createElementNS(DI,"feComponentTransfer");g.append(C),this.#b(C,"feFuncA",I)}#Y(I){return this.#G.style.color=I,Sg(getComputedStyle(this.#G).getPropertyValue("color"))}}class PC{constructor({baseUrl:I=null}){this.baseUrl=I}async fetch({filename:I}){if(!this.baseUrl)throw new Error("Ensure that the `standardFontDataUrl` API parameter is provided.");if(!I)throw new Error("Font filename must be specified.");const g=`${this.baseUrl}${I}`;return this._fetch(g).catch(C=>{throw new Error(`Unable to load font data at: ${g}`)})}async _fetch(I){j("Abstract method `_fetch` called.")}}class fC extends PC{async _fetch(I){const g=await sg(I,"arraybuffer");return new Uint8Array(g)}}class _C{constructor({baseUrl:I=null}){this.baseUrl=I}async fetch({filename:I}){if(!this.baseUrl)throw new Error("Ensure that the `wasmUrl` API parameter is provided.");if(!I)throw new Error("Wasm filename must be specified.");const g=`${this.baseUrl}${I}`;return this._fetch(g).catch(C=>{throw new Error(`Unable to load wasm data at: ${g}`)})}async _fetch(I){j("Abstract method `_fetch` called.")}}class qC extends _C{async _fetch(I){const g=await sg(I,"arraybuffer");return new Uint8Array(g)}}_&&F("Please use the `legacy` build in Node.js environments.");async function GC(c){const g=await process.getBuiltinModule("fs").promises.readFile(c);return new Uint8Array(g)}class ml extends EC{}class Bl extends xC{_createCanvas(I,g){return process.getBuiltinModule("module").createRequire(typeof document>"u"&&typeof location>"u"?require("url").pathToFileURL(__filename).href:typeof document>"u"?location.href:AI&&AI.tagName.toUpperCase()==="SCRIPT"&&AI.src||new URL("vue-pdf-signer.umd.js",document.baseURI).href)("@napi-rs/canvas").createCanvas(I,g)}}class Wl extends vC{async _fetch(I){return GC(I)}}class ol extends PC{async _fetch(I){return GC(I)}}class wl extends _C{async _fetch(I){return GC(I)}}const iI={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};function cC(c,I){if(!I)return;const g=I[2]-I[0],C=I[3]-I[1],A=new Path2D;A.rect(I[0],I[1],g,C),c.clip(A)}class bC{isModifyingCurrentTransform(){return!1}getPattern(){j("Abstract method `getPattern` called.")}}class Yl extends bC{constructor(I){super(),this._type=I[1],this._bbox=I[2],this._colorStops=I[3],this._p0=I[4],this._p1=I[5],this._r0=I[6],this._r1=I[7],this.matrix=null}_createGradient(I){let g;this._type==="axial"?g=I.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(g=I.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const C of this._colorStops)g.addColorStop(C[0],C[1]);return g}getPattern(I,g,C,A){let l;if(A===iI.STROKE||A===iI.FILL){const Z=g.current.getClippedPathBoundingBox(A,v(I))||[0,0,0,0],i=Math.ceil(Z[2]-Z[0])||1,d=Math.ceil(Z[3]-Z[1])||1,s=g.cachedCanvases.getCanvas("pattern",i,d),G=s.context;G.clearRect(0,0,G.canvas.width,G.canvas.height),G.beginPath(),G.rect(0,0,G.canvas.width,G.canvas.height),G.translate(-Z[0],-Z[1]),C=t.transform(C,[1,0,0,1,Z[0],Z[1]]),G.transform(...g.baseTransform),this.matrix&&G.transform(...this.matrix),cC(G,this._bbox),G.fillStyle=this._createGradient(G),G.fill(),l=I.createPattern(s.canvas,"no-repeat");const b=new DOMMatrix(C);l.setTransform(b)}else cC(I,this._bbox),l=this._createGradient(I);return l}}function mC(c,I,g,C,A,l,Z,i){const d=I.coords,s=I.colors,G=c.data,b=c.width*4;let m;d[g+1]>d[C+1]&&(m=g,g=C,C=m,m=l,l=Z,Z=m),d[C+1]>d[A+1]&&(m=C,C=A,A=m,m=Z,Z=i,i=m),d[g+1]>d[C+1]&&(m=g,g=C,C=m,m=l,l=Z,Z=m);const B=(d[g]+I.offsetX)*I.scaleX,o=(d[g+1]+I.offsetY)*I.scaleY,W=(d[C]+I.offsetX)*I.scaleX,Y=(d[C+1]+I.offsetY)*I.scaleY,w=(d[A]+I.offsetX)*I.scaleX,a=(d[A+1]+I.offsetY)*I.scaleY;if(o>=a)return;const h=s[l],N=s[l+1],V=s[l+2],R=s[Z],X=s[Z+1],n=s[Z+2],y=s[i],K=s[i+1],e=s[i+2],T=Math.round(o),O=Math.round(a);let L,mI,M,u,NI,pI,PI,uI;for(let lI=T;lI<=O;lI++){if(lI<Y){const r=lI<o?0:(o-lI)/(o-Y);L=B-(B-W)*r,mI=h-(h-R)*r,M=N-(N-X)*r,u=V-(V-n)*r}else{let r;lI>a?r=1:Y===a?r=0:r=(Y-lI)/(Y-a),L=W-(W-w)*r,mI=R-(R-y)*r,M=X-(X-K)*r,u=n-(n-e)*r}let f;lI<o?f=0:lI>a?f=1:f=(o-lI)/(o-a),NI=B-(B-w)*f,pI=h-(h-y)*f,PI=N-(N-K)*f,uI=V-(V-e)*f;const Zg=Math.round(Math.min(L,NI)),LI=Math.round(Math.max(L,NI));let TI=b*lI+Zg*4;for(let r=Zg;r<=LI;r++)f=(L-r)/(L-NI),f<0?f=0:f>1&&(f=1),G[TI++]=mI-(mI-pI)*f|0,G[TI++]=M-(M-PI)*f|0,G[TI++]=u-(u-uI)*f|0,G[TI++]=255}}function hl(c,I,g){const C=I.coords,A=I.colors;let l,Z;switch(I.type){case"lattice":const i=I.verticesPerRow,d=Math.floor(C.length/i)-1,s=i-1;for(l=0;l<d;l++){let G=l*i;for(let b=0;b<s;b++,G++)mC(c,g,C[G],C[G+1],C[G+i],A[G],A[G+1],A[G+i]),mC(c,g,C[G+i+1],C[G+1],C[G+i],A[G+i+1],A[G+1],A[G+i])}break;case"triangles":for(l=0,Z=C.length;l<Z;l+=3)mC(c,g,C[l],C[l+1],C[l+2],A[l],A[l+1],A[l+2]);break;default:throw new Error("illegal figure")}}class al extends bC{constructor(I){super(),this._coords=I[2],this._colors=I[3],this._figures=I[4],this._bounds=I[5],this._bbox=I[6],this._background=I[7],this.matrix=null}_createMeshCanvas(I,g,C){const i=Math.floor(this._bounds[0]),d=Math.floor(this._bounds[1]),s=Math.ceil(this._bounds[2])-i,G=Math.ceil(this._bounds[3])-d,b=Math.min(Math.ceil(Math.abs(s*I[0]*1.1)),3e3),m=Math.min(Math.ceil(Math.abs(G*I[1]*1.1)),3e3),B=s/b,o=G/m,W={coords:this._coords,colors:this._colors,offsetX:-i,offsetY:-d,scaleX:1/B,scaleY:1/o},Y=b+4,w=m+4,a=C.getCanvas("mesh",Y,w),h=a.context,N=h.createImageData(b,m);if(g){const R=N.data;for(let X=0,n=R.length;X<n;X+=4)R[X]=g[0],R[X+1]=g[1],R[X+2]=g[2],R[X+3]=255}for(const R of this._figures)hl(N,R,W);return h.putImageData(N,2,2),{canvas:a.canvas,offsetX:i-2*B,offsetY:d-2*o,scaleX:B,scaleY:o}}isModifyingCurrentTransform(){return!0}getPattern(I,g,C,A){cC(I,this._bbox);const l=new Float32Array(2);if(A===iI.SHADING)t.singularValueDecompose2dScale(v(I),l);else if(this.matrix){t.singularValueDecompose2dScale(this.matrix,l);const[i,d]=l;t.singularValueDecompose2dScale(g.baseTransform,l),l[0]*=i,l[1]*=d}else t.singularValueDecompose2dScale(g.baseTransform,l);const Z=this._createMeshCanvas(l,A===iI.SHADING?null:this._background,g.cachedCanvases);return A!==iI.SHADING&&(I.setTransform(...g.baseTransform),this.matrix&&I.transform(...this.matrix)),I.translate(Z.offsetX,Z.offsetY),I.scale(Z.scaleX,Z.scaleY),I.createPattern(Z.canvas,"no-repeat")}}class Vl extends bC{getPattern(){return"hotpink"}}function Nl(c){switch(c[0]){case"RadialAxial":return new Yl(c);case"Mesh":return new al(c);case"Dummy":return new Vl}throw new Error(`Unknown IR type: ${c[0]}`)}const $C={COLORED:1,UNCOLORED:2};class BC{static MAX_PATTERN_SIZE=3e3;constructor(I,g,C,A){this.color=I[1],this.operatorList=I[2],this.matrix=I[3],this.bbox=I[4],this.xstep=I[5],this.ystep=I[6],this.paintType=I[7],this.tilingType=I[8],this.ctx=g,this.canvasGraphicsFactory=C,this.baseTransform=A}createPatternCanvas(I){const{bbox:g,operatorList:C,paintType:A,tilingType:l,color:Z,canvasGraphicsFactory:i}=this;let{xstep:d,ystep:s}=this;d=Math.abs(d),s=Math.abs(s),eg("TilingType: "+l);const G=g[0],b=g[1],m=g[2],B=g[3],o=m-G,W=B-b,Y=new Float32Array(2);t.singularValueDecompose2dScale(this.matrix,Y);const[w,a]=Y;t.singularValueDecompose2dScale(this.baseTransform,Y);const h=w*Y[0],N=a*Y[1];let V=o,R=W,X=!1,n=!1;const y=Math.ceil(d*h),K=Math.ceil(s*N),e=Math.ceil(o*h),T=Math.ceil(W*N);y>=e?V=d:X=!0,K>=T?R=s:n=!0;const O=this.getSizeAndScale(V,this.ctx.canvas.width,h),L=this.getSizeAndScale(R,this.ctx.canvas.height,N),mI=I.cachedCanvases.getCanvas("pattern",O.size,L.size),M=mI.context,u=i.createCanvasGraphics(M);if(u.groupLevel=I.groupLevel,this.setFillAndStrokeStyleToContext(u,A,Z),M.translate(-O.scale*G,-L.scale*b),u.transform(O.scale,0,0,L.scale,0,0),M.save(),this.clipBbox(u,G,b,m,B),u.baseTransform=v(u.ctx),u.executeOperatorList(C),u.endDrawing(),M.restore(),X||n){const NI=mI.canvas;X&&(V=d),n&&(R=s);const pI=this.getSizeAndScale(V,this.ctx.canvas.width,h),PI=this.getSizeAndScale(R,this.ctx.canvas.height,N),uI=pI.size,lI=PI.size,f=I.cachedCanvases.getCanvas("pattern-workaround",uI,lI),Zg=f.context,LI=X?Math.floor(o/d):0,TI=n?Math.floor(W/s):0;for(let r=0;r<=LI;r++)for(let Xg=0;Xg<=TI;Xg++)Zg.drawImage(NI,uI*r,lI*Xg,uI,lI,0,0,uI,lI);return{canvas:f.canvas,scaleX:pI.scale,scaleY:PI.scale,offsetX:G,offsetY:b}}return{canvas:mI.canvas,scaleX:O.scale,scaleY:L.scale,offsetX:G,offsetY:b}}getSizeAndScale(I,g,C){const A=Math.max(BC.MAX_PATTERN_SIZE,g);let l=Math.ceil(I*C);return l>=A?l=A:C=l/I,{scale:C,size:l}}clipBbox(I,g,C,A,l){const Z=A-g,i=l-C;I.ctx.rect(g,C,Z,i),t.axialAlignedBoundingBox([g,C,A,l],v(I.ctx),I.current.minMax),I.clip(),I.endPath()}setFillAndStrokeStyleToContext(I,g,C){const A=I.ctx,l=I.current;switch(g){case $C.COLORED:const{fillStyle:Z,strokeStyle:i}=this.ctx;A.fillStyle=l.fillColor=Z,A.strokeStyle=l.strokeColor=i;break;case $C.UNCOLORED:A.fillStyle=A.strokeStyle=C,l.fillColor=l.strokeColor=C;break;default:throw new TA(`Unsupported paint type: ${g}`)}}isModifyingCurrentTransform(){return!1}getPattern(I,g,C,A){let l=C;A!==iI.SHADING&&(l=t.transform(l,g.baseTransform),this.matrix&&(l=t.transform(l,this.matrix)));const Z=this.createPatternCanvas(g);let i=new DOMMatrix(l);i=i.translate(Z.offsetX,Z.offsetY),i=i.scale(1/Z.scaleX,1/Z.scaleY);const d=I.createPattern(Z.canvas,"repeat");return d.setTransform(i),d}}function Rl({src:c,srcPos:I=0,dest:g,width:C,height:A,nonBlackColor:l=4294967295,inverseDecode:Z=!1}){const i=ZI.isLittleEndian?4278190080:255,[d,s]=Z?[l,i]:[i,l],G=C>>3,b=C&7,m=c.length;g=new Uint32Array(g.buffer);let B=0;for(let o=0;o<A;o++){for(const Y=I+G;I<Y;I++){const w=I<m?c[I]:255;g[B++]=w&128?s:d,g[B++]=w&64?s:d,g[B++]=w&32?s:d,g[B++]=w&16?s:d,g[B++]=w&8?s:d,g[B++]=w&4?s:d,g[B++]=w&2?s:d,g[B++]=w&1?s:d}if(b===0)continue;const W=I<m?c[I++]:255;for(let Y=0;Y<b;Y++)g[B++]=W&1<<7-Y?s:d}return{srcPos:I,destPos:B}}const IA=16,gA=100,Xl=15,CA=10,WI=16,WC=new DOMMatrix,YI=new Float32Array(2),qI=new Float32Array([1/0,1/0,-1/0,-1/0]);function nl(c,I){if(c._removeMirroring)throw new Error("Context is already forwarding operations.");c.__originalSave=c.save,c.__originalRestore=c.restore,c.__originalRotate=c.rotate,c.__originalScale=c.scale,c.__originalTranslate=c.translate,c.__originalTransform=c.transform,c.__originalSetTransform=c.setTransform,c.__originalResetTransform=c.resetTransform,c.__originalClip=c.clip,c.__originalMoveTo=c.moveTo,c.__originalLineTo=c.lineTo,c.__originalBezierCurveTo=c.bezierCurveTo,c.__originalRect=c.rect,c.__originalClosePath=c.closePath,c.__originalBeginPath=c.beginPath,c._removeMirroring=()=>{c.save=c.__originalSave,c.restore=c.__originalRestore,c.rotate=c.__originalRotate,c.scale=c.__originalScale,c.translate=c.__originalTranslate,c.transform=c.__originalTransform,c.setTransform=c.__originalSetTransform,c.resetTransform=c.__originalResetTransform,c.clip=c.__originalClip,c.moveTo=c.__originalMoveTo,c.lineTo=c.__originalLineTo,c.bezierCurveTo=c.__originalBezierCurveTo,c.rect=c.__originalRect,c.closePath=c.__originalClosePath,c.beginPath=c.__originalBeginPath,delete c._removeMirroring},c.save=function(){I.save(),this.__originalSave()},c.restore=function(){I.restore(),this.__originalRestore()},c.translate=function(g,C){I.translate(g,C),this.__originalTranslate(g,C)},c.scale=function(g,C){I.scale(g,C),this.__originalScale(g,C)},c.transform=function(g,C,A,l,Z,i){I.transform(g,C,A,l,Z,i),this.__originalTransform(g,C,A,l,Z,i)},c.setTransform=function(g,C,A,l,Z,i){I.setTransform(g,C,A,l,Z,i),this.__originalSetTransform(g,C,A,l,Z,i)},c.resetTransform=function(){I.resetTransform(),this.__originalResetTransform()},c.rotate=function(g){I.rotate(g),this.__originalRotate(g)},c.clip=function(g){I.clip(g),this.__originalClip(g)},c.moveTo=function(g,C){I.moveTo(g,C),this.__originalMoveTo(g,C)},c.lineTo=function(g,C){I.lineTo(g,C),this.__originalLineTo(g,C)},c.bezierCurveTo=function(g,C,A,l,Z,i){I.bezierCurveTo(g,C,A,l,Z,i),this.__originalBezierCurveTo(g,C,A,l,Z,i)},c.rect=function(g,C,A,l){I.rect(g,C,A,l),this.__originalRect(g,C,A,l)},c.closePath=function(){I.closePath(),this.__originalClosePath()},c.beginPath=function(){I.beginPath(),this.__originalBeginPath()}}class yl{constructor(I){this.canvasFactory=I,this.cache=Object.create(null)}getCanvas(I,g,C){let A;return this.cache[I]!==void 0?(A=this.cache[I],this.canvasFactory.reset(A,g,C)):(A=this.canvasFactory.create(g,C),this.cache[I]=A),A}delete(I){delete this.cache[I]}clear(){for(const I in this.cache){const g=this.cache[I];this.canvasFactory.destroy(g),delete this.cache[I]}}}function kg(c,I,g,C,A,l,Z,i,d,s){const[G,b,m,B,o,W]=v(c);if(b===0&&m===0){const a=Z*G+o,h=Math.round(a),N=i*B+W,V=Math.round(N),R=(Z+d)*G+o,X=Math.abs(Math.round(R)-h)||1,n=(i+s)*B+W,y=Math.abs(Math.round(n)-V)||1;return c.setTransform(Math.sign(G),0,0,Math.sign(B),h,V),c.drawImage(I,g,C,A,l,0,0,X,y),c.setTransform(G,b,m,B,o,W),[X,y]}if(G===0&&B===0){const a=i*m+o,h=Math.round(a),N=Z*b+W,V=Math.round(N),R=(i+s)*m+o,X=Math.abs(Math.round(R)-h)||1,n=(Z+d)*b+W,y=Math.abs(Math.round(n)-V)||1;return c.setTransform(0,Math.sign(b),Math.sign(m),0,h,V),c.drawImage(I,g,C,A,l,0,0,y,X),c.setTransform(G,b,m,B,o,W),[y,X]}c.drawImage(I,g,C,A,l,Z,i,d,s);const Y=Math.hypot(G,b),w=Math.hypot(m,B);return[Y*d,w*s]}class AA{alphaIsShape=!1;fontSize=0;fontSizeScale=1;textMatrix=null;textMatrixScale=1;fontMatrix=ig;leading=0;x=0;y=0;lineX=0;lineY=0;charSpacing=0;wordSpacing=0;textHScale=1;textRenderingMode=sI.FILL;textRise=0;fillColor="#000000";strokeColor="#000000";patternFill=!1;patternStroke=!1;fillAlpha=1;strokeAlpha=1;lineWidth=1;activeSMask=null;transferMaps="none";constructor(I,g){this.clipBox=new Float32Array([0,0,I,g]),this.minMax=qI.slice()}clone(){const I=Object.create(this);return I.clipBox=this.clipBox.slice(),I.minMax=this.minMax.slice(),I}getPathBoundingBox(I=iI.FILL,g=null){const C=this.minMax.slice();if(I===iI.STROKE){g||j("Stroke bounding box must include transform."),t.singularValueDecompose2dScale(g,YI);const A=YI[0]*this.lineWidth/2,l=YI[1]*this.lineWidth/2;C[0]-=A,C[1]-=l,C[2]+=A,C[3]+=l}return C}updateClipFromPath(){const I=t.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(I||[0,0,0,0])}isEmptyClip(){return this.minMax[0]===1/0}startNewPathAndClipBox(I){this.clipBox.set(I,0),this.minMax.set(qI,0)}getClippedPathBoundingBox(I=iI.FILL,g=null){return t.intersect(this.clipBox,this.getPathBoundingBox(I,g))}}function lA(c,I){if(I instanceof ImageData){c.putImageData(I,0,0);return}const g=I.height,C=I.width,A=g%WI,l=(g-A)/WI,Z=A===0?l:l+1,i=c.createImageData(C,WI);let d=0,s;const G=I.data,b=i.data;let m,B,o,W;if(I.kind===yg.GRAYSCALE_1BPP){const Y=G.byteLength,w=new Uint32Array(b.buffer,0,b.byteLength>>2),a=w.length,h=C+7>>3,N=4294967295,V=ZI.isLittleEndian?4278190080:255;for(m=0;m<Z;m++){for(o=m<l?WI:A,s=0,B=0;B<o;B++){const R=Y-d;let X=0;const n=R>h?C:R*8-7,y=n&-8;let K=0,e=0;for(;X<y;X+=8)e=G[d++],w[s++]=e&128?N:V,w[s++]=e&64?N:V,w[s++]=e&32?N:V,w[s++]=e&16?N:V,w[s++]=e&8?N:V,w[s++]=e&4?N:V,w[s++]=e&2?N:V,w[s++]=e&1?N:V;for(;X<n;X++)K===0&&(e=G[d++],K=128),w[s++]=e&K?N:V,K>>=1}for(;s<a;)w[s++]=0;c.putImageData(i,0,m*WI)}}else if(I.kind===yg.RGBA_32BPP){for(B=0,W=C*WI*4,m=0;m<l;m++)b.set(G.subarray(d,d+W)),d+=W,c.putImageData(i,0,B),B+=WI;m<Z&&(W=C*A*4,b.set(G.subarray(d,d+W)),c.putImageData(i,0,B))}else if(I.kind===yg.RGB_24BPP)for(o=WI,W=C*o,m=0;m<Z;m++){for(m>=l&&(o=A,W=C*o),s=0,B=W;B--;)b[s++]=G[d++],b[s++]=G[d++],b[s++]=G[d++],b[s++]=255;c.putImageData(i,0,m*WI)}else throw new Error(`bad image kind: ${I.kind}`)}function ZA(c,I){if(I.bitmap){c.drawImage(I.bitmap,0,0);return}const g=I.height,C=I.width,A=g%WI,l=(g-A)/WI,Z=A===0?l:l+1,i=c.createImageData(C,WI);let d=0;const s=I.data,G=i.data;for(let b=0;b<Z;b++){const m=b<l?WI:A;({srcPos:d}=Rl({src:s,srcPos:d,dest:G,width:C,height:m,nonBlackColor:0})),c.putImageData(i,0,b*WI)}}function Wg(c,I){const g=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const C of g)c[C]!==void 0&&(I[C]=c[C]);c.setLineDash!==void 0&&(I.setLineDash(c.getLineDash()),I.lineDashOffset=c.lineDashOffset)}function Lg(c){c.strokeStyle=c.fillStyle="#000000",c.fillRule="nonzero",c.globalAlpha=1,c.lineWidth=1,c.lineCap="butt",c.lineJoin="miter",c.miterLimit=10,c.globalCompositeOperation="source-over",c.font="10px sans-serif",c.setLineDash!==void 0&&(c.setLineDash([]),c.lineDashOffset=0);const{filter:I}=c;I!=="none"&&I!==""&&(c.filter="none")}function iA(c,I){if(I)return!0;t.singularValueDecompose2dScale(c,YI);const g=Math.fround(nI.pixelRatio*_I.PDF_TO_CSS_UNITS);return YI[0]<=g&&YI[1]<=g}const Hl=["butt","round","square"],Ml=["miter","round","bevel"],ul={},dA={};class $I{constructor(I,g,C,A,l,{optionalContentConfig:Z,markedContentStack:i=null},d,s){this.ctx=I,this.current=new AA(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=g,this.objs=C,this.canvasFactory=A,this.filterFactory=l,this.groupStack=[],this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=i||[],this.optionalContentConfig=Z,this.cachedCanvases=new yl(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=d,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=s,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(I,g=null){return typeof I=="string"?I.startsWith("g_")?this.commonObjs.get(I):this.objs.get(I):g}beginDrawing({transform:I,viewport:g,transparency:C=!1,background:A=null}){const l=this.ctx.canvas.width,Z=this.ctx.canvas.height,i=this.ctx.fillStyle;if(this.ctx.fillStyle=A||"#ffffff",this.ctx.fillRect(0,0,l,Z),this.ctx.fillStyle=i,C){const d=this.cachedCanvases.getCanvas("transparent",l,Z);this.compositeCtx=this.ctx,this.transparentCanvas=d.canvas,this.ctx=d.context,this.ctx.save(),this.ctx.transform(...v(this.compositeCtx))}this.ctx.save(),Lg(this.ctx),I&&(this.ctx.transform(...I),this.outputScaleX=I[0],this.outputScaleY=I[0]),this.ctx.transform(...g.transform),this.viewportScale=g.scale,this.baseTransform=v(this.ctx)}executeOperatorList(I,g,C,A){const l=I.argsArray,Z=I.fnArray;let i=g||0;const d=l.length;if(d===i)return i;const s=d-i>CA&&typeof C=="function",G=s?Date.now()+Xl:0;let b=0;const m=this.commonObjs,B=this.objs;let o;for(;;){if(A!==void 0&&i===A.nextBreakPoint)return A.breakIt(i,C),i;if(o=Z[i],o!==Mg.dependency)this[o].apply(this,l[i]);else for(const W of l[i]){const Y=W.startsWith("g_")?m:B;if(!Y.has(W))return Y.get(W,C),i}if(i++,i===d)return i;if(s&&++b>CA){if(Date.now()>G)return C(),i;b=0}}}#I(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.current.activeSMask=null,this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)}endDrawing(){this.#I(),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const I of this._cachedBitmapsMap.values()){for(const g of I.values())typeof HTMLCanvasElement<"u"&&g instanceof HTMLCanvasElement&&(g.width=g.height=0);I.clear()}this._cachedBitmapsMap.clear(),this.#g()}#g(){if(this.pageColors){const I=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if(I!=="none"){const g=this.ctx.filter;this.ctx.filter=I,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=g}}}_scaleImage(I,g){const C=I.width??I.displayWidth,A=I.height??I.displayHeight;let l=Math.max(Math.hypot(g[0],g[1]),1),Z=Math.max(Math.hypot(g[2],g[3]),1),i=C,d=A,s="prescale1",G,b;for(;l>2&&i>1||Z>2&&d>1;){let m=i,B=d;l>2&&i>1&&(m=i>=16384?Math.floor(i/2)-1||1:Math.ceil(i/2),l/=i/m),Z>2&&d>1&&(B=d>=16384?Math.floor(d/2)-1||1:Math.ceil(d)/2,Z/=d/B),G=this.cachedCanvases.getCanvas(s,m,B),b=G.context,b.clearRect(0,0,m,B),b.drawImage(I,0,0,i,d,0,0,m,B),I=G.canvas,i=m,d=B,s=s==="prescale1"?"prescale2":"prescale1"}return{img:I,paintWidth:i,paintHeight:d}}_createMaskCanvas(I){const g=this.ctx,{width:C,height:A}=I,l=this.current.fillColor,Z=this.current.patternFill,i=v(g);let d,s,G,b;if((I.bitmap||I.data)&&I.count>1){const y=I.bitmap||I.data.buffer;s=JSON.stringify(Z?i:[i.slice(0,4),l]),d=this._cachedBitmapsMap.get(y),d||(d=new Map,this._cachedBitmapsMap.set(y,d));const K=d.get(s);if(K&&!Z){const e=Math.round(Math.min(i[0],i[2])+i[4]),T=Math.round(Math.min(i[1],i[3])+i[5]);return{canvas:K,offsetX:e,offsetY:T}}G=K}G||(b=this.cachedCanvases.getCanvas("maskCanvas",C,A),ZA(b.context,I));let m=t.transform(i,[1/C,0,0,-1/A,0,0]);m=t.transform(m,[1,0,0,1,0,-A]);const B=qI.slice();t.axialAlignedBoundingBox([0,0,C,A],m,B);const[o,W,Y,w]=B,a=Math.round(Y-o)||1,h=Math.round(w-W)||1,N=this.cachedCanvases.getCanvas("fillCanvas",a,h),V=N.context,R=o,X=W;V.translate(-R,-X),V.transform(...m),G||(G=this._scaleImage(b.canvas,XI(V)),G=G.img,d&&Z&&d.set(s,G)),V.imageSmoothingEnabled=iA(v(V),I.interpolate),kg(V,G,0,0,G.width,G.height,0,0,C,A),V.globalCompositeOperation="source-in";const n=t.transform(XI(V),[1,0,0,1,-R,-X]);return V.fillStyle=Z?l.getPattern(g,this,n,iI.FILL):l,V.fillRect(0,0,C,A),d&&!Z&&(this.cachedCanvases.delete("fillCanvas"),d.set(s,N.canvas)),{canvas:N.canvas,offsetX:Math.round(R),offsetY:Math.round(X)}}setLineWidth(I){I!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=I,this.ctx.lineWidth=I}setLineCap(I){this.ctx.lineCap=Hl[I]}setLineJoin(I){this.ctx.lineJoin=Ml[I]}setMiterLimit(I){this.ctx.miterLimit=I}setDash(I,g){const C=this.ctx;C.setLineDash!==void 0&&(C.setLineDash(I),C.lineDashOffset=g)}setRenderingIntent(I){}setFlatness(I){}setGState(I){for(const[g,C]of I)switch(g){case"LW":this.setLineWidth(C);break;case"LC":this.setLineCap(C);break;case"LJ":this.setLineJoin(C);break;case"ML":this.setMiterLimit(C);break;case"D":this.setDash(C[0],C[1]);break;case"RI":this.setRenderingIntent(C);break;case"FL":this.setFlatness(C);break;case"Font":this.setFont(C[0],C[1]);break;case"CA":this.current.strokeAlpha=C;break;case"ca":this.ctx.globalAlpha=this.current.fillAlpha=C;break;case"BM":this.ctx.globalCompositeOperation=C;break;case"SMask":this.current.activeSMask=C?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(C);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const I=this.inSMaskMode;this.current.activeSMask&&!I?this.beginSMaskMode():!this.current.activeSMask&&I&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const I=this.ctx.canvas.width,g=this.ctx.canvas.height,C="smaskGroupAt"+this.groupLevel,A=this.cachedCanvases.getCanvas(C,I,g);this.suspendedCtx=this.ctx;const l=this.ctx=A.context;l.setTransform(this.suspendedCtx.getTransform()),Wg(this.suspendedCtx,l),nl(l,this.suspendedCtx),this.setGState([["BM","source-over"]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),Wg(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(I){if(!this.current.activeSMask)return;I?(I[0]=Math.floor(I[0]),I[1]=Math.floor(I[1]),I[2]=Math.ceil(I[2]),I[3]=Math.ceil(I[3])):I=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const g=this.current.activeSMask,C=this.suspendedCtx;this.composeSMask(C,g,this.ctx,I),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}composeSMask(I,g,C,A){const l=A[0],Z=A[1],i=A[2]-l,d=A[3]-Z;i===0||d===0||(this.genericComposeSMask(g.context,C,i,d,g.subtype,g.backdrop,g.transferMap,l,Z,g.offsetX,g.offsetY),I.save(),I.globalAlpha=1,I.globalCompositeOperation="source-over",I.setTransform(1,0,0,1,0,0),I.drawImage(C.canvas,0,0),I.restore())}genericComposeSMask(I,g,C,A,l,Z,i,d,s,G,b){let m=I.canvas,B=d-G,o=s-b;if(Z)if(B<0||o<0||B+C>m.width||o+A>m.height){const Y=this.cachedCanvases.getCanvas("maskExtension",C,A),w=Y.context;w.drawImage(m,-B,-o),w.globalCompositeOperation="destination-atop",w.fillStyle=Z,w.fillRect(0,0,C,A),w.globalCompositeOperation="source-over",m=Y.canvas,B=o=0}else{I.save(),I.globalAlpha=1,I.setTransform(1,0,0,1,0,0);const Y=new Path2D;Y.rect(B,o,C,A),I.clip(Y),I.globalCompositeOperation="destination-atop",I.fillStyle=Z,I.fillRect(B,o,C,A),I.restore()}g.save(),g.globalAlpha=1,g.setTransform(1,0,0,1,0,0),l==="Alpha"&&i?g.filter=this.filterFactory.addAlphaFilter(i):l==="Luminosity"&&(g.filter=this.filterFactory.addLuminosityFilter(i));const W=new Path2D;W.rect(d,s,C,A),g.clip(W),g.globalCompositeOperation="destination-in",g.drawImage(m,B,o,C,A,d,s,C,A),g.restore()}save(){this.inSMaskMode&&Wg(this.ctx,this.suspendedCtx),this.ctx.save();const I=this.current;this.stateStack.push(I),this.current=I.clone()}restore(){if(this.stateStack.length===0){this.inSMaskMode&&this.endSMaskMode();return}this.current=this.stateStack.pop(),this.ctx.restore(),this.inSMaskMode&&Wg(this.suspendedCtx,this.ctx),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}transform(I,g,C,A,l,Z){this.ctx.transform(I,g,C,A,l,Z),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(I,g,C){let[A]=g;if(!C){A||=g[0]=new Path2D,this[I](A);return}if(!(A instanceof Path2D)){const l=g[0]=new Path2D;for(let Z=0,i=A.length;Z<i;)switch(A[Z++]){case ug.moveTo:l.moveTo(A[Z++],A[Z++]);break;case ug.lineTo:l.lineTo(A[Z++],A[Z++]);break;case ug.curveTo:l.bezierCurveTo(A[Z++],A[Z++],A[Z++],A[Z++],A[Z++],A[Z++]);break;case ug.closePath:l.closePath();break;default:F(`Unrecognized drawing path operator: ${A[Z-1]}`);break}A=l}t.axialAlignedBoundingBox(C,v(this.ctx),this.current.minMax),this[I](A)}closePath(){this.ctx.closePath()}stroke(I,g=!0){const C=this.ctx,A=this.current.strokeColor;if(C.globalAlpha=this.current.strokeAlpha,this.contentVisible)if(typeof A=="object"&&A?.getPattern){const l=A.isModifyingCurrentTransform()?C.getTransform():null;if(C.save(),C.strokeStyle=A.getPattern(C,this,XI(C),iI.STROKE),l){const Z=new Path2D;Z.addPath(I,C.getTransform().invertSelf().multiplySelf(l)),I=Z}this.rescaleAndStroke(I,!1),C.restore()}else this.rescaleAndStroke(I,!0);g&&this.consumePath(I,this.current.getClippedPathBoundingBox(iI.STROKE,v(this.ctx))),C.globalAlpha=this.current.fillAlpha}closeStroke(I){this.stroke(I)}fill(I,g=!0){const C=this.ctx,A=this.current.fillColor,l=this.current.patternFill;let Z=!1;if(l){const d=A.isModifyingCurrentTransform()?C.getTransform():null;if(C.save(),C.fillStyle=A.getPattern(C,this,XI(C),iI.FILL),d){const s=new Path2D;s.addPath(I,C.getTransform().invertSelf().multiplySelf(d)),I=s}Z=!0}const i=this.current.getClippedPathBoundingBox();this.contentVisible&&i!==null&&(this.pendingEOFill?(C.fill(I,"evenodd"),this.pendingEOFill=!1):C.fill(I)),Z&&C.restore(),g&&this.consumePath(I,i)}eoFill(I){this.pendingEOFill=!0,this.fill(I)}fillStroke(I){this.fill(I,!1),this.stroke(I,!1),this.consumePath(I)}eoFillStroke(I){this.pendingEOFill=!0,this.fillStroke(I)}closeFillStroke(I){this.fillStroke(I)}closeEOFillStroke(I){this.pendingEOFill=!0,this.fillStroke(I)}endPath(I){this.consumePath(I)}rawFillPath(I){this.ctx.fill(I)}clip(){this.pendingClip=ul}eoClip(){this.pendingClip=dA}beginText(){this.current.textMatrix=null,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const I=this.pendingTextPaths,g=this.ctx;if(I===void 0)return;const C=new Path2D,A=g.getTransform().invertSelf();for(const{transform:l,x:Z,y:i,fontSize:d,path:s}of I)s&&C.addPath(s,new DOMMatrix(l).preMultiplySelf(A).translate(Z,i).scale(d,-d));g.clip(C),delete this.pendingTextPaths}setCharSpacing(I){this.current.charSpacing=I}setWordSpacing(I){this.current.wordSpacing=I}setHScale(I){this.current.textHScale=I/100}setLeading(I){this.current.leading=-I}setFont(I,g){const C=this.commonObjs.get(I),A=this.current;if(!C)throw new Error(`Can't find font for ${I}`);if(A.fontMatrix=C.fontMatrix||ig,(A.fontMatrix[0]===0||A.fontMatrix[3]===0)&&F("Invalid font matrix for font "+I),g<0?(g=-g,A.fontDirection=-1):A.fontDirection=1,this.current.font=C,this.current.fontSize=g,C.isType3Font)return;const l=C.loadedName||"sans-serif",Z=C.systemFontInfo?.css||`"${l}", ${C.fallbackName}`;let i="normal";C.black?i="900":C.bold&&(i="bold");const d=C.italic?"italic":"normal";let s=g;g<IA?s=IA:g>gA&&(s=gA),this.current.fontSizeScale=g/s,this.ctx.font=`${d} ${i} ${s}px ${Z}`}setTextRenderingMode(I){this.current.textRenderingMode=I}setTextRise(I){this.current.textRise=I}moveText(I,g){this.current.x=this.current.lineX+=I,this.current.y=this.current.lineY+=g}setLeadingMoveText(I,g){this.setLeading(-g),this.moveText(I,g)}setTextMatrix(I){const{current:g}=this;g.textMatrix=I,g.textMatrixScale=Math.hypot(I[0],I[1]),g.x=g.lineX=0,g.y=g.lineY=0}nextLine(){this.moveText(0,this.current.leading)}#C(I,g,C){const A=new Path2D;return A.addPath(I,new DOMMatrix(C).invertSelf().multiplySelf(g)),A}paintChar(I,g,C,A,l){const Z=this.ctx,i=this.current,d=i.font,s=i.textRenderingMode,G=i.fontSize/i.fontSizeScale,b=s&sI.FILL_STROKE_MASK,m=!!(s&sI.ADD_TO_PATH_FLAG),B=i.patternFill&&!d.missingFile,o=i.patternStroke&&!d.missingFile;let W;if((d.disableFontFace||m||B||o)&&!d.missingFile&&(W=d.getPathGenerator(this.commonObjs,I)),W&&(d.disableFontFace||B||o)){Z.save(),Z.translate(g,C),Z.scale(G,-G);let Y;if((b===sI.FILL||b===sI.FILL_STROKE)&&(A?(Y=Z.getTransform(),Z.setTransform(...A),Z.fill(this.#C(W,Y,A))):Z.fill(W)),b===sI.STROKE||b===sI.FILL_STROKE)if(l){Y||=Z.getTransform(),Z.setTransform(...l);const{a:w,b:a,c:h,d:N}=Y,V=t.inverseTransform(l),R=t.transform([w,a,h,N,0,0],V);t.singularValueDecompose2dScale(R,YI),Z.lineWidth*=Math.max(YI[0],YI[1])/G,Z.stroke(this.#C(W,Y,l))}else Z.lineWidth/=G,Z.stroke(W);Z.restore()}else(b===sI.FILL||b===sI.FILL_STROKE)&&Z.fillText(I,g,C),(b===sI.STROKE||b===sI.FILL_STROKE)&&Z.strokeText(I,g,C);m&&(this.pendingTextPaths||=[]).push({transform:v(Z),x:g,y:C,fontSize:G,path:W})}get isFontSubpixelAAEnabled(){const{context:I}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);I.scale(1.5,1),I.fillText("I",0,10);const g=I.getImageData(0,0,10,10).data;let C=!1;for(let A=3;A<g.length;A+=4)if(g[A]>0&&g[A]<255){C=!0;break}return J(this,"isFontSubpixelAAEnabled",C)}showText(I){const g=this.current,C=g.font;if(C.isType3Font)return this.showType3Text(I);const A=g.fontSize;if(A===0)return;const l=this.ctx,Z=g.fontSizeScale,i=g.charSpacing,d=g.wordSpacing,s=g.fontDirection,G=g.textHScale*s,b=I.length,m=C.vertical,B=m?1:-1,o=C.defaultVMetrics,W=A*g.fontMatrix[0],Y=g.textRenderingMode===sI.FILL&&!C.disableFontFace&&!g.patternFill;l.save(),g.textMatrix&&l.transform(...g.textMatrix),l.translate(g.x,g.y+g.textRise),s>0?l.scale(G,-1):l.scale(G,1);let w,a;if(g.patternFill){l.save();const X=g.fillColor.getPattern(l,this,XI(l),iI.FILL);w=v(l),l.restore(),l.fillStyle=X}if(g.patternStroke){l.save();const X=g.strokeColor.getPattern(l,this,XI(l),iI.STROKE);a=v(l),l.restore(),l.strokeStyle=X}let h=g.lineWidth;const N=g.textMatrixScale;if(N===0||h===0){const X=g.textRenderingMode&sI.FILL_STROKE_MASK;(X===sI.STROKE||X===sI.FILL_STROKE)&&(h=this.getSinglePixelWidth())}else h/=N;if(Z!==1&&(l.scale(Z,Z),h/=Z),l.lineWidth=h,C.isInvalidPDFjsFont){const X=[];let n=0;for(const y of I)X.push(y.unicode),n+=y.width;l.fillText(X.join(""),0,0),g.x+=n*W*G,l.restore(),this.compose();return}let V=0,R;for(R=0;R<b;++R){const X=I[R];if(typeof X=="number"){V+=B*X*A/1e3;continue}let n=!1;const y=(X.isSpace?d:0)+i,K=X.fontChar,e=X.accent;let T,O,L=X.width;if(m){const M=X.vmetric||o,u=-(X.vmetric?M[1]:L*.5)*W,NI=M[2]*W;L=M?-M[0]:L,T=u/Z,O=(V+NI)/Z}else T=V/Z,O=0;if(C.remeasure&&L>0){const M=l.measureText(K).width*1e3/A*Z;if(L<M&&this.isFontSubpixelAAEnabled){const u=L/M;n=!0,l.save(),l.scale(u,1),T/=u}else L!==M&&(T+=(L-M)/2e3*A/Z)}if(this.contentVisible&&(X.isInFont||C.missingFile)){if(Y&&!e)l.fillText(K,T,O);else if(this.paintChar(K,T,O,w,a),e){const M=T+A*e.offset.x/Z,u=O-A*e.offset.y/Z;this.paintChar(e.fontChar,M,u,w,a)}}const mI=m?L*W-y*s:L*W+y*s;V+=mI,n&&l.restore()}m?g.y-=V:g.x+=V*G,l.restore(),this.compose()}showType3Text(I){const g=this.ctx,C=this.current,A=C.font,l=C.fontSize,Z=C.fontDirection,i=A.vertical?1:-1,d=C.charSpacing,s=C.wordSpacing,G=C.textHScale*Z,b=C.fontMatrix||ig,m=I.length,B=C.textRenderingMode===sI.INVISIBLE;let o,W,Y,w;if(!(B||l===0)){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,g.save(),C.textMatrix&&g.transform(...C.textMatrix),g.translate(C.x,C.y+C.textRise),g.scale(G,Z),o=0;o<m;++o){if(W=I[o],typeof W=="number"){w=i*W*l/1e3,this.ctx.translate(w,0),C.x+=w*G;continue}const a=(W.isSpace?s:0)+d,h=A.charProcOperatorList[W.operatorListId];h?this.contentVisible&&(this.save(),g.scale(l,l),g.transform(...b),this.executeOperatorList(h),this.restore()):F(`Type3 character "${W.operatorListId}" is not available.`);const N=[W.width,0];t.applyTransform(N,b),Y=N[0]*l+a,g.translate(Y,0),C.x+=Y*G}g.restore()}}setCharWidth(I,g){}setCharWidthAndBounds(I,g,C,A,l,Z){const i=new Path2D;i.rect(C,A,l-C,Z-A),this.ctx.clip(i),this.endPath()}getColorN_Pattern(I){let g;if(I[0]==="TilingPattern"){const C=this.baseTransform||v(this.ctx),A={createCanvasGraphics:l=>new $I(l,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};g=new BC(I,this.ctx,A,C)}else g=this._getPattern(I[1],I[2]);return g}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments),this.current.patternStroke=!0}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(I){this.ctx.strokeStyle=this.current.strokeColor=I,this.current.patternStroke=!1}setStrokeTransparent(){this.ctx.strokeStyle=this.current.strokeColor="transparent",this.current.patternStroke=!1}setFillRGBColor(I){this.ctx.fillStyle=this.current.fillColor=I,this.current.patternFill=!1}setFillTransparent(){this.ctx.fillStyle=this.current.fillColor="transparent",this.current.patternFill=!1}_getPattern(I,g=null){let C;return this.cachedPatterns.has(I)?C=this.cachedPatterns.get(I):(C=Nl(this.getObject(I)),this.cachedPatterns.set(I,C)),g&&(C.matrix=g),C}shadingFill(I){if(!this.contentVisible)return;const g=this.ctx;this.save();const C=this._getPattern(I);g.fillStyle=C.getPattern(g,this,XI(g),iI.SHADING);const A=XI(g);if(A){const{width:l,height:Z}=g.canvas,i=qI.slice();t.axialAlignedBoundingBox([0,0,l,Z],A,i);const[d,s,G,b]=i;this.ctx.fillRect(d,s,G-d,b-s)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){j("Should not call beginInlineImage")}beginImageData(){j("Should not call beginImageData")}paintFormXObjectBegin(I,g){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),I&&this.transform(...I),this.baseTransform=v(this.ctx),g)){t.axialAlignedBoundingBox(g,this.baseTransform,this.current.minMax);const[C,A,l,Z]=g,i=new Path2D;i.rect(C,A,l-C,Z-A),this.ctx.clip(i),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(I){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const g=this.ctx;I.isolated||eg("TODO: Support non-isolated groups."),I.knockout&&F("Knockout groups not supported.");const C=v(g);if(I.matrix&&g.transform(...I.matrix),!I.bbox)throw new Error("Bounding box is required.");let A=qI.slice();t.axialAlignedBoundingBox(I.bbox,v(g),A);const l=[0,0,g.canvas.width,g.canvas.height];A=t.intersect(A,l)||[0,0,0,0];const Z=Math.floor(A[0]),i=Math.floor(A[1]),d=Math.max(Math.ceil(A[2])-Z,1),s=Math.max(Math.ceil(A[3])-i,1);this.current.startNewPathAndClipBox([0,0,d,s]);let G="groupAt"+this.groupLevel;I.smask&&(G+="_smask_"+this.smaskCounter++%2);const b=this.cachedCanvases.getCanvas(G,d,s),m=b.context;m.translate(-Z,-i),m.transform(...C);let B=new Path2D;const[o,W,Y,w]=I.bbox;if(B.rect(o,W,Y-o,w-W),I.matrix){const a=new Path2D;a.addPath(B,new DOMMatrix(I.matrix)),B=a}m.clip(B),I.smask?this.smaskStack.push({canvas:b.canvas,context:m,offsetX:Z,offsetY:i,subtype:I.smask.subtype,backdrop:I.smask.backdrop,transferMap:I.smask.transferMap||null,startTransformInverse:null}):(g.setTransform(1,0,0,1,0,0),g.translate(Z,i),g.save()),Wg(g,m),this.ctx=m,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(g),this.groupLevel++}endGroup(I){if(!this.contentVisible)return;this.groupLevel--;const g=this.ctx,C=this.groupStack.pop();if(this.ctx=C,this.ctx.imageSmoothingEnabled=!1,I.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const A=v(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...A);const l=qI.slice();t.axialAlignedBoundingBox([0,0,g.canvas.width,g.canvas.height],A,l),this.ctx.drawImage(g.canvas,0,0),this.ctx.restore(),this.compose(l)}}beginAnnotation(I,g,C,A,l){if(this.#I(),Lg(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),g){const Z=g[2]-g[0],i=g[3]-g[1];if(l&&this.annotationCanvasMap){C=C.slice(),C[4]-=g[0],C[5]-=g[1],g=g.slice(),g[0]=g[1]=0,g[2]=Z,g[3]=i,t.singularValueDecompose2dScale(v(this.ctx),YI);const{viewportScale:d}=this,s=Math.ceil(Z*this.outputScaleX*d),G=Math.ceil(i*this.outputScaleY*d);this.annotationCanvas=this.canvasFactory.create(s,G);const{canvas:b,context:m}=this.annotationCanvas;this.annotationCanvasMap.set(I,b),this.annotationCanvas.savedCtx=this.ctx,this.ctx=m,this.ctx.save(),this.ctx.setTransform(YI[0],0,0,-YI[1],0,i*YI[1]),Lg(this.ctx)}else{Lg(this.ctx),this.endPath();const d=new Path2D;d.rect(g[0],g[1],Z,i),this.ctx.clip(d)}}this.current=new AA(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...C),this.transform(...A)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),this.#g(),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(I){if(!this.contentVisible)return;const g=I.count;I=this.getObject(I.data,I),I.count=g;const C=this.ctx,A=this._createMaskCanvas(I),l=A.canvas;C.save(),C.setTransform(1,0,0,1,0,0),C.drawImage(l,A.offsetX,A.offsetY),C.restore(),this.compose()}paintImageMaskXObjectRepeat(I,g,C=0,A=0,l,Z){if(!this.contentVisible)return;I=this.getObject(I.data,I);const i=this.ctx;i.save();const d=v(i);i.transform(g,C,A,l,0,0);const s=this._createMaskCanvas(I);i.setTransform(1,0,0,1,s.offsetX-d[4],s.offsetY-d[5]);for(let G=0,b=Z.length;G<b;G+=2){const m=t.transform(d,[g,C,A,l,Z[G],Z[G+1]]);i.drawImage(s.canvas,m[4],m[5])}i.restore(),this.compose()}paintImageMaskXObjectGroup(I){if(!this.contentVisible)return;const g=this.ctx,C=this.current.fillColor,A=this.current.patternFill;for(const l of I){const{data:Z,width:i,height:d,transform:s}=l,G=this.cachedCanvases.getCanvas("maskCanvas",i,d),b=G.context;b.save();const m=this.getObject(Z,l);ZA(b,m),b.globalCompositeOperation="source-in",b.fillStyle=A?C.getPattern(b,this,XI(g),iI.FILL):C,b.fillRect(0,0,i,d),b.restore(),g.save(),g.transform(...s),g.scale(1,-1),kg(g,G.canvas,0,0,i,d,0,-1,1,1),g.restore()}this.compose()}paintImageXObject(I){if(!this.contentVisible)return;const g=this.getObject(I);if(!g){F("Dependent image isn't ready yet");return}this.paintInlineImageXObject(g)}paintImageXObjectRepeat(I,g,C,A){if(!this.contentVisible)return;const l=this.getObject(I);if(!l){F("Dependent image isn't ready yet");return}const Z=l.width,i=l.height,d=[];for(let s=0,G=A.length;s<G;s+=2)d.push({transform:[g,0,0,C,A[s],A[s+1]],x:0,y:0,w:Z,h:i});this.paintInlineImageXObjectGroup(l,d)}applyTransferMapsToCanvas(I){return this.current.transferMaps!=="none"&&(I.filter=this.current.transferMaps,I.drawImage(I.canvas,0,0),I.filter="none"),I.canvas}applyTransferMapsToBitmap(I){if(this.current.transferMaps==="none")return I.bitmap;const{bitmap:g,width:C,height:A}=I,l=this.cachedCanvases.getCanvas("inlineImage",C,A),Z=l.context;return Z.filter=this.current.transferMaps,Z.drawImage(g,0,0),Z.filter="none",l.canvas}paintInlineImageXObject(I){if(!this.contentVisible)return;const g=I.width,C=I.height,A=this.ctx;this.save();const{filter:l}=A;l!=="none"&&l!==""&&(A.filter="none"),A.scale(1/g,-1/C);let Z;if(I.bitmap)Z=this.applyTransferMapsToBitmap(I);else if(typeof HTMLElement=="function"&&I instanceof HTMLElement||!I.data)Z=I;else{const s=this.cachedCanvases.getCanvas("inlineImage",g,C).context;lA(s,I),Z=this.applyTransferMapsToCanvas(s)}const i=this._scaleImage(Z,XI(A));A.imageSmoothingEnabled=iA(v(A),I.interpolate),kg(A,i.img,0,0,i.paintWidth,i.paintHeight,0,-C,g,C),this.compose(),this.restore()}paintInlineImageXObjectGroup(I,g){if(!this.contentVisible)return;const C=this.ctx;let A;if(I.bitmap)A=I.bitmap;else{const l=I.width,Z=I.height,d=this.cachedCanvases.getCanvas("inlineImage",l,Z).context;lA(d,I),A=this.applyTransferMapsToCanvas(d)}for(const l of g)C.save(),C.transform(...l.transform),C.scale(1,-1),kg(C,A,l.x,l.y,l.w,l.h,0,-1,1,1),C.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(I){}markPointProps(I,g){}beginMarkedContent(I){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(I,g){I==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(g)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(I,g){const C=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(g);const A=this.ctx;this.pendingClip&&(C||(this.pendingClip===dA?A.clip(I,"evenodd"):A.clip(I)),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox)}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const I=v(this.ctx);if(I[1]===0&&I[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(I[0]),Math.abs(I[3]));else{const g=Math.abs(I[0]*I[3]-I[2]*I[1]),C=Math.hypot(I[0],I[2]),A=Math.hypot(I[1],I[3]);this._cachedGetSinglePixelWidth=Math.max(C,A)/g}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(this._cachedScaleForStroking[0]===-1){const{lineWidth:I}=this.current,{a:g,b:C,c:A,d:l}=this.ctx.getTransform();let Z,i;if(C===0&&A===0){const d=Math.abs(g),s=Math.abs(l);if(d===s)if(I===0)Z=i=1/d;else{const G=d*I;Z=i=G<1?1/G:1}else if(I===0)Z=1/d,i=1/s;else{const G=d*I,b=s*I;Z=G<1?1/G:1,i=b<1?1/b:1}}else{const d=Math.abs(g*l-C*A),s=Math.hypot(g,C),G=Math.hypot(A,l);if(I===0)Z=G/d,i=s/d;else{const b=I*d;Z=G>b?G/b:1,i=s>b?s/b:1}}this._cachedScaleForStroking[0]=Z,this._cachedScaleForStroking[1]=i}return this._cachedScaleForStroking}rescaleAndStroke(I,g){const{ctx:C,current:{lineWidth:A}}=this,[l,Z]=this.getScaleForStroking();if(l===Z){C.lineWidth=(A||1)*l,C.stroke(I);return}const i=C.getLineDash();g&&C.save(),C.scale(l,Z),WC.a=1/l,WC.d=1/Z;const d=new Path2D;if(d.addPath(I,WC),i.length>0){const s=Math.max(l,Z);C.setLineDash(i.map(G=>G/s)),C.lineDashOffset/=s}C.lineWidth=A||1,C.stroke(d),g&&C.restore()}isContentVisible(){for(let I=this.markedContentStack.length-1;I>=0;I--)if(!this.markedContentStack[I].visible)return!1;return!0}}for(const c in Mg)$I.prototype[c]!==void 0&&($I.prototype[Mg[c]]=$I.prototype[c]);class Ig{static#I=null;static#g="";static get workerPort(){return this.#I}static set workerPort(I){if(!(typeof Worker<"u"&&I instanceof Worker)&&I!==null)throw new Error("Invalid `workerPort` type.");this.#I=I}static get workerSrc(){return this.#g}static set workerSrc(I){if(typeof I!="string")throw new Error("Invalid `workerSrc` type.");this.#g=I}}class tl{#I;#g;constructor({parsedData:I,rawData:g}){this.#I=I,this.#g=g}getRaw(){return this.#g}get(I){return this.#I.get(I)??null}[Symbol.iterator](){return this.#I.entries()}}const gg=Symbol("INTERNAL");class el{#I=!1;#g=!1;#C=!1;#A=!0;constructor(I,{name:g,intent:C,usage:A,rbGroups:l}){this.#I=!!(I&wI.DISPLAY),this.#g=!!(I&wI.PRINT),this.name=g,this.intent=C,this.usage=A,this.rbGroups=l}get visible(){if(this.#C)return this.#A;if(!this.#A)return!1;const{print:I,view:g}=this.usage;return this.#I?g?.viewState!=="OFF":this.#g?I?.printState!=="OFF":!0}_setVisible(I,g,C=!1){I!==gg&&j("Internal method `_setVisible` called."),this.#C=C,this.#A=g}}class Dl{#I=null;#g=new Map;#C=null;#A=null;constructor(I,g=wI.DISPLAY){if(this.renderingIntent=g,this.name=null,this.creator=null,I!==null){this.name=I.name,this.creator=I.creator,this.#A=I.order;for(const C of I.groups)this.#g.set(C.id,new el(g,C));if(I.baseState==="OFF")for(const C of this.#g.values())C._setVisible(gg,!1);for(const C of I.on)this.#g.get(C)._setVisible(gg,!0);for(const C of I.off)this.#g.get(C)._setVisible(gg,!1);this.#C=this.getHash()}}#Z(I){const g=I.length;if(g<2)return!0;const C=I[0];for(let A=1;A<g;A++){const l=I[A];let Z;if(Array.isArray(l))Z=this.#Z(l);else if(this.#g.has(l))Z=this.#g.get(l).visible;else return F(`Optional content group not found: ${l}`),!0;switch(C){case"And":if(!Z)return!1;break;case"Or":if(Z)return!0;break;case"Not":return!Z;default:return!0}}return C==="And"}isVisible(I){if(this.#g.size===0)return!0;if(!I)return eg("Optional content group not defined."),!0;if(I.type==="OCG")return this.#g.has(I.id)?this.#g.get(I.id).visible:(F(`Optional content group not found: ${I.id}`),!0);if(I.type==="OCMD"){if(I.expression)return this.#Z(I.expression);if(!I.policy||I.policy==="AnyOn"){for(const g of I.ids){if(!this.#g.has(g))return F(`Optional content group not found: ${g}`),!0;if(this.#g.get(g).visible)return!0}return!1}else if(I.policy==="AllOn"){for(const g of I.ids){if(!this.#g.has(g))return F(`Optional content group not found: ${g}`),!0;if(!this.#g.get(g).visible)return!1}return!0}else if(I.policy==="AnyOff"){for(const g of I.ids){if(!this.#g.has(g))return F(`Optional content group not found: ${g}`),!0;if(!this.#g.get(g).visible)return!0}return!1}else if(I.policy==="AllOff"){for(const g of I.ids){if(!this.#g.has(g))return F(`Optional content group not found: ${g}`),!0;if(this.#g.get(g).visible)return!1}return!0}return F(`Unknown optional content policy ${I.policy}.`),!0}return F(`Unknown group type ${I.type}.`),!0}setVisibility(I,g=!0,C=!0){const A=this.#g.get(I);if(!A){F(`Optional content group not found: ${I}`);return}if(C&&g&&A.rbGroups.length)for(const l of A.rbGroups)for(const Z of l)Z!==I&&this.#g.get(Z)?._setVisible(gg,!1,!0);A._setVisible(gg,!!g,!0),this.#I=null}setOCGState({state:I,preserveRB:g}){let C;for(const A of I){switch(A){case"ON":case"OFF":case"Toggle":C=A;continue}const l=this.#g.get(A);if(l)switch(C){case"ON":this.setVisibility(A,!0,g);break;case"OFF":this.setVisibility(A,!1,g);break;case"Toggle":this.setVisibility(A,!l.visible,g);break}}this.#I=null}get hasInitialVisibility(){return this.#C===null||this.getHash()===this.#C}getOrder(){return this.#g.size?this.#A?this.#A.slice():[...this.#g.keys()]:null}getGroup(I){return this.#g.get(I)||null}getHash(){if(this.#I!==null)return this.#I;const I=new jC;for(const[g,C]of this.#g)I.update(`${g}:${C.visible}`);return this.#I=I.hexdigest()}[Symbol.iterator](){return this.#g.entries()}}class Kl{constructor(I,{disableRange:g=!1,disableStream:C=!1}){$(I,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');const{length:A,initialData:l,progressiveDone:Z,contentDispositionFilename:i}=I;if(this._queuedChunks=[],this._progressiveDone=Z,this._contentDispositionFilename=i,l?.length>0){const d=l instanceof Uint8Array&&l.byteLength===l.buffer.byteLength?l.buffer:new Uint8Array(l).buffer;this._queuedChunks.push(d)}this._pdfDataRangeTransport=I,this._isStreamingSupported=!C,this._isRangeSupported=!g,this._contentLength=A,this._fullRequestReader=null,this._rangeReaders=[],I.addRangeListener((d,s)=>{this._onReceiveData({begin:d,chunk:s})}),I.addProgressListener((d,s)=>{this._onProgress({loaded:d,total:s})}),I.addProgressiveReadListener(d=>{this._onReceiveData({chunk:d})}),I.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),I.transportReady()}_onReceiveData({begin:I,chunk:g}){const C=g instanceof Uint8Array&&g.byteLength===g.buffer.byteLength?g.buffer:new Uint8Array(g).buffer;if(I===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(C):this._queuedChunks.push(C);else{const A=this._rangeReaders.some(function(l){return l._begin!==I?!1:(l._enqueue(C),!0)});$(A,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}_onProgress(I){I.total===void 0?this._rangeReaders[0]?.onProgress?.({loaded:I.loaded}):this._fullRequestReader?.onProgress?.({loaded:I.loaded,total:I.total})}_onProgressiveDone(){this._fullRequestReader?.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(I){const g=this._rangeReaders.indexOf(I);g>=0&&this._rangeReaders.splice(g,1)}getFullReader(){$(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const I=this._queuedChunks;return this._queuedChunks=null,new Sl(this,I,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=new pl(this,I,g);return this._pdfDataRangeTransport.requestDataRange(I,g),this._rangeReaders.push(C),C}cancelAllRequests(I){this._fullRequestReader?.cancel(I);for(const g of this._rangeReaders.slice(0))g.cancel(I);this._pdfDataRangeTransport.abort()}}class Sl{constructor(I,g,C=!1,A=null){this._stream=I,this._done=C||!1,this._filename=gC(A)?A:null,this._queuedChunks=g||[],this._loaded=0;for(const l of this._queuedChunks)this._loaded+=l.byteLength;this._requests=[],this._headersReady=Promise.resolve(),I._fullRequestReader=this,this.onProgress=null}_enqueue(I){this._done||(this._requests.length>0?this._requests.shift().resolve({value:I,done:!1}):this._queuedChunks.push(I),this._loaded+=I.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class pl{constructor(I,g,C){this._stream=I,this._begin=g,this._end=C,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(I){if(!this._done){if(this._requests.length===0)this._queuedChunk=I;else{this._requests.shift().resolve({value:I,done:!1});for(const C of this._requests)C.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const g=this._queuedChunk;return this._queuedChunk=null,{value:g,done:!1}}if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}function Fl(c){let I=!0,g=C("filename\\*","i").exec(c);if(g){g=g[1];let G=i(g);return G=unescape(G),G=d(G),G=s(G),l(G)}if(g=Z(c),g){const G=s(g);return l(G)}if(g=C("filename","i").exec(c),g){g=g[1];let G=i(g);return G=s(G),l(G)}function C(G,b){return new RegExp("(?:^|;)\\s*"+G+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',b)}function A(G,b){if(G){if(!/^[\x00-\xFF]+$/.test(b))return b;try{const m=new TextDecoder(G,{fatal:!0}),B=dg(b);b=m.decode(B),I=!1}catch{}}return b}function l(G){return I&&/[\x80-\xff]/.test(G)&&(G=A("utf-8",G),I&&(G=A("iso-8859-1",G))),G}function Z(G){const b=[];let m;const B=C("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(m=B.exec(G))!==null;){let[,W,Y,w]=m;if(W=parseInt(W,10),W in b){if(W===0)break;continue}b[W]=[Y,w]}const o=[];for(let W=0;W<b.length&&W in b;++W){let[Y,w]=b[W];w=i(w),Y&&(w=unescape(w),W===0&&(w=d(w))),o.push(w)}return o.join("")}function i(G){if(G.startsWith('"')){const b=G.slice(1).split('\\"');for(let m=0;m<b.length;++m){const B=b[m].indexOf('"');B!==-1&&(b[m]=b[m].slice(0,B),b.length=m+1),b[m]=b[m].replaceAll(/\\(.)/g,"$1")}G=b.join('"')}return G}function d(G){const b=G.indexOf("'");if(b===-1)return G;const m=G.slice(0,b),o=G.slice(b+1).replace(/^[^']*'/,"");return A(m,o)}function s(G){return!G.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(G)?G:G.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(b,m,B,o){if(B==="q"||B==="Q")return o=o.replaceAll("_"," "),o=o.replaceAll(/=([0-9a-fA-F]{2})/g,function(W,Y){return String.fromCharCode(parseInt(Y,16))}),A(m,o);try{o=atob(o)}catch{}return A(m,o)})}return""}function sA(c,I){const g=new Headers;if(!c||!I||typeof I!="object")return g;for(const C in I){const A=I[C];A!==void 0&&g.append(C,A)}return g}function Tg(c){return URL.parse(c)?.origin??null}function GA({responseHeaders:c,isHttp:I,rangeChunkSize:g,disableRange:C}){const A={allowRangeRequests:!1,suggestedLength:void 0},l=parseInt(c.get("Content-Length"),10);return!Number.isInteger(l)||(A.suggestedLength=l,l<=2*g)||C||!I||c.get("Accept-Ranges")!=="bytes"||(c.get("Content-Encoding")||"identity")!=="identity"||(A.allowRangeRequests=!0),A}function cA(c){const I=c.get("Content-Disposition");if(I){let g=Fl(I);if(g.includes("%"))try{g=decodeURIComponent(g)}catch{}if(gC(g))return g}return null}function og(c,I){return new Dg(`Unexpected server response (${c}) while retrieving PDF "${I}".`,c,c===404||c===0&&I.startsWith("file:"))}function bA(c){return c===200||c===206}function mA(c,I,g){return{method:"GET",headers:c,signal:g.signal,mode:"cors",credentials:I?"include":"same-origin",redirect:"follow"}}function BA(c){return c instanceof Uint8Array?c.buffer:c instanceof ArrayBuffer?c:(F(`getArrayBuffer - unexpected data format: ${c}`),new Uint8Array(c).buffer)}class zl{_responseOrigin=null;constructor(I){this.source=I,this.isHttp=/^https?:/i.test(I.url),this.headers=sA(this.isHttp,I.httpHeaders),this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}getFullReader(){return $(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new Jl(this),this._fullRequestReader}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=new kl(this,I,g);return this._rangeRequestReaders.push(C),C}cancelAllRequests(I){this._fullRequestReader?.cancel(I);for(const g of this._rangeRequestReaders.slice(0))g.cancel(I)}}class Jl{constructor(I){this._stream=I,this._reader=null,this._loaded=0,this._filename=null;const g=I.source;this._withCredentials=g.withCredentials||!1,this._contentLength=g.length,this._headersCapability=Promise.withResolvers(),this._disableRange=g.disableRange||!1,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!g.disableStream,this._isRangeSupported=!g.disableRange;const C=new Headers(I.headers),A=g.url;fetch(A,mA(C,this._withCredentials,this._abortController)).then(l=>{if(I._responseOrigin=Tg(l.url),!bA(l.status))throw og(l.status,A);this._reader=l.body.getReader(),this._headersCapability.resolve();const Z=l.headers,{allowRangeRequests:i,suggestedLength:d}=GA({responseHeaders:Z,isHttp:I.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=i,this._contentLength=d||this._contentLength,this._filename=cA(Z),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new zI("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._headersCapability.promise;const{value:I,done:g}=await this._reader.read();return g?{value:I,done:g}:(this._loaded+=I.byteLength,this.onProgress?.({loaded:this._loaded,total:this._contentLength}),{value:BA(I),done:!1})}cancel(I){this._reader?.cancel(I),this._abortController.abort()}}class kl{constructor(I,g,C){this._stream=I,this._reader=null,this._loaded=0;const A=I.source;this._withCredentials=A.withCredentials||!1,this._readCapability=Promise.withResolvers(),this._isStreamingSupported=!A.disableStream,this._abortController=new AbortController;const l=new Headers(I.headers);l.append("Range",`bytes=${g}-${C-1}`);const Z=A.url;fetch(Z,mA(l,this._withCredentials,this._abortController)).then(i=>{const d=Tg(i.url);if(d!==I._responseOrigin)throw new Error(`Expected range response-origin "${d}" to match "${I._responseOrigin}".`);if(!bA(i.status))throw og(i.status,Z);this._readCapability.resolve(),this._reader=i.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){await this._readCapability.promise;const{value:I,done:g}=await this._reader.read();return g?{value:I,done:g}:(this._loaded+=I.byteLength,this.onProgress?.({loaded:this._loaded}),{value:BA(I),done:!1})}cancel(I){this._reader?.cancel(I),this._abortController.abort()}}const oC=200,wC=206;function Ll(c){const I=c.response;return typeof I!="string"?I:dg(I).buffer}class Tl{_responseOrigin=null;constructor({url:I,httpHeaders:g,withCredentials:C}){this.url=I,this.isHttp=/^https?:/i.test(I),this.headers=sA(this.isHttp,g),this.withCredentials=C||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}request(I){const g=new XMLHttpRequest,C=this.currXhrId++,A=this.pendingRequests[C]={xhr:g};g.open("GET",this.url),g.withCredentials=this.withCredentials;for(const[l,Z]of this.headers)g.setRequestHeader(l,Z);return this.isHttp&&"begin"in I&&"end"in I?(g.setRequestHeader("Range",`bytes=${I.begin}-${I.end-1}`),A.expectedStatus=wC):A.expectedStatus=oC,g.responseType="arraybuffer",$(I.onError,"Expected `onError` callback to be provided."),g.onerror=()=>{I.onError(g.status)},g.onreadystatechange=this.onStateChange.bind(this,C),g.onprogress=this.onProgress.bind(this,C),A.onHeadersReceived=I.onHeadersReceived,A.onDone=I.onDone,A.onError=I.onError,A.onProgress=I.onProgress,g.send(null),C}onProgress(I,g){const C=this.pendingRequests[I];C&&C.onProgress?.(g)}onStateChange(I,g){const C=this.pendingRequests[I];if(!C)return;const A=C.xhr;if(A.readyState>=2&&C.onHeadersReceived&&(C.onHeadersReceived(),delete C.onHeadersReceived),A.readyState!==4||!(I in this.pendingRequests))return;if(delete this.pendingRequests[I],A.status===0&&this.isHttp){C.onError(A.status);return}const l=A.status||oC;if(!(l===oC&&C.expectedStatus===wC)&&l!==C.expectedStatus){C.onError(A.status);return}const i=Ll(A);if(l===wC){const d=A.getResponseHeader("Content-Range"),s=/bytes (\d+)-(\d+)\/(\d+)/.exec(d);s?C.onDone({begin:parseInt(s[1],10),chunk:i}):(F('Missing or invalid "Content-Range" header.'),C.onError(0))}else i?C.onDone({begin:0,chunk:i}):C.onError(A.status)}getRequestXhr(I){return this.pendingRequests[I].xhr}isPendingRequest(I){return I in this.pendingRequests}abortRequest(I){const g=this.pendingRequests[I].xhr;delete this.pendingRequests[I],g.abort()}}class Ql{constructor(I){this._source=I,this._manager=new Tl(I),this._rangeChunkSize=I.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(I){const g=this._rangeRequestReaders.indexOf(I);g>=0&&this._rangeRequestReaders.splice(g,1)}getFullReader(){return $(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new jl(this._manager,this._source),this._fullRequestReader}getRangeReader(I,g){const C=new Ol(this._manager,I,g);return C.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(C),C}cancelAllRequests(I){this._fullRequestReader?.cancel(I);for(const g of this._rangeRequestReaders.slice(0))g.cancel(I)}}class jl{constructor(I,g){this._manager=I,this._url=g.url,this._fullRequestId=I.request({onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)}),this._headersCapability=Promise.withResolvers(),this._disableRange=g.disableRange||!1,this._contentLength=g.length,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const I=this._fullRequestId,g=this._manager.getRequestXhr(I);this._manager._responseOrigin=Tg(g.responseURL);const C=g.getAllResponseHeaders(),A=new Headers(C?C.trimStart().replace(/[^\S ]+$/,"").split(/[\r\n]+/).map(i=>{const[d,...s]=i.split(": ");return[d,s.join(": ")]}):[]),{allowRangeRequests:l,suggestedLength:Z}=GA({responseHeaders:A,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});l&&(this._isRangeSupported=!0),this._contentLength=Z||this._contentLength,this._filename=cA(A),this._isRangeSupported&&this._manager.abortRequest(I),this._headersCapability.resolve()}_onDone(I){if(I&&(this._requests.length>0?this._requests.shift().resolve({value:I.chunk,done:!1}):this._cachedChunks.push(I.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(I){this._storedError=og(I,this._url),this._headersCapability.reject(this._storedError);for(const g of this._requests)g.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(I){this.onProgress?.({loaded:I.loaded,total:I.lengthComputable?I.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersCapability.promise}async read(){if(await this._headersCapability.promise,this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0,this._headersCapability.reject(I);for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class Ol{constructor(I,g,C){this._manager=I,this._url=I.url,this._requestId=I.request({begin:g,end:C,onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)}),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_onHeadersReceived(){const I=Tg(this._manager.getRequestXhr(this._requestId)?.responseURL);I!==this._manager._responseOrigin&&(this._storedError=new Error(`Expected range response-origin "${I}" to match "${this._manager._responseOrigin}".`),this._onError(0))}_close(){this.onClosed?.(this)}_onDone(I){const g=I.chunk;this._requests.length>0?this._requests.shift().resolve({value:g,done:!1}):this._queuedChunk=g,this._done=!0;for(const C of this._requests)C.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(I){this._storedError??=og(I,this._url);for(const g of this._requests)g.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(I){this.isStreamingSupported||this.onProgress?.({loaded:I.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const g=this._queuedChunk;return this._queuedChunk=null,{value:g,done:!1}}if(this._done)return{value:void 0,done:!0};const I=Promise.withResolvers();return this._requests.push(I),I.promise}cancel(I){this._done=!0;for(const g of this._requests)g.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}const Ul=/^[a-z][a-z0-9\-+.]+:/i;function xl(c){if(Ul.test(c))return new URL(c);const I=process.getBuiltinModule("url");return new URL(I.pathToFileURL(c))}class vl{constructor(I){this.source=I,this.url=xl(I.url),$(this.url.protocol==="file:","PDFNodeStream only supports file:// URLs."),this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){return this._fullRequestReader?._loaded??0}getFullReader(){return $(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=new rl(this),this._fullRequestReader}getRangeReader(I,g){if(g<=this._progressiveDataLength)return null;const C=new El(this,I,g);return this._rangeRequestReaders.push(C),C}cancelAllRequests(I){this._fullRequestReader?.cancel(I);for(const g of this._rangeRequestReaders.slice(0))g.cancel(I)}}class rl{constructor(I){this._url=I.url,this._done=!1,this._storedError=null,this.onProgress=null;const g=I.source;this._contentLength=g.length,this._loaded=0,this._filename=null,this._disableRange=g.disableRange||!1,this._rangeChunkSize=g.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!g.disableStream,this._isRangeSupported=!g.disableRange,this._readableStream=null,this._readCapability=Promise.withResolvers(),this._headersCapability=Promise.withResolvers();const C=process.getBuiltinModule("fs");C.promises.lstat(this._url).then(A=>{this._contentLength=A.size,this._setReadableStream(C.createReadStream(this._url)),this._headersCapability.resolve()},A=>{A.code==="ENOENT"&&(A=og(0,this._url.href)),this._storedError=A,this._headersCapability.reject(A)})}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const I=this._readableStream.read();return I===null?(this._readCapability=Promise.withResolvers(),this.read()):(this._loaded+=I.length,this.onProgress?.({loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(I).buffer,done:!1})}cancel(I){if(!this._readableStream){this._error(I);return}this._readableStream.destroy(I)}_error(I){this._storedError=I,this._readCapability.resolve()}_setReadableStream(I){this._readableStream=I,I.on("readable",()=>{this._readCapability.resolve()}),I.on("end",()=>{I.destroy(),this._done=!0,this._readCapability.resolve()}),I.on("error",g=>{this._error(g)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new zI("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class El{constructor(I,g,C){this._url=I.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=Promise.withResolvers();const A=I.source;this._isStreamingSupported=!A.disableStream;const l=process.getBuiltinModule("fs");this._setReadableStream(l.createReadStream(this._url,{start:g,end:C-1}))}get isStreamingSupported(){return this._isStreamingSupported}async read(){if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const I=this._readableStream.read();return I===null?(this._readCapability=Promise.withResolvers(),this.read()):(this._loaded+=I.length,this.onProgress?.({loaded:this._loaded}),{value:new Uint8Array(I).buffer,done:!1})}cancel(I){if(!this._readableStream){this._error(I);return}this._readableStream.destroy(I)}_error(I){this._storedError=I,this._readCapability.resolve()}_setReadableStream(I){this._readableStream=I,I.on("readable",()=>{this._readCapability.resolve()}),I.on("end",()=>{I.destroy(),this._done=!0,this._readCapability.resolve()}),I.on("error",g=>{this._error(g)}),this._storedError&&this._readableStream.destroy(this._storedError)}}const wg=Symbol("INITIAL_DATA");class WA{#I=Object.create(null);#g(I){return this.#I[I]||={...Promise.withResolvers(),data:wg}}get(I,g=null){if(g){const A=this.#g(I);return A.promise.then(()=>g(A.data)),null}const C=this.#I[I];if(!C||C.data===wg)throw new Error(`Requesting object that isn't resolved yet ${I}.`);return C.data}has(I){const g=this.#I[I];return!!g&&g.data!==wg}delete(I){const g=this.#I[I];return!g||g.data===wg?!1:(delete this.#I[I],!0)}resolve(I,g=null){const C=this.#g(I);C.data=g,C.resolve()}clear(){for(const I in this.#I){const{data:g}=this.#I[I];g?.bitmap?.close()}this.#I=Object.create(null)}*[Symbol.iterator](){for(const I in this.#I){const{data:g}=this.#I[I];g!==wg&&(yield[I,g])}}}const Pl=1e5,oA=30;class cI{#I=Promise.withResolvers();#g=null;#C=!1;#A=!!globalThis.FontInspector?.enabled;#Z=null;#l=null;#i=0;#d=0;#c=null;#G=null;#m=0;#s=0;#W=Object.create(null);#w=[];#B=null;#b=[];#o=new WeakMap;#a=null;static#Y=new Map;static#N=new Map;static#R=new WeakMap;static#h=null;static#n=new Set;constructor({textContentSource:I,container:g,viewport:C}){if(I instanceof ReadableStream)this.#B=I;else if(typeof I=="object")this.#B=new ReadableStream({start(d){d.enqueue(I),d.close()}});else throw new Error('No "textContentSource" parameter specified.');this.#g=this.#G=g,this.#s=C.scale*nI.pixelRatio,this.#m=C.rotation,this.#l={div:null,properties:null,ctx:null};const{pageWidth:A,pageHeight:l,pageX:Z,pageY:i}=C.rawDims;this.#a=[1,0,0,-1,-Z,i+l],this.#d=A,this.#i=l,cI.#H(),jI(g,C),this.#I.promise.finally(()=>{cI.#n.delete(this),this.#l=null,this.#W=null}).catch(()=>{})}static get fontFamilyMap(){const{isWindows:I,isFirefox:g}=ZI.platform;return J(this,"fontFamilyMap",new Map([["sans-serif",`${I&&g?"Calibri, ":""}sans-serif`],["monospace",`${I&&g?"Lucida Console, ":""}monospace`]]))}render(){const I=()=>{this.#c.read().then(({value:g,done:C})=>{if(C){this.#I.resolve();return}this.#Z??=g.lang,Object.assign(this.#W,g.styles),this.#t(g.items),I()},this.#I.reject)};return this.#c=this.#B.getReader(),cI.#n.add(this),I(),this.#I.promise}update({viewport:I,onBefore:g=null}){const C=I.scale*nI.pixelRatio,A=I.rotation;if(A!==this.#m&&(g?.(),this.#m=A,jI(this.#G,{rotation:A})),C!==this.#s){g?.(),this.#s=C;const l={div:null,properties:null,ctx:cI.#u(this.#Z)};for(const Z of this.#b)l.properties=this.#o.get(Z),l.div=Z,this.#e(l)}}cancel(){const I=new zI("TextLayer task cancelled.");this.#c?.cancel(I).catch(()=>{}),this.#c=null,this.#I.reject(I)}get textDivs(){return this.#b}get textContentItemsStr(){return this.#w}#t(I){if(this.#C)return;this.#l.ctx??=cI.#u(this.#Z);const g=this.#b,C=this.#w;for(const A of I){if(g.length>Pl){F("Ignoring additional textDivs for performance reasons."),this.#C=!0;return}if(A.str===void 0){if(A.type==="beginMarkedContentProps"||A.type==="beginMarkedContent"){const l=this.#g;this.#g=document.createElement("span"),this.#g.classList.add("markedContent"),A.id&&this.#g.setAttribute("id",`${A.id}`),l.append(this.#g)}else A.type==="endMarkedContent"&&(this.#g=this.#g.parentNode);continue}C.push(A.str),this.#X(A)}}#X(I){const g=document.createElement("span"),C={angle:0,canvasWidth:0,hasText:I.str!=="",hasEOL:I.hasEOL,fontSize:0};this.#b.push(g);const A=t.transform(this.#a,I.transform);let l=Math.atan2(A[1],A[0]);const Z=this.#W[I.fontName];Z.vertical&&(l+=Math.PI/2);let i=this.#A&&Z.fontSubstitution||Z.fontFamily;i=cI.fontFamilyMap.get(i)||i;const d=Math.hypot(A[2],A[3]),s=d*cI.#K(i,Z,this.#Z);let G,b;l===0?(G=A[4],b=A[5]-s):(G=A[4]+s*Math.sin(l),b=A[5]-s*Math.cos(l));const m="calc(var(--total-scale-factor) *",B=g.style;this.#g===this.#G?(B.left=`${(100*G/this.#d).toFixed(2)}%`,B.top=`${(100*b/this.#i).toFixed(2)}%`):(B.left=`${m}${G.toFixed(2)}px)`,B.top=`${m}${b.toFixed(2)}px)`),B.fontSize=`${m}${(cI.#h*d).toFixed(2)}px)`,B.fontFamily=i,C.fontSize=d,g.setAttribute("role","presentation"),g.textContent=I.str,g.dir=I.dir,this.#A&&(g.dataset.fontName=Z.fontSubstitutionLoadedName||I.fontName),l!==0&&(C.angle=l*(180/Math.PI));let o=!1;if(I.str.length>1)o=!0;else if(I.str!==" "&&I.transform[0]!==I.transform[3]){const W=Math.abs(I.transform[0]),Y=Math.abs(I.transform[3]);W!==Y&&Math.max(W,Y)/Math.min(W,Y)>1.5&&(o=!0)}if(o&&(C.canvasWidth=Z.vertical?I.height:I.width),this.#o.set(g,C),this.#l.div=g,this.#l.properties=C,this.#e(this.#l),C.hasText&&this.#g.append(g),C.hasEOL){const W=document.createElement("br");W.setAttribute("role","presentation"),this.#g.append(W)}}#e(I){const{div:g,properties:C,ctx:A}=I,{style:l}=g;let Z="";if(cI.#h>1&&(Z=`scale(${1/cI.#h})`),C.canvasWidth!==0&&C.hasText){const{fontFamily:i}=l,{canvasWidth:d,fontSize:s}=C;cI.#M(A,s*this.#s,i);const{width:G}=A.measureText(g.textContent);G>0&&(Z=`scaleX(${d*this.#s/G}) ${Z}`)}C.angle!==0&&(Z=`rotate(${C.angle}deg) ${Z}`),Z.length>0&&(l.transform=Z)}static cleanup(){if(!(this.#n.size>0)){this.#Y.clear();for(const{canvas:I}of this.#N.values())I.remove();this.#N.clear()}}static#u(I=null){let g=this.#N.get(I||="");if(!g){const C=document.createElement("canvas");C.className="hiddenCanvasElement",C.lang=I,document.body.append(C),g=C.getContext("2d",{alpha:!1,willReadFrequently:!0}),this.#N.set(I,g),this.#R.set(g,{size:0,family:""})}return g}static#M(I,g,C){const A=this.#R.get(I);g===A.size&&C===A.family||(I.font=`${g}px ${C}`,A.size=g,A.family=C)}static#H(){if(this.#h!==null)return;const I=document.createElement("div");I.style.opacity=0,I.style.lineHeight=1,I.style.fontSize="1px",I.style.position="absolute",I.textContent="X",document.body.append(I),this.#h=I.getBoundingClientRect().height,I.remove()}static#K(I,g,C){const A=this.#Y.get(I);if(A)return A;const l=this.#u(C);l.canvas.width=l.canvas.height=oA,this.#M(l,oA,I);const Z=l.measureText(""),i=Z.fontBoundingBoxAscent,d=Math.abs(Z.fontBoundingBoxDescent);l.canvas.width=l.canvas.height=0;let s=.8;return i?s=i/(i+d):(ZI.platform.isFirefox&&F("Enable the `dom.textMetrics.fontBoundingBox.enabled` preference in `about:config` to improve TextLayer rendering."),g.ascent?s=g.ascent:g.descent&&(s=1+g.descent)),this.#Y.set(I,s),s}}class Yg{static textContent(I){const g=[],C={items:g,styles:Object.create(null)};function A(l){if(!l)return;let Z=null;const i=l.name;if(i==="#text")Z=l.value;else if(Yg.shouldBuildText(i))l?.attributes?.textContent?Z=l.attributes.textContent:l.value&&(Z=l.value);else return;if(Z!==null&&g.push({str:Z}),!!l.children)for(const d of l.children)A(d)}return A(I),C}static shouldBuildText(I){return!(I==="textarea"||I==="input"||I==="option"||I==="select")}}const fl=100;function wA(c={}){typeof c=="string"||c instanceof URL?c={url:c}:(c instanceof ArrayBuffer||ArrayBuffer.isView(c))&&(c={data:c});const I=new YC,{docId:g}=I,C=c.url?Zl(c.url):null,A=c.data?il(c.data):null,l=c.httpHeaders||null,Z=c.withCredentials===!0,i=c.password??null,d=c.range instanceof YA?c.range:null,s=Number.isInteger(c.rangeChunkSize)&&c.rangeChunkSize>0?c.rangeChunkSize:2**16;let G=c.worker instanceof hg?c.worker:null;const b=c.verbosity,m=typeof c.docBaseUrl=="string"&&!Kg(c.docBaseUrl)?c.docBaseUrl:null,B=zg(c.cMapUrl),o=c.cMapPacked!==!1,W=c.CMapReaderFactory||(_?Wl:rC),Y=zg(c.iccUrl),w=zg(c.standardFontDataUrl),a=c.StandardFontDataFactory||(_?ol:fC),h=zg(c.wasmUrl),N=c.WasmFactory||(_?wl:qC),V=c.stopAtErrors!==!0,R=Number.isInteger(c.maxImageSize)&&c.maxImageSize>-1?c.maxImageSize:-1,X=c.isEvalSupported!==!1,n=typeof c.isOffscreenCanvasSupported=="boolean"?c.isOffscreenCanvasSupported:!_,y=typeof c.isImageDecoderSupported=="boolean"?c.isImageDecoderSupported:!_&&(ZI.platform.isFirefox||!globalThis.chrome),K=Number.isInteger(c.canvasMaxAreaInBytes)?c.canvasMaxAreaInBytes:-1,e=typeof c.disableFontFace=="boolean"?c.disableFontFace:_,T=c.fontExtraProperties===!0,O=c.enableXfa===!0,L=c.ownerDocument||globalThis.document,mI=c.disableRange===!0,M=c.disableStream===!0,u=c.disableAutoFetch===!0,NI=c.pdfBug===!0,pI=c.CanvasFactory||(_?Bl:cl),PI=c.FilterFactory||(_?ml:bl),uI=c.enableHWA===!0,lI=c.useWasm!==!1,f=d?d.length:c.length??NaN,Zg=typeof c.useSystemFonts=="boolean"?c.useSystemFonts:!_&&!e,LI=typeof c.useWorkerFetch=="boolean"?c.useWorkerFetch:!!(W===rC&&a===fC&&N===qC&&B&&w&&h&&cg(B,document.baseURI)&&cg(w,document.baseURI)&&cg(h,document.baseURI)),TI=null;JA(b);const r={canvasFactory:new pI({ownerDocument:L,enableHWA:uI}),filterFactory:new PI({docId:g,ownerDocument:L}),cMapReaderFactory:LI?null:new W({baseUrl:B,isCompressed:o}),standardFontDataFactory:LI?null:new a({baseUrl:w}),wasmFactory:LI?null:new N({baseUrl:h})};G||(G=hg.create({verbosity:b,port:Ig.workerPort}),I._worker=G);const Xg={docId:g,apiVersion:"5.4.54",data:A,password:i,disableAutoFetch:u,rangeChunkSize:s,length:f,docBaseUrl:m,enableXfa:O,evaluatorOptions:{maxImageSize:R,disableFontFace:e,ignoreErrors:V,isEvalSupported:X,isOffscreenCanvasSupported:n,isImageDecoderSupported:y,canvasMaxAreaInBytes:K,fontExtraProperties:T,useSystemFonts:Zg,useWasm:lI,useWorkerFetch:LI,cMapUrl:B,iccUrl:Y,standardFontDataUrl:w,wasmUrl:h}},FZ={ownerDocument:L,pdfBug:NI,styleElement:TI,loadingParams:{disableAutoFetch:u,enableXfa:O}};return G.promise.then(function(){if(I.destroyed)throw new Error("Loading aborted");if(G.destroyed)throw new Error("Worker was destroyed");const zZ=G.messageHandler.sendWithPromise("GetDocRequest",Xg,A?[A.buffer]:null);let uC;if(d)uC=new Kl(d,{disableRange:mI,disableStream:M});else if(!A){if(!C)throw new Error("getDocument - no `url` parameter provided.");const tC=cg(C)?zl:_?vl:Ql;uC=new tC({url:C,length:f,httpHeaders:l,withCredentials:Z,rangeChunkSize:s,disableRange:mI,disableStream:M})}return zZ.then(tC=>{if(I.destroyed)throw new Error("Loading aborted");if(G.destroyed)throw new Error("Worker was destroyed");const eA=new Bg(g,tC,G.port),JZ=new $l(eA,I,uC,FZ,r,uI);I._transport=JZ,eA.send("Ready",null)})}).catch(I._capability.reject),I}class YC{static#I=0;_capability=Promise.withResolvers();_transport=null;_worker=null;docId=`d${YC.#I++}`;destroyed=!1;onPassword=null;onProgress=null;get promise(){return this._capability.promise}async destroy(){this.destroyed=!0;try{this._worker?.port&&(this._worker._pendingDestroy=!0),await this._transport?.destroy()}catch(I){throw this._worker?.port&&delete this._worker._pendingDestroy,I}this._transport=null,this._worker?.destroy(),this._worker=null}async getData(){return this._transport.getData()}}class YA{#I=Promise.withResolvers();#g=[];#C=[];#A=[];#Z=[];constructor(I,g,C=!1,A=null){this.length=I,this.initialData=g,this.progressiveDone=C,this.contentDispositionFilename=A}addRangeListener(I){this.#Z.push(I)}addProgressListener(I){this.#A.push(I)}addProgressiveReadListener(I){this.#C.push(I)}addProgressiveDoneListener(I){this.#g.push(I)}onDataRange(I,g){for(const C of this.#Z)C(I,g)}onDataProgress(I,g){this.#I.promise.then(()=>{for(const C of this.#A)C(I,g)})}onDataProgressiveRead(I){this.#I.promise.then(()=>{for(const g of this.#C)g(I)})}onDataProgressiveDone(){this.#I.promise.then(()=>{for(const I of this.#g)I()})}transportReady(){this.#I.resolve()}requestDataRange(I,g){j("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}class _l{constructor(I,g){this._pdfInfo=I,this._transport=g}get annotationStorage(){return this._transport.annotationStorage}get canvasFactory(){return this._transport.canvasFactory}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return J(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(I){return this._transport.getPage(I)}getPageIndex(I){return this._transport.getPageIndex(I)}getDestinations(){return this._transport.getDestinations()}getDestination(I){return this._transport.getDestination(I)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig({intent:I="display"}={}){const{renderingIntent:g}=this._transport.getRenderingIntent(I);return this._transport.getOptionalContentConfig(g)}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(I=!1){return this._transport.startCleanup(I||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}cachedPageNumber(I){return this._transport.cachedPageNumber(I)}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}class ql{#I=!1;constructor(I,g,C,A=!1){this._pageIndex=I,this._pageInfo=g,this._transport=C,this._stats=A?new LC:null,this._pdfBug=A,this.commonObjs=C.commonObjs,this.objs=new WA,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:I,rotation:g=this.rotate,offsetX:C=0,offsetY:A=0,dontFlip:l=!1}={}){return new Gg({viewBox:this.view,userUnit:this.userUnit,scale:I,rotation:g,offsetX:C,offsetY:A,dontFlip:l})}getAnnotations({intent:I="display"}={}){const{renderingIntent:g}=this._transport.getRenderingIntent(I);return this._transport.getAnnotations(this._pageIndex,g)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return J(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){return this._transport._htmlForXfa?.children[this._pageIndex]||null}render({canvasContext:I,canvas:g=I.canvas,viewport:C,intent:A="display",annotationMode:l=FI.ENABLE,transform:Z=null,background:i=null,optionalContentConfigPromise:d=null,annotationCanvasMap:s=null,pageColors:G=null,printAnnotationStorage:b=null,isEditing:m=!1}){this._stats?.time("Overall");const B=this._transport.getRenderingIntent(A,l,b,m),{renderingIntent:o,cacheKey:W}=B;this.#I=!1,d||=this._transport.getOptionalContentConfig(o);let Y=this._intentStates.get(W);Y||(Y=Object.create(null),this._intentStates.set(W,Y)),Y.streamReaderCancelTimeout&&(clearTimeout(Y.streamReaderCancelTimeout),Y.streamReaderCancelTimeout=null);const w=!!(o&wI.PRINT);Y.displayReadyCapability||(Y.displayReadyCapability=Promise.withResolvers(),Y.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats?.time("Page Request"),this._pumpOperatorList(B));const a=V=>{Y.renderTasks.delete(h),w&&(this.#I=!0),this.#g(),V?(h.capability.reject(V),this._abortOperatorList({intentState:Y,reason:V instanceof Error?V:new Error(V)})):h.capability.resolve(),this._stats&&(this._stats.timeEnd("Rendering"),this._stats.timeEnd("Overall"),globalThis.Stats?.enabled&&globalThis.Stats.add(this.pageNumber,this._stats))},h=new Cg({callback:a,params:{canvas:g,canvasContext:I,viewport:C,transform:Z,background:i},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:s,operatorList:Y.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!w,pdfBug:this._pdfBug,pageColors:G,enableHWA:this._transport.enableHWA});(Y.renderTasks||=new Set).add(h);const N=h.task;return Promise.all([Y.displayReadyCapability.promise,d]).then(([V,R])=>{if(this.destroyed){a();return}if(this._stats?.time("Rendering"),!(R.renderingIntent&o))throw new Error("Must use the same `intent`-argument when calling the `PDFPageProxy.render` and `PDFDocumentProxy.getOptionalContentConfig` methods.");h.initializeGraphics({transparency:V,optionalContentConfig:R}),h.operatorListChanged()}).catch(a),N}getOperatorList({intent:I="display",annotationMode:g=FI.ENABLE,printAnnotationStorage:C=null,isEditing:A=!1}={}){function l(){i.operatorList.lastChunk&&(i.opListReadCapability.resolve(i.operatorList),i.renderTasks.delete(d))}const Z=this._transport.getRenderingIntent(I,g,C,A,!0);let i=this._intentStates.get(Z.cacheKey);i||(i=Object.create(null),this._intentStates.set(Z.cacheKey,i));let d;return i.opListReadCapability||(d=Object.create(null),d.operatorListChanged=l,i.opListReadCapability=Promise.withResolvers(),(i.renderTasks||=new Set).add(d),i.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},this._stats?.time("Page Request"),this._pumpOperatorList(Z)),i.opListReadCapability.promise}streamTextContent({includeMarkedContent:I=!1,disableNormalization:g=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:I===!0,disableNormalization:g===!0},{highWaterMark:100,size(A){return A.items.length}})}getTextContent(I={}){if(this._transport._htmlForXfa)return this.getXfa().then(C=>Yg.textContent(C));const g=this.streamTextContent(I);return new Promise(function(C,A){function l(){Z.read().then(function({value:d,done:s}){if(s){C(i);return}i.lang??=d.lang,Object.assign(i.styles,d.styles),i.items.push(...d.items),l()},A)}const Z=g.getReader(),i={items:[],styles:Object.create(null),lang:null};l()})}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const I=[];for(const g of this._intentStates.values())if(this._abortOperatorList({intentState:g,reason:new Error("Page was destroyed."),force:!0}),!g.opListReadCapability)for(const C of g.renderTasks)I.push(C.completed),C.cancel();return this.objs.clear(),this.#I=!1,Promise.all(I)}cleanup(I=!1){this.#I=!0;const g=this.#g();return I&&g&&(this._stats&&=new LC),g}#g(){if(!this.#I||this.destroyed)return!1;for(const{renderTasks:I,operatorList:g}of this._intentStates.values())if(I.size>0||!g.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),this.#I=!1,!0}_startRenderPage(I,g){const C=this._intentStates.get(g);C&&(this._stats?.timeEnd("Page Request"),C.displayReadyCapability?.resolve(I))}_renderPageChunk(I,g){for(let C=0,A=I.length;C<A;C++)g.operatorList.fnArray.push(I.fnArray[C]),g.operatorList.argsArray.push(I.argsArray[C]);g.operatorList.lastChunk=I.lastChunk,g.operatorList.separateAnnots=I.separateAnnots;for(const C of g.renderTasks)C.operatorListChanged();I.lastChunk&&this.#g()}_pumpOperatorList({renderingIntent:I,cacheKey:g,annotationStorageSerializable:C,modifiedIds:A}){const{map:l,transfer:Z}=C,d=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:I,cacheKey:g,annotationStorage:l,modifiedIds:A},Z).getReader(),s=this._intentStates.get(g);s.streamReader=d;const G=()=>{d.read().then(({value:b,done:m})=>{if(m){s.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(b,s),G())},b=>{if(s.streamReader=null,!this._transport.destroyed){if(s.operatorList){s.operatorList.lastChunk=!0;for(const m of s.renderTasks)m.operatorListChanged();this.#g()}if(s.displayReadyCapability)s.displayReadyCapability.reject(b);else if(s.opListReadCapability)s.opListReadCapability.reject(b);else throw b}})};G()}_abortOperatorList({intentState:I,reason:g,force:C=!1}){if(I.streamReader){if(I.streamReaderCancelTimeout&&(clearTimeout(I.streamReaderCancelTimeout),I.streamReaderCancelTimeout=null),!C){if(I.renderTasks.size>0)return;if(g instanceof IC){let A=fl;g.extraDelay>0&&g.extraDelay<1e3&&(A+=g.extraDelay),I.streamReaderCancelTimeout=setTimeout(()=>{I.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:I,reason:g,force:!0})},A);return}}if(I.streamReader.cancel(new zI(g.message)).catch(()=>{}),I.streamReader=null,!this._transport.destroyed){for(const[A,l]of this._intentStates)if(l===I){this._intentStates.delete(A);break}this.cleanup()}}}get stats(){return this._stats}}const U=class U{constructor({name:I=null,port:g=null,verbosity:C=kA()}={}){tI(this,bI);tI(this,kI,Promise.withResolvers());tI(this,RI,null);tI(this,SI,null);tI(this,vI,null);if(this.name=I,this.destroyed=!1,this.verbosity=C,g){if(x(U,EI).has(g))throw new Error("Cannot use more than one PDFWorker per port.");x(U,EI).set(g,this),eI(this,bI,SA).call(this,g)}else eI(this,bI,pA).call(this)}get promise(){return x(this,kI).promise}get port(){return x(this,SI)}get messageHandler(){return x(this,RI)}destroy(){this.destroyed=!0,x(this,vI)?.terminate(),oI(this,vI,null),x(U,EI).delete(x(this,SI)),oI(this,SI,null),x(this,RI)?.destroy(),oI(this,RI,null)}static create(I){const g=x(this,EI).get(I?.port);if(g){if(g._pendingDestroy)throw new Error("PDFWorker.create - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return g}return new U(I)}static get workerSrc(){if(Ig.workerSrc)return Ig.workerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _setupFakeWorkerGlobal(){return J(this,"_setupFakeWorkerGlobal",(async()=>x(this,lg,rg)?x(this,lg,rg):(await import(this.workerSrc)).WorkerMessageHandler)())}};kI=new WeakMap,RI=new WeakMap,SI=new WeakMap,vI=new WeakMap,xg=new WeakMap,rI=new WeakMap,EI=new WeakMap,bI=new WeakSet,vg=function(){x(this,kI).resolve(),x(this,RI).send("configure",{verbosity:this.verbosity})},SA=function(I){oI(this,SI,I),oI(this,RI,new Bg("main","worker",I)),x(this,RI).on("ready",()=>{}),eI(this,bI,vg).call(this)},pA=function(){if(x(U,rI)||x(U,lg,rg)){eI(this,bI,ng).call(this);return}let{workerSrc:I}=U;try{U._isSameOrigin(window.location,I)||(I=U._createCDNWrapper(new URL(I,window.location).href));const g=new Worker(I,{type:"module"}),C=new Bg("main","worker",g),A=()=>{l.abort(),C.destroy(),g.terminate(),this.destroyed?x(this,kI).reject(new Error("Worker was destroyed")):eI(this,bI,ng).call(this)},l=new AbortController;g.addEventListener("error",()=>{x(this,vI)||A()},{signal:l.signal}),C.on("test",i=>{if(l.abort(),this.destroyed||!i){A();return}oI(this,RI,C),oI(this,SI,g),oI(this,vI,g),eI(this,bI,vg).call(this)}),C.on("ready",i=>{if(l.abort(),this.destroyed){A();return}try{Z()}catch{eI(this,bI,ng).call(this)}});const Z=()=>{const i=new Uint8Array;C.send("test",i,[i.buffer])};Z();return}catch{eg("The worker has been disabled.")}eI(this,bI,ng).call(this)},ng=function(){x(U,rI)||(F("Setting up fake worker."),oI(U,rI,!0)),U._setupFakeWorkerGlobal.then(I=>{if(this.destroyed){x(this,kI).reject(new Error("Worker was destroyed"));return}const g=new Gl;oI(this,SI,g);const C=`fake${KA(U,xg)._++}`,A=new Bg(C+"_worker",C,g);I.setup(A,g),oI(this,RI,new Bg(C,C+"_worker",g)),eI(this,bI,vg).call(this)}).catch(I=>{x(this,kI).reject(new Error(`Setting up fake worker failed: "${I.message}".`))})},lg=new WeakSet,rg=function(){try{return globalThis.pdfjsWorker?.WorkerMessageHandler||null}catch{return null}},tI(U,lg),tI(U,xg,0),tI(U,rI,!1),tI(U,EI,new WeakMap),_&&(oI(U,rI,!0),Ig.workerSrc||="./pdf.worker.mjs"),U._isSameOrigin=(I,g)=>{const C=URL.parse(I);if(!C?.origin||C.origin==="null")return!1;const A=new URL(g,C);return C.origin===A.origin},U._createCDNWrapper=I=>{const g=`await import("${I}");`;return URL.createObjectURL(new Blob([g],{type:"text/javascript"}))},U.fromPort=I=>{if(fA("`PDFWorker.fromPort` - please use `PDFWorker.create` instead."),!I?.port)throw new Error("PDFWorker.fromPort - invalid method signature.");return U.create(I)};let hg=U;class $l{#I=new Map;#g=new Map;#C=new Map;#A=new Map;#Z=null;constructor(I,g,C,A,l,Z){this.messageHandler=I,this.loadingTask=g,this.commonObjs=new WA,this.fontLoader=new Al({ownerDocument:A.ownerDocument,styleElement:A.styleElement}),this.loadingParams=A.loadingParams,this._params=A,this.canvasFactory=l.canvasFactory,this.filterFactory=l.filterFactory,this.cMapReaderFactory=l.cMapReaderFactory,this.standardFontDataFactory=l.standardFontDataFactory,this.wasmFactory=l.wasmFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=C,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=Promise.withResolvers(),this.enableHWA=Z,this.setupMessageHandler()}#l(I,g=null){const C=this.#I.get(I);if(C)return C;const A=this.messageHandler.sendWithPromise(I,g);return this.#I.set(I,A),A}get annotationStorage(){return J(this,"annotationStorage",new dC)}getRenderingIntent(I,g=FI.ENABLE,C=null,A=!1,l=!1){let Z=wI.DISPLAY,i=iC;switch(I){case"any":Z=wI.ANY;break;case"display":break;case"print":Z=wI.PRINT;break;default:F(`getRenderingIntent - invalid intent: ${I}`)}const d=Z&wI.PRINT&&C instanceof OC?C:this.annotationStorage;switch(g){case FI.DISABLE:Z+=wI.ANNOTATIONS_DISABLE;break;case FI.ENABLE:break;case FI.ENABLE_FORMS:Z+=wI.ANNOTATIONS_FORMS;break;case FI.ENABLE_STORAGE:Z+=wI.ANNOTATIONS_STORAGE,i=d.serializable;break;default:F(`getRenderingIntent - invalid annotationMode: ${g}`)}A&&(Z+=wI.IS_EDITING),l&&(Z+=wI.OPLIST);const{ids:s,hash:G}=d.modifiedIds,b=[Z,i.hash,G];return{renderingIntent:Z,cacheKey:b.join("_"),annotationStorageSerializable:i,modifiedIds:s}}destroy(){if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=Promise.withResolvers(),this.#Z?.reject(new Error("Worker was destroyed during onPassword callback"));const I=[];for(const C of this.#g.values())I.push(C._destroy());this.#g.clear(),this.#C.clear(),this.#A.clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const g=this.messageHandler.sendWithPromise("Terminate",null);return I.push(g),Promise.all(I).then(()=>{this.commonObjs.clear(),this.fontLoader.clear(),this.#I.clear(),this.filterFactory.destroy(),cI.cleanup(),this._networkStream?.cancelAllRequests(new zI("Worker was terminated.")),this.messageHandler?.destroy(),this.messageHandler=null,this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:I,loadingTask:g}=this;I.on("GetReader",(C,A)=>{$(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=l=>{this._lastProgress={loaded:l.loaded,total:l.total}},A.onPull=()=>{this._fullReader.read().then(function({value:l,done:Z}){if(Z){A.close();return}$(l instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),A.enqueue(new Uint8Array(l),1,[l])}).catch(l=>{A.error(l)})},A.onCancel=l=>{this._fullReader.cancel(l),A.ready.catch(Z=>{if(!this.destroyed)throw Z})}}),I.on("ReaderHeadersReady",async C=>{await this._fullReader.headersReady;const{isStreamingSupported:A,isRangeSupported:l,contentLength:Z}=this._fullReader;return(!A||!l)&&(this._lastProgress&&g.onProgress?.(this._lastProgress),this._fullReader.onProgress=i=>{g.onProgress?.({loaded:i.loaded,total:i.total})}),{isStreamingSupported:A,isRangeSupported:l,contentLength:Z}}),I.on("GetRangeReader",(C,A)=>{$(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const l=this._networkStream.getRangeReader(C.begin,C.end);if(!l){A.close();return}A.onPull=()=>{l.read().then(function({value:Z,done:i}){if(i){A.close();return}$(Z instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),A.enqueue(new Uint8Array(Z),1,[Z])}).catch(Z=>{A.error(Z)})},A.onCancel=Z=>{l.cancel(Z),A.ready.catch(i=>{if(!this.destroyed)throw i})}}),I.on("GetDoc",({pdfInfo:C})=>{this._numPages=C.numPages,this._htmlForXfa=C.htmlForXfa,delete C.htmlForXfa,g._capability.resolve(new _l(C,this))}),I.on("DocException",C=>{g._capability.reject(BI(C))}),I.on("PasswordRequest",C=>{this.#Z=Promise.withResolvers();try{if(!g.onPassword)throw BI(C);const A=l=>{l instanceof Error?this.#Z.reject(l):this.#Z.resolve({password:l})};g.onPassword(A,C.code)}catch(A){this.#Z.reject(A)}return this.#Z.promise}),I.on("DataLoaded",C=>{g.onProgress?.({loaded:C.length,total:C.length}),this.downloadInfoCapability.resolve(C)}),I.on("StartRenderPage",C=>{if(this.destroyed)return;this.#g.get(C.pageIndex)._startRenderPage(C.transparency,C.cacheKey)}),I.on("commonobj",([C,A,l])=>{if(this.destroyed||this.commonObjs.has(C))return null;switch(A){case"Font":if("error"in l){const s=l.error;F(`Error during font loading: ${s}`),this.commonObjs.resolve(C,s);break}const Z=this._params.pdfBug&&globalThis.FontInspector?.enabled?(s,G)=>globalThis.FontInspector.fontAdded(s,G):null,i=new ll(l,Z);this.fontLoader.bind(i).catch(()=>I.sendWithPromise("FontFallback",{id:C})).finally(()=>{!i.fontExtraProperties&&i.data&&(i.data=null),this.commonObjs.resolve(C,i)});break;case"CopyLocalImage":const{imageRef:d}=l;$(d,"The imageRef must be defined.");for(const s of this.#g.values())for(const[,G]of s.objs)if(G?.ref===d)return G.dataLen?(this.commonObjs.resolve(C,structuredClone(G)),G.dataLen):null;break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(C,l);break;default:throw new Error(`Got unknown common object type ${A}`)}return null}),I.on("obj",([C,A,l,Z])=>{if(this.destroyed)return;const i=this.#g.get(A);if(!i.objs.has(C)){if(i._intentStates.size===0){Z?.bitmap?.close();return}switch(l){case"Image":case"Pattern":i.objs.resolve(C,Z);break;default:throw new Error(`Got unknown object type ${l}`)}}}),I.on("DocProgress",C=>{this.destroyed||g.onProgress?.({loaded:C.loaded,total:C.total})}),I.on("FetchBinaryData",async C=>{if(this.destroyed)throw new Error("Worker was destroyed.");const A=this[C.type];if(!A)throw new Error(`${C.type} not initialized, see the \`useWorkerFetch\` parameter.`);return A.fetch(C)})}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){this.annotationStorage.size<=0&&F("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:I,transfer:g}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:I,filename:this._fullReader?.filename??null},g).finally(()=>{this.annotationStorage.resetModified()})}getPage(I){if(!Number.isInteger(I)||I<=0||I>this._numPages)return Promise.reject(new Error("Invalid page request."));const g=I-1,C=this.#C.get(g);if(C)return C;const A=this.messageHandler.sendWithPromise("GetPage",{pageIndex:g}).then(l=>{if(this.destroyed)throw new Error("Transport destroyed");l.refStr&&this.#A.set(l.refStr,I);const Z=new ql(g,l,this,this._params.pdfBug);return this.#g.set(g,Z),Z});return this.#C.set(g,A),A}getPageIndex(I){return sC(I)?this.messageHandler.sendWithPromise("GetPageIndex",{num:I.num,gen:I.gen}):Promise.reject(new Error("Invalid pageIndex request."))}getAnnotations(I,g){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:I,intent:g})}getFieldObjects(){return this.#l("GetFieldObjects")}hasJSActions(){return this.#l("HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(I){return typeof I!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:I})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return this.#l("GetDocJSActions")}getPageJSActions(I){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:I})}getStructTree(I){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:I})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(I){return this.#l("GetOptionalContentConfig").then(g=>new Dl(g,I))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const I="GetMetadata",g=this.#I.get(I);if(g)return g;const C=this.messageHandler.sendWithPromise(I,null).then(A=>({info:A[0],metadata:A[1]?new tl(A[1]):null,contentDispositionFilename:this._fullReader?.filename??null,contentLength:this._fullReader?.contentLength??null}));return this.#I.set(I,C),C}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(I=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const g of this.#g.values())if(!g.cleanup())throw new Error(`startCleanup: Page ${g.pageNumber} is currently rendering.`);this.commonObjs.clear(),I||this.fontLoader.clear(),this.#I.clear(),this.filterFactory.destroy(!0),cI.cleanup()}}cachedPageNumber(I){if(!sC(I))return null;const g=I.gen===0?`${I.num}R`:`${I.num}R${I.gen}`;return this.#A.get(g)??null}}class IZ{#I=null;onContinue=null;onError=null;constructor(I){this.#I=I}get promise(){return this.#I.capability.promise}cancel(I=0){this.#I.cancel(null,I)}get separateAnnots(){const{separateAnnots:I}=this.#I.operatorList;if(!I)return!1;const{annotationCanvasMap:g}=this.#I;return I.form||I.canvas&&g?.size>0}}class Cg{#I=null;static#g=new WeakSet;constructor({callback:I,params:g,objs:C,commonObjs:A,annotationCanvasMap:l,operatorList:Z,pageIndex:i,canvasFactory:d,filterFactory:s,useRequestAnimationFrame:G=!1,pdfBug:b=!1,pageColors:m=null,enableHWA:B=!1}){this.callback=I,this.params=g,this.objs=C,this.commonObjs=A,this.annotationCanvasMap=l,this.operatorListIdx=null,this.operatorList=Z,this._pageIndex=i,this.canvasFactory=d,this.filterFactory=s,this._pdfBug=b,this.pageColors=m,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=G===!0&&typeof window<"u",this.cancelled=!1,this.capability=Promise.withResolvers(),this.task=new IZ(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=g.canvas,this._canvasContext=g.canvas?null:g.canvasContext,this._enableHWA=B}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:I=!1,optionalContentConfig:g}){if(this.cancelled)return;if(this._canvas){if(Cg.#g.has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");Cg.#g.add(this._canvas)}this._pdfBug&&globalThis.StepperManager?.enabled&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{viewport:C,transform:A,background:l}=this.params,Z=this._canvasContext||this._canvas.getContext("2d",{alpha:!1,willReadFrequently:!this._enableHWA});this.gfx=new $I(Z,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:g},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:A,viewport:C,transparency:I,background:l}),this.operatorListIdx=0,this.graphicsReady=!0,this.graphicsReadyCallback?.()}cancel(I=null,g=0){this.running=!1,this.cancelled=!0,this.gfx?.endDrawing(),this.#I&&(window.cancelAnimationFrame(this.#I),this.#I=null),Cg.#g.delete(this._canvas),I||=new IC(`Rendering cancelled, page ${this._pageIndex+1}`,g),this.callback(I),this.task.onError?.(I)}operatorListChanged(){if(!this.graphicsReady){this.graphicsReadyCallback||=this._continueBound;return}this.stepper?.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?this.#I=window.requestAnimationFrame(()=>{this.#I=null,this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),Cg.#g.delete(this._canvas),this.callback())))}}const gZ="5.4.54",CZ="295fb3ec4";class VI{#I=null;#g=null;#C;#A=null;#Z=!1;#l=!1;#i=null;#d;#c=null;#G=null;static#m=null;static get _keyboardManager(){return J(this,"_keyboardManager",new mg([[["Escape","mac+Escape"],VI.prototype._hideDropdownFromKeyboard],[[" ","mac+ "],VI.prototype._colorSelectFromKeyboard],[["ArrowDown","ArrowRight","mac+ArrowDown","mac+ArrowRight"],VI.prototype._moveToNext],[["ArrowUp","ArrowLeft","mac+ArrowUp","mac+ArrowLeft"],VI.prototype._moveToPrevious],[["Home","mac+Home"],VI.prototype._moveToBeginning],[["End","mac+End"],VI.prototype._moveToEnd]]))}constructor({editor:I=null,uiManager:g=null}){I?(this.#l=!1,this.#i=I):this.#l=!0,this.#G=I?._uiManager||g,this.#d=this.#G._eventBus,this.#C=I?.color?.toUpperCase()||this.#G?.highlightColors.values().next().value||"#FFFF98",VI.#m||=Object.freeze({blue:"pdfjs-editor-colorpicker-blue",green:"pdfjs-editor-colorpicker-green",pink:"pdfjs-editor-colorpicker-pink",red:"pdfjs-editor-colorpicker-red",yellow:"pdfjs-editor-colorpicker-yellow"})}renderButton(){const I=this.#I=document.createElement("button");I.className="colorPicker",I.tabIndex="0",I.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-button"),I.ariaHasPopup="true",this.#i&&(I.ariaControls=`${this.#i.id}_colorpicker_dropdown`);const g=this.#G._signal;I.addEventListener("click",this.#B.bind(this),{signal:g}),I.addEventListener("keydown",this.#w.bind(this),{signal:g});const C=this.#g=document.createElement("span");return C.className="swatch",C.ariaHidden="true",C.style.backgroundColor=this.#C,I.append(C),I}renderMainDropdown(){const I=this.#A=this.#s();return I.ariaOrientation="horizontal",I.ariaLabelledBy="highlightColorPickerLabel",I}#s(){const I=document.createElement("div"),g=this.#G._signal;I.addEventListener("contextmenu",hI,{signal:g}),I.className="dropdown",I.role="listbox",I.ariaMultiSelectable="false",I.ariaOrientation="vertical",I.setAttribute("data-l10n-id","pdfjs-editor-colorpicker-dropdown"),this.#i&&(I.id=`${this.#i.id}_colorpicker_dropdown`);for(const[C,A]of this.#G.highlightColors){const l=document.createElement("button");l.tabIndex="0",l.role="option",l.setAttribute("data-color",A),l.title=C,l.setAttribute("data-l10n-id",VI.#m[C]);const Z=document.createElement("span");l.append(Z),Z.className="swatch",Z.style.backgroundColor=A,l.ariaSelected=A===this.#C,l.addEventListener("click",this.#W.bind(this,A),{signal:g}),I.append(l)}return I.addEventListener("keydown",this.#w.bind(this),{signal:g}),I}#W(I,g){g.stopPropagation(),this.#d.dispatch("switchannotationeditorparams",{source:this,type:k.HIGHLIGHT_COLOR,value:I}),this.updateColor(I)}_colorSelectFromKeyboard(I){if(I.target===this.#I){this.#B(I);return}const g=I.target.getAttribute("data-color");g&&this.#W(g,I)}_moveToNext(I){if(!this.#o){this.#B(I);return}if(I.target===this.#I){this.#A.firstChild?.focus();return}I.target.nextSibling?.focus()}_moveToPrevious(I){if(I.target===this.#A?.firstChild||I.target===this.#I){this.#o&&this._hideDropdownFromKeyboard();return}this.#o||this.#B(I),I.target.previousSibling?.focus()}_moveToBeginning(I){if(!this.#o){this.#B(I);return}this.#A.firstChild?.focus()}_moveToEnd(I){if(!this.#o){this.#B(I);return}this.#A.lastChild?.focus()}#w(I){VI._keyboardManager.exec(this,I)}#B(I){if(this.#o){this.hideDropdown();return}if(this.#Z=I.detail===0,this.#c||(this.#c=new AbortController,window.addEventListener("pointerdown",this.#b.bind(this),{signal:this.#G.combinedSignal(this.#c)})),this.#I.ariaExpanded="true",this.#A){this.#A.classList.remove("hidden");return}const g=this.#A=this.#s();this.#I.append(g)}#b(I){this.#A?.contains(I.target)||this.hideDropdown()}hideDropdown(){this.#A?.classList.add("hidden"),this.#I.ariaExpanded="false",this.#c?.abort(),this.#c=null}get#o(){return this.#A&&!this.#A.classList.contains("hidden")}_hideDropdownFromKeyboard(){if(!this.#l){if(!this.#o){this.#i?.unselect();return}this.hideDropdown(),this.#I.focus({preventScroll:!0,focusVisible:this.#Z})}}updateColor(I){if(this.#g&&(this.#g.style.backgroundColor=I),!this.#A)return;const g=this.#G.highlightColors.values();for(const C of this.#A.children)C.ariaSelected=g.next().value===I.toUpperCase()}destroy(){this.#I?.remove(),this.#I=null,this.#g=null,this.#A?.remove(),this.#A=null}}class ag{#I=null;#g=null;#C=null;static#A=null;constructor(I){this.#g=I,this.#C=I._uiManager,ag.#A||=Object.freeze({freetext:"pdfjs-editor-color-picker-free-text-input",ink:"pdfjs-editor-color-picker-ink-input"})}renderButton(){if(this.#I)return this.#I;const{editorType:I,colorType:g,colorValue:C}=this.#g,A=this.#I=document.createElement("input");return A.type="color",A.value=C||"#000000",A.className="basicColorPicker",A.tabIndex=0,A.setAttribute("data-l10n-id",ag.#A[I]),A.addEventListener("input",()=>{this.#C.updateParams(g,A.value)},{signal:this.#C._signal}),A}update(I){this.#I&&(this.#I.value=I)}destroy(){this.#I?.remove(),this.#I=null}hideDropdown(){}}function hA(c){return Math.floor(Math.max(0,Math.min(1,c))*255).toString(16).padStart(2,"0")}function Vg(c){return Math.max(0,Math.min(255,255*c))}class aA{static CMYK_G([I,g,C,A]){return["G",1-Math.min(1,.3*I+.59*C+.11*g+A)]}static G_CMYK([I]){return["CMYK",0,0,0,1-I]}static G_RGB([I]){return["RGB",I,I,I]}static G_rgb([I]){return I=Vg(I),[I,I,I]}static G_HTML([I]){const g=hA(I);return`#${g}${g}${g}`}static RGB_G([I,g,C]){return["G",.3*I+.59*g+.11*C]}static RGB_rgb(I){return I.map(Vg)}static RGB_HTML(I){return`#${I.map(hA).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([I,g,C,A]){return["RGB",1-Math.min(1,I+A),1-Math.min(1,C+A),1-Math.min(1,g+A)]}static CMYK_rgb([I,g,C,A]){return[Vg(1-Math.min(1,I+A)),Vg(1-Math.min(1,C+A)),Vg(1-Math.min(1,g+A))]}static CMYK_HTML(I){const g=this.CMYK_RGB(I).slice(1);return this.RGB_HTML(g)}static RGB_CMYK([I,g,C]){const A=1-I,l=1-g,Z=1-C,i=Math.min(A,l,Z);return["CMYK",A,l,Z,i]}}class AZ{create(I,g,C=!1){if(I<=0||g<=0)throw new Error("Invalid SVG dimensions");const A=this._createSVG("svg:svg");return A.setAttribute("version","1.1"),C||(A.setAttribute("width",`${I}px`),A.setAttribute("height",`${g}px`)),A.setAttribute("preserveAspectRatio","none"),A.setAttribute("viewBox",`0 0 ${I} ${g}`),A}createElement(I){if(typeof I!="string")throw new Error("Invalid SVG element type");return this._createSVG(I)}_createSVG(I){j("Abstract method `_createSVG` called.")}}class Qg extends AZ{_createSVG(I){return document.createElementNS(DI,I)}}class VA{static setupStorage(I,g,C,A,l){const Z=A.getValue(g,{value:null});switch(C.name){case"textarea":if(Z.value!==null&&(I.textContent=Z.value),l==="print")break;I.addEventListener("input",i=>{A.setValue(g,{value:i.target.value})});break;case"input":if(C.attributes.type==="radio"||C.attributes.type==="checkbox"){if(Z.value===C.attributes.xfaOn?I.setAttribute("checked",!0):Z.value===C.attributes.xfaOff&&I.removeAttribute("checked"),l==="print")break;I.addEventListener("change",i=>{A.setValue(g,{value:i.target.checked?i.target.getAttribute("xfaOn"):i.target.getAttribute("xfaOff")})})}else{if(Z.value!==null&&I.setAttribute("value",Z.value),l==="print")break;I.addEventListener("input",i=>{A.setValue(g,{value:i.target.value})})}break;case"select":if(Z.value!==null){I.setAttribute("value",Z.value);for(const i of C.children)i.attributes.value===Z.value?i.attributes.selected=!0:i.attributes.hasOwnProperty("selected")&&delete i.attributes.selected}I.addEventListener("input",i=>{const d=i.target.options,s=d.selectedIndex===-1?"":d[d.selectedIndex].value;A.setValue(g,{value:s})});break}}static setAttributes({html:I,element:g,storage:C=null,intent:A,linkService:l}){const{attributes:Z}=g,i=I instanceof HTMLAnchorElement;Z.type==="radio"&&(Z.name=`${Z.name}-${A}`);for(const[d,s]of Object.entries(Z))if(s!=null)switch(d){case"class":s.length&&I.setAttribute(d,s.join(" "));break;case"dataId":break;case"id":I.setAttribute("data-element-id",s);break;case"style":Object.assign(I.style,s);break;case"textContent":I.textContent=s;break;default:(!i||d!=="href"&&d!=="newWindow")&&I.setAttribute(d,s)}i&&l.addLinkAttributes(I,Z.href,Z.newWindow),C&&Z.dataId&&this.setupStorage(I,Z.dataId,g,C)}static render(I){const g=I.annotationStorage,C=I.linkService,A=I.xfaHtml,l=I.intent||"display",Z=document.createElement(A.name);A.attributes&&this.setAttributes({html:Z,element:A,intent:l,linkService:C});const i=l!=="richText",d=I.div;if(d.append(Z),I.viewport){const b=`matrix(${I.viewport.transform.join(",")})`;d.style.transform=b}i&&d.setAttribute("class","xfaLayer xfaFont");const s=[];if(A.children.length===0){if(A.value){const b=document.createTextNode(A.value);Z.append(b),i&&Yg.shouldBuildText(A.name)&&s.push(b)}return{textDivs:s}}const G=[[A,-1,Z]];for(;G.length>0;){const[b,m,B]=G.at(-1);if(m+1===b.children.length){G.pop();continue}const o=b.children[++G.at(-1)[1]];if(o===null)continue;const{name:W}=o;if(W==="#text"){const w=document.createTextNode(o.value);s.push(w),B.append(w);continue}const Y=o?.attributes?.xmlns?document.createElementNS(o.attributes.xmlns,W):document.createElement(W);if(B.append(Y),o.attributes&&this.setAttributes({html:Y,element:o,storage:g,intent:l,linkService:C}),o.children?.length>0)G.push([o,-1,Y]);else if(o.value){const w=document.createTextNode(o.value);i&&Yg.shouldBuildText(W)&&s.push(w),Y.append(w)}}for(const b of d.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))b.setAttribute("readOnly",!0);return{textDivs:s}}static update(I){const g=`matrix(${I.viewport.transform.join(",")})`;I.div.style.transform=g,I.div.hidden=!1}}const lZ=9,OI=new WeakSet,ZZ=new Date().getTimezoneOffset()*60*1e3;class NA{static create(I){switch(I.data.annotationType){case q.LINK:return new hC(I);case q.TEXT:return new iZ(I);case q.WIDGET:switch(I.data.fieldType){case"Tx":return new dZ(I);case"Btn":return I.data.radioButton?new RA(I):I.data.checkBox?new GZ(I):new cZ(I);case"Ch":return new bZ(I);case"Sig":return new sZ(I)}return new UI(I);case q.POPUP:return new aC(I);case q.FREETEXT:return new XA(I);case q.LINE:return new BZ(I);case q.SQUARE:return new WZ(I);case q.CIRCLE:return new oZ(I);case q.POLYLINE:return new nA(I);case q.CARET:return new YZ(I);case q.INK:return new VC(I);case q.POLYGON:return new wZ(I);case q.HIGHLIGHT:return new yA(I);case q.UNDERLINE:return new hZ(I);case q.SQUIGGLY:return new aZ(I);case q.STRIKEOUT:return new VZ(I);case q.STAMP:return new HA(I);case q.FILEATTACHMENT:return new NZ(I);default:return new E(I)}}}class E{#I=null;#g=!1;#C=null;constructor(I,{isRenderable:g=!1,ignoreBorder:C=!1,createQuadrilaterals:A=!1}={}){this.isRenderable=g,this.data=I.data,this.layer=I.layer,this.linkService=I.linkService,this.downloadManager=I.downloadManager,this.imageResourcesPath=I.imageResourcesPath,this.renderForms=I.renderForms,this.svgFactory=I.svgFactory,this.annotationStorage=I.annotationStorage,this.enableScripting=I.enableScripting,this.hasJSActions=I.hasJSActions,this._fieldObjects=I.fieldObjects,this.parent=I.parent,g&&(this.container=this._createContainer(C)),A&&this._createQuadrilaterals()}static _hasPopupData({contentsObj:I,richText:g}){return!!(I?.str||g?.str)}get _isEditable(){return this.data.isEditable}get hasPopupData(){return E._hasPopupData(this.data)}updateEdited(I){if(!this.container)return;I.rect&&(this.#I||={rect:this.data.rect.slice(0)});const{rect:g,popup:C}=I;g&&this.#A(g);let A=this.#C?.popup||this.popup;!A&&C?.text&&(this._createPopup(C),A=this.#C.popup),A&&(A.updateEdited(I),C?.deleted&&(A.remove(),this.#C=null,this.popup=null))}resetEdited(){this.#I&&(this.#A(this.#I.rect),this.#C?.popup.resetEdited(),this.#I=null)}#A(I){const{container:{style:g},data:{rect:C,rotation:A},parent:{viewport:{rawDims:{pageWidth:l,pageHeight:Z,pageX:i,pageY:d}}}}=this;C?.splice(0,4,...I),g.left=`${100*(I[0]-i)/l}%`,g.top=`${100*(Z-I[3]+d)/Z}%`,A===0?(g.width=`${100*(I[2]-I[0])/l}%`,g.height=`${100*(I[3]-I[1])/Z}%`):this.setRotation(A)}_createContainer(I){const{data:g,parent:{page:C,viewport:A}}=this,l=document.createElement("section");l.setAttribute("data-annotation-id",g.id),!(this instanceof UI)&&!(this instanceof hC)&&(l.tabIndex=0);const{style:Z}=l;if(Z.zIndex=this.parent.zIndex++,g.alternativeText&&(l.title=g.alternativeText),g.noRotate&&l.classList.add("norotate"),!g.rect||this instanceof aC){const{rotation:W}=g;return!g.hasOwnCanvas&&W!==0&&this.setRotation(W,l),l}const{width:i,height:d}=this;if(!I&&g.borderStyle.width>0){Z.borderWidth=`${g.borderStyle.width}px`;const W=g.borderStyle.horizontalCornerRadius,Y=g.borderStyle.verticalCornerRadius;if(W>0||Y>0){const a=`calc(${W}px * var(--total-scale-factor)) / calc(${Y}px * var(--total-scale-factor))`;Z.borderRadius=a}else if(this instanceof RA){const a=`calc(${i}px * var(--total-scale-factor)) / calc(${d}px * var(--total-scale-factor))`;Z.borderRadius=a}switch(g.borderStyle.style){case fI.SOLID:Z.borderStyle="solid";break;case fI.DASHED:Z.borderStyle="dashed";break;case fI.BEVELED:F("Unimplemented border style: beveled");break;case fI.INSET:F("Unimplemented border style: inset");break;case fI.UNDERLINE:Z.borderBottomStyle="solid";break}const w=g.borderColor||null;w?(this.#g=!0,Z.borderColor=t.makeHexColor(w[0]|0,w[1]|0,w[2]|0)):Z.borderWidth=0}const s=t.normalizeRect([g.rect[0],C.view[3]-g.rect[1]+C.view[1],g.rect[2],C.view[3]-g.rect[3]+C.view[1]]),{pageWidth:G,pageHeight:b,pageX:m,pageY:B}=A.rawDims;Z.left=`${100*(s[0]-m)/G}%`,Z.top=`${100*(s[1]-B)/b}%`;const{rotation:o}=g;return g.hasOwnCanvas||o===0?(Z.width=`${100*i/G}%`,Z.height=`${100*d/b}%`):this.setRotation(o,l),l}setRotation(I,g=this.container){if(!this.data.rect)return;const{pageWidth:C,pageHeight:A}=this.parent.viewport.rawDims;let{width:l,height:Z}=this;I%180!==0&&([l,Z]=[Z,l]),g.style.width=`${100*l/C}%`,g.style.height=`${100*Z/A}%`,g.setAttribute("data-main-rotation",(360-I)%360)}get _commonActions(){const I=(g,C,A)=>{const l=A.detail[g],Z=l[0],i=l.slice(1);A.target.style[C]=aA[`${Z}_HTML`](i),this.annotationStorage.setValue(this.data.id,{[C]:aA[`${Z}_rgb`](i)})};return J(this,"_commonActions",{display:g=>{const{display:C}=g.detail,A=C%2===1;this.container.style.visibility=A?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:A,noPrint:C===1||C===2})},print:g=>{this.annotationStorage.setValue(this.data.id,{noPrint:!g.detail.print})},hidden:g=>{const{hidden:C}=g.detail;this.container.style.visibility=C?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:C,noView:C})},focus:g=>{setTimeout(()=>g.target.focus({preventScroll:!1}),0)},userName:g=>{g.target.title=g.detail.userName},readonly:g=>{g.target.disabled=g.detail.readonly},required:g=>{this._setRequired(g.target,g.detail.required)},bgColor:g=>{I("bgColor","backgroundColor",g)},fillColor:g=>{I("fillColor","backgroundColor",g)},fgColor:g=>{I("fgColor","color",g)},textColor:g=>{I("textColor","color",g)},borderColor:g=>{I("borderColor","borderColor",g)},strokeColor:g=>{I("strokeColor","borderColor",g)},rotation:g=>{const C=g.detail.rotation;this.setRotation(C),this.annotationStorage.setValue(this.data.id,{rotation:C})}})}_dispatchEventFromSandbox(I,g){const C=this._commonActions;for(const A of Object.keys(g.detail))(I[A]||C[A])?.(g)}_setDefaultPropertiesFromJS(I){if(!this.enableScripting)return;const g=this.annotationStorage.getRawValue(this.data.id);if(!g)return;const C=this._commonActions;for(const[A,l]of Object.entries(g)){const Z=C[A];if(Z){const i={detail:{[A]:l},target:I};Z(i),delete g[A]}}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:I}=this.data;if(!I)return;const[g,C,A,l]=this.data.rect.map(W=>Math.fround(W));if(I.length===8){const[W,Y,w,a]=I.subarray(2,6);if(A===W&&l===Y&&g===w&&C===a)return}const{style:Z}=this.container;let i;if(this.#g){const{borderColor:W,borderWidth:Y}=Z;Z.borderWidth=0,i=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${W}" stroke-width="${Y}">`],this.container.classList.add("hasBorder")}const d=A-g,s=l-C,{svgFactory:G}=this,b=G.createElement("svg");b.classList.add("quadrilateralsContainer"),b.setAttribute("width",0),b.setAttribute("height",0),b.role="none";const m=G.createElement("defs");b.append(m);const B=G.createElement("clipPath"),o=`clippath_${this.data.id}`;B.setAttribute("id",o),B.setAttribute("clipPathUnits","objectBoundingBox"),m.append(B);for(let W=2,Y=I.length;W<Y;W+=8){const w=I[W],a=I[W+1],h=I[W+2],N=I[W+3],V=G.createElement("rect"),R=(h-g)/d,X=(l-a)/s,n=(w-h)/d,y=(a-N)/s;V.setAttribute("x",R),V.setAttribute("y",X),V.setAttribute("width",n),V.setAttribute("height",y),B.append(V),i?.push(`<rect vector-effect="non-scaling-stroke" x="${R}" y="${X}" width="${n}" height="${y}"/>`)}this.#g&&(i.push("</g></svg>')"),Z.backgroundImage=i.join("")),this.container.append(b),this.container.style.clipPath=`url(#${o})`}_createPopup(I=null){const{data:g}=this;let C,A;I?(C={str:I.text},A=I.date):(C=g.contentsObj,A=g.modificationDate);const l=this.#C=new aC({data:{color:g.color,titleObj:g.titleObj,modificationDate:A,contentsObj:C,richText:g.richText,parentRect:g.rect,borderStyle:0,id:`popup_${g.id}`,rotation:g.rotation,noRotate:!0},linkService:this.linkService,parent:this.parent,elements:[this]});this.parent.div.append(l.render())}get hasPopupElement(){return!!(this.#C||this.popup||this.data.popupRef)}render(){j("Abstract method `AnnotationElement.render` called")}_getElementsByName(I,g=null){const C=[];if(this._fieldObjects){const A=this._fieldObjects[I];if(A)for(const{page:l,id:Z,exportValues:i}of A){if(l===-1||Z===g)continue;const d=typeof i=="string"?i:null,s=document.querySelector(`[data-element-id="${Z}"]`);if(s&&!OI.has(s)){F(`_getElementsByName - element not allowed: ${Z}`);continue}C.push({id:Z,exportValue:d,domElement:s})}return C}for(const A of document.getElementsByName(I)){const{exportValue:l}=A,Z=A.getAttribute("data-element-id");Z!==g&&OI.has(A)&&C.push({id:Z,exportValue:l,domElement:A})}return C}show(){this.container&&(this.container.hidden=!1),this.popup?.maybeShow()}hide(){this.container&&(this.container.hidden=!0),this.popup?.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const I=this.getElementsToTriggerPopup();if(Array.isArray(I))for(const g of I)g.classList.add("highlightArea");else I.classList.add("highlightArea")}_editOnDoubleClick(){if(!this._isEditable)return;const{annotationEditorType:I,data:{id:g}}=this;this.container.addEventListener("dblclick",()=>{this.linkService.eventBus?.dispatch("switchannotationeditormode",{source:this,mode:I,editId:g,mustEnterInEditMode:!0})})}get width(){return this.data.rect[2]-this.data.rect[0]}get height(){return this.data.rect[3]-this.data.rect[1]}}class hC extends E{constructor(I,g=null){super(I,{isRenderable:!0,ignoreBorder:!!g?.ignoreBorder,createQuadrilaterals:!0}),this.isTooltipOnly=I.data.isTooltipOnly}render(){const{data:I,linkService:g}=this,C=document.createElement("a");C.setAttribute("data-element-id",I.id);let A=!1;return I.url?(g.addLinkAttributes(C,I.url,I.newWindow),A=!0):I.action?(this._bindNamedAction(C,I.action,I.overlaidText),A=!0):I.attachment?(this.#g(C,I.attachment,I.overlaidText,I.attachmentDest),A=!0):I.setOCGState?(this.#C(C,I.setOCGState,I.overlaidText),A=!0):I.dest?(this._bindLink(C,I.dest,I.overlaidText),A=!0):(I.actions&&(I.actions.Action||I.actions["Mouse Up"]||I.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(C,I),A=!0),I.resetForm?(this._bindResetFormAction(C,I.resetForm),A=!0):this.isTooltipOnly&&!A&&(this._bindLink(C,""),A=!0)),this.container.classList.add("linkAnnotation"),A&&this.container.append(C),this.container}#I(){this.container.setAttribute("data-internal-link","")}_bindLink(I,g,C=""){I.href=this.linkService.getDestinationHash(g),I.onclick=()=>(g&&this.linkService.goToDestination(g),!1),(g||g==="")&&this.#I(),C&&(I.title=C)}_bindNamedAction(I,g,C=""){I.href=this.linkService.getAnchorUrl(""),I.onclick=()=>(this.linkService.executeNamedAction(g),!1),C&&(I.title=C),this.#I()}#g(I,g,C="",A=null){I.href=this.linkService.getAnchorUrl(""),g.description?I.title=g.description:C&&(I.title=C),I.onclick=()=>(this.downloadManager?.openOrDownloadData(g.content,g.filename,A),!1),this.#I()}#C(I,g,C=""){I.href=this.linkService.getAnchorUrl(""),I.onclick=()=>(this.linkService.executeSetOCGState(g),!1),C&&(I.title=C),this.#I()}_bindJSAction(I,g){I.href=this.linkService.getAnchorUrl("");const C=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const A of Object.keys(g.actions)){const l=C.get(A);l&&(I[l]=()=>(this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g.id,name:A}}),!1))}g.overlaidText&&(I.title=g.overlaidText),I.onclick||(I.onclick=()=>!1),this.#I()}_bindResetFormAction(I,g){const C=I.onclick;if(C||(I.href=this.linkService.getAnchorUrl("")),this.#I(),!this._fieldObjects){F('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),C||(I.onclick=()=>!1);return}I.onclick=()=>{C?.();const{fields:A,refs:l,include:Z}=g,i=[];if(A.length!==0||l.length!==0){const G=new Set(l);for(const b of A){const m=this._fieldObjects[b]||[];for(const{id:B}of m)G.add(B)}for(const b of Object.values(this._fieldObjects))for(const m of b)G.has(m.id)===Z&&i.push(m)}else for(const G of Object.values(this._fieldObjects))i.push(...G);const d=this.annotationStorage,s=[];for(const G of i){const{id:b}=G;switch(s.push(b),G.type){case"text":{const B=G.defaultValue||"";d.setValue(b,{value:B});break}case"checkbox":case"radiobutton":{const B=G.defaultValue===G.exportValues;d.setValue(b,{value:B});break}case"combobox":case"listbox":{const B=G.defaultValue||"";d.setValue(b,{value:B});break}default:continue}const m=document.querySelector(`[data-element-id="${b}"]`);if(m){if(!OI.has(m)){F(`_bindResetFormAction - element not allowed: ${b}`);continue}}else continue;m.dispatchEvent(new Event("resetform"))}return this.enableScripting&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:s,name:"ResetForm"}}),!1}}}class iZ extends E{constructor(I){super(I,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const I=document.createElement("img");return I.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",I.setAttribute("data-l10n-id","pdfjs-text-annotation-type"),I.setAttribute("data-l10n-args",JSON.stringify({type:this.data.name})),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(I),this.container}}class UI extends E{render(){return this.container}showElementAndHideCanvas(I){this.data.hasOwnCanvas&&(I.previousSibling?.nodeName==="CANVAS"&&(I.previousSibling.hidden=!0),I.hidden=!1)}_getKeyModifier(I){return ZI.platform.isMac?I.metaKey:I.ctrlKey}_setEventListener(I,g,C,A,l){C.includes("mouse")?I.addEventListener(C,Z=>{this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:A,value:l(Z),shift:Z.shiftKey,modifier:this._getKeyModifier(Z)}})}):I.addEventListener(C,Z=>{if(C==="blur"){if(!g.focused||!Z.relatedTarget)return;g.focused=!1}else if(C==="focus"){if(g.focused)return;g.focused=!0}l&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:A,value:l(Z)}})})}_setEventListeners(I,g,C,A){for(const[l,Z]of C)(Z==="Action"||this.data.actions?.[Z])&&((Z==="Focus"||Z==="Blur")&&(g||={focused:!1}),this._setEventListener(I,g,l,Z,A),Z==="Focus"&&!this.data.actions?.Blur?this._setEventListener(I,g,"blur","Blur",null):Z==="Blur"&&!this.data.actions?.Focus&&this._setEventListener(I,g,"focus","Focus",null))}_setBackgroundColor(I){const g=this.data.backgroundColor||null;I.style.backgroundColor=g===null?"transparent":t.makeHexColor(g[0],g[1],g[2])}_setTextStyle(I){const g=["left","center","right"],{fontColor:C}=this.data.defaultAppearanceData,A=this.data.defaultAppearanceData.fontSize||lZ,l=I.style;let Z;const i=2,d=s=>Math.round(10*s)/10;if(this.data.multiLine){const s=Math.abs(this.data.rect[3]-this.data.rect[1]-i),G=Math.round(s/(Eg*A))||1,b=s/G;Z=Math.min(A,d(b/Eg))}else{const s=Math.abs(this.data.rect[3]-this.data.rect[1]-i);Z=Math.min(A,d(s/Eg))}l.fontSize=`calc(${Z}px * var(--total-scale-factor))`,l.color=t.makeHexColor(C[0],C[1],C[2]),this.data.textAlignment!==null&&(l.textAlign=g[this.data.textAlignment])}_setRequired(I,g){g?I.setAttribute("required",!0):I.removeAttribute("required"),I.setAttribute("aria-required",g)}}class dZ extends UI{constructor(I){const g=I.renderForms||I.data.hasOwnCanvas||!I.data.hasAppearance&&!!I.data.fieldValue;super(I,{isRenderable:g})}setPropertyOnSiblings(I,g,C,A){const l=this.annotationStorage;for(const Z of this._getElementsByName(I.name,I.id))Z.domElement&&(Z.domElement[g]=C),l.setValue(Z.id,{[A]:C})}render(){const I=this.annotationStorage,g=this.data.id;this.container.classList.add("textWidgetAnnotation");let C=null;if(this.renderForms){const A=I.getValue(g,{value:this.data.fieldValue});let l=A.value||"";const Z=I.getValue(g,{charLimit:this.data.maxLen}).charLimit;Z&&l.length>Z&&(l=l.slice(0,Z));let i=A.formattedValue||this.data.textContent?.join(`
`)||null;i&&this.data.comb&&(i=i.replaceAll(/\s+/g,""));const d={userValue:l,formattedValue:i,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(C=document.createElement("textarea"),C.textContent=i??l,this.data.doNotScroll&&(C.style.overflowY="hidden")):(C=document.createElement("input"),C.type=this.data.password?"password":"text",C.setAttribute("value",i??l),this.data.doNotScroll&&(C.style.overflowX="hidden")),this.data.hasOwnCanvas&&(C.hidden=!0),OI.add(C),C.setAttribute("data-element-id",g),C.disabled=this.data.readOnly,C.name=this.data.fieldName,C.tabIndex=0;const{datetimeFormat:s,datetimeType:G,timeStep:b}=this.data,m=!!G&&this.enableScripting;s&&(C.title=s),this._setRequired(C,this.data.required),Z&&(C.maxLength=Z),C.addEventListener("input",o=>{I.setValue(g,{value:o.target.value}),this.setPropertyOnSiblings(C,"value",o.target.value,"value"),d.formattedValue=null}),C.addEventListener("resetform",o=>{const W=this.data.defaultFieldValue??"";C.value=d.userValue=W,d.formattedValue=null});let B=o=>{const{formattedValue:W}=d;W!=null&&(o.target.value=W),o.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){C.addEventListener("focus",W=>{if(d.focused)return;const{target:Y}=W;if(m&&(Y.type=G,b&&(Y.step=b)),d.userValue){const w=d.userValue;if(m)if(G==="time"){const a=new Date(w),h=[a.getHours(),a.getMinutes(),a.getSeconds()];Y.value=h.map(N=>N.toString().padStart(2,"0")).join(":")}else Y.value=new Date(w-ZZ).toISOString().split(G==="date"?"T":".",1)[0];else Y.value=w}d.lastCommittedValue=Y.value,d.commitKey=1,this.data.actions?.Focus||(d.focused=!0)}),C.addEventListener("updatefromsandbox",W=>{this.showElementAndHideCanvas(W.target);const Y={value(w){d.userValue=w.detail.value??"",m||I.setValue(g,{value:d.userValue.toString()}),w.target.value=d.userValue},formattedValue(w){const{formattedValue:a}=w.detail;d.formattedValue=a,a!=null&&w.target!==document.activeElement&&(w.target.value=a);const h={formattedValue:a};m&&(h.value=a),I.setValue(g,h)},selRange(w){w.target.setSelectionRange(...w.detail.selRange)},charLimit:w=>{const{charLimit:a}=w.detail,{target:h}=w;if(a===0){h.removeAttribute("maxLength");return}h.setAttribute("maxLength",a);let N=d.userValue;!N||N.length<=a||(N=N.slice(0,a),h.value=d.userValue=N,I.setValue(g,{value:N}),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:N,willCommit:!0,commitKey:1,selStart:h.selectionStart,selEnd:h.selectionEnd}}))}};this._dispatchEventFromSandbox(Y,W)}),C.addEventListener("keydown",W=>{d.commitKey=1;let Y=-1;if(W.key==="Escape"?Y=0:W.key==="Enter"&&!this.data.multiLine?Y=2:W.key==="Tab"&&(d.commitKey=3),Y===-1)return;const{value:w}=W.target;d.lastCommittedValue!==w&&(d.lastCommittedValue=w,d.userValue=w,this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:w,willCommit:!0,commitKey:Y,selStart:W.target.selectionStart,selEnd:W.target.selectionEnd}}))});const o=B;B=null,C.addEventListener("blur",W=>{if(!d.focused||!W.relatedTarget)return;this.data.actions?.Blur||(d.focused=!1);const{target:Y}=W;let{value:w}=Y;if(m){if(w&&G==="time"){const a=w.split(":").map(h=>parseInt(h,10));w=new Date(2e3,0,1,a[0],a[1],a[2]||0).valueOf(),Y.step=""}else w=new Date(w).valueOf();Y.type="text"}d.userValue=w,d.lastCommittedValue!==w&&this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:w,willCommit:!0,commitKey:d.commitKey,selStart:W.target.selectionStart,selEnd:W.target.selectionEnd}}),o(W)}),this.data.actions?.Keystroke&&C.addEventListener("beforeinput",W=>{d.lastCommittedValue=null;const{data:Y,target:w}=W,{value:a,selectionStart:h,selectionEnd:N}=w;let V=h,R=N;switch(W.inputType){case"deleteWordBackward":{const X=a.substring(0,h).match(/\w*[^\w]*$/);X&&(V-=X[0].length);break}case"deleteWordForward":{const X=a.substring(h).match(/^[^\w]*\w*/);X&&(R+=X[0].length);break}case"deleteContentBackward":h===N&&(V-=1);break;case"deleteContentForward":h===N&&(R+=1);break}W.preventDefault(),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:a,change:Y||"",willCommit:!1,selStart:V,selEnd:R}})}),this._setEventListeners(C,d,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],W=>W.target.value)}if(B&&C.addEventListener("blur",B),this.data.comb){const W=(this.data.rect[2]-this.data.rect[0])/Z;C.classList.add("comb"),C.style.letterSpacing=`calc(${W}px * var(--total-scale-factor) - 1ch)`}}else C=document.createElement("div"),C.textContent=this.data.fieldValue,C.style.verticalAlign="middle",C.style.display="table-cell",this.data.hasOwnCanvas&&(C.hidden=!0);return this._setTextStyle(C),this._setBackgroundColor(C),this._setDefaultPropertiesFromJS(C),this.container.append(C),this.container}}class sZ extends UI{constructor(I){super(I,{isRenderable:!!I.data.hasOwnCanvas})}}class GZ extends UI{constructor(I){super(I,{isRenderable:I.renderForms})}render(){const I=this.annotationStorage,g=this.data,C=g.id;let A=I.getValue(C,{value:g.exportValue===g.fieldValue}).value;typeof A=="string"&&(A=A!=="Off",I.setValue(C,{value:A})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const l=document.createElement("input");return OI.add(l),l.setAttribute("data-element-id",C),l.disabled=g.readOnly,this._setRequired(l,this.data.required),l.type="checkbox",l.name=g.fieldName,A&&l.setAttribute("checked",!0),l.setAttribute("exportValue",g.exportValue),l.tabIndex=0,l.addEventListener("change",Z=>{const{name:i,checked:d}=Z.target;for(const s of this._getElementsByName(i,C)){const G=d&&s.exportValue===g.exportValue;s.domElement&&(s.domElement.checked=G),I.setValue(s.id,{value:G})}I.setValue(C,{value:d})}),l.addEventListener("resetform",Z=>{const i=g.defaultFieldValue||"Off";Z.target.checked=i===g.exportValue}),this.enableScripting&&this.hasJSActions&&(l.addEventListener("updatefromsandbox",Z=>{const i={value(d){d.target.checked=d.detail.value!=="Off",I.setValue(C,{value:d.target.checked})}};this._dispatchEventFromSandbox(i,Z)}),this._setEventListeners(l,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],Z=>Z.target.checked)),this._setBackgroundColor(l),this._setDefaultPropertiesFromJS(l),this.container.append(l),this.container}}class RA extends UI{constructor(I){super(I,{isRenderable:I.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const I=this.annotationStorage,g=this.data,C=g.id;let A=I.getValue(C,{value:g.fieldValue===g.buttonValue}).value;if(typeof A=="string"&&(A=A!==g.buttonValue,I.setValue(C,{value:A})),A)for(const Z of this._getElementsByName(g.fieldName,C))I.setValue(Z.id,{value:!1});const l=document.createElement("input");if(OI.add(l),l.setAttribute("data-element-id",C),l.disabled=g.readOnly,this._setRequired(l,this.data.required),l.type="radio",l.name=g.fieldName,A&&l.setAttribute("checked",!0),l.tabIndex=0,l.addEventListener("change",Z=>{const{name:i,checked:d}=Z.target;for(const s of this._getElementsByName(i,C))I.setValue(s.id,{value:!1});I.setValue(C,{value:d})}),l.addEventListener("resetform",Z=>{const i=g.defaultFieldValue;Z.target.checked=i!=null&&i===g.buttonValue}),this.enableScripting&&this.hasJSActions){const Z=g.buttonValue;l.addEventListener("updatefromsandbox",i=>{const d={value:s=>{const G=Z===s.detail.value;for(const b of this._getElementsByName(s.target.name)){const m=G&&b.id===C;b.domElement&&(b.domElement.checked=m),I.setValue(b.id,{value:m})}}};this._dispatchEventFromSandbox(d,i)}),this._setEventListeners(l,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],i=>i.target.checked)}return this._setBackgroundColor(l),this._setDefaultPropertiesFromJS(l),this.container.append(l),this.container}}class cZ extends hC{constructor(I){super(I,{ignoreBorder:I.data.hasAppearance})}render(){const I=super.render();I.classList.add("buttonWidgetAnnotation","pushButton");const g=I.lastChild;return this.enableScripting&&this.hasJSActions&&g&&(this._setDefaultPropertiesFromJS(g),g.addEventListener("updatefromsandbox",C=>{this._dispatchEventFromSandbox({},C)})),I}}class bZ extends UI{constructor(I){super(I,{isRenderable:I.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const I=this.annotationStorage,g=this.data.id,C=I.getValue(g,{value:this.data.fieldValue}),A=document.createElement("select");OI.add(A),A.setAttribute("data-element-id",g),A.disabled=this.data.readOnly,this._setRequired(A,this.data.required),A.name=this.data.fieldName,A.tabIndex=0;let l=this.data.combo&&this.data.options.length>0;this.data.combo||(A.size=this.data.options.length,this.data.multiSelect&&(A.multiple=!0)),A.addEventListener("resetform",G=>{const b=this.data.defaultFieldValue;for(const m of A.options)m.selected=m.value===b});for(const G of this.data.options){const b=document.createElement("option");b.textContent=G.displayValue,b.value=G.exportValue,C.value.includes(G.exportValue)&&(b.setAttribute("selected",!0),l=!1),A.append(b)}let Z=null;if(l){const G=document.createElement("option");G.value=" ",G.setAttribute("hidden",!0),G.setAttribute("selected",!0),A.prepend(G),Z=()=>{G.remove(),A.removeEventListener("input",Z),Z=null},A.addEventListener("input",Z)}const i=G=>{const b=G?"value":"textContent",{options:m,multiple:B}=A;return B?Array.prototype.filter.call(m,o=>o.selected).map(o=>o[b]):m.selectedIndex===-1?null:m[m.selectedIndex][b]};let d=i(!1);const s=G=>{const b=G.target.options;return Array.prototype.map.call(b,m=>({displayValue:m.textContent,exportValue:m.value}))};return this.enableScripting&&this.hasJSActions?(A.addEventListener("updatefromsandbox",G=>{const b={value(m){Z?.();const B=m.detail.value,o=new Set(Array.isArray(B)?B:[B]);for(const W of A.options)W.selected=o.has(W.value);I.setValue(g,{value:i(!0)}),d=i(!1)},multipleSelection(m){A.multiple=!0},remove(m){const B=A.options,o=m.detail.remove;B[o].selected=!1,A.remove(o),B.length>0&&Array.prototype.findIndex.call(B,Y=>Y.selected)===-1&&(B[0].selected=!0),I.setValue(g,{value:i(!0),items:s(m)}),d=i(!1)},clear(m){for(;A.length!==0;)A.remove(0);I.setValue(g,{value:null,items:[]}),d=i(!1)},insert(m){const{index:B,displayValue:o,exportValue:W}=m.detail.insert,Y=A.children[B],w=document.createElement("option");w.textContent=o,w.value=W,Y?Y.before(w):A.append(w),I.setValue(g,{value:i(!0),items:s(m)}),d=i(!1)},items(m){const{items:B}=m.detail;for(;A.length!==0;)A.remove(0);for(const o of B){const{displayValue:W,exportValue:Y}=o,w=document.createElement("option");w.textContent=W,w.value=Y,A.append(w)}A.options.length>0&&(A.options[0].selected=!0),I.setValue(g,{value:i(!0),items:s(m)}),d=i(!1)},indices(m){const B=new Set(m.detail.indices);for(const o of m.target.options)o.selected=B.has(o.index);I.setValue(g,{value:i(!0)}),d=i(!1)},editable(m){m.target.disabled=!m.detail.editable}};this._dispatchEventFromSandbox(b,G)}),A.addEventListener("input",G=>{const b=i(!0),m=i(!1);I.setValue(g,{value:b}),G.preventDefault(),this.linkService.eventBus?.dispatch("dispatcheventinsandbox",{source:this,detail:{id:g,name:"Keystroke",value:d,change:m,changeEx:b,willCommit:!1,commitKey:1,keyDown:!1}})}),this._setEventListeners(A,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],G=>G.target.value)):A.addEventListener("input",function(G){I.setValue(g,{value:i(!0)})}),this.data.combo&&this._setTextStyle(A),this._setBackgroundColor(A),this._setDefaultPropertiesFromJS(A),this.container.append(A),this.container}}class aC extends E{constructor(I){const{data:g,elements:C}=I;super(I,{isRenderable:E._hasPopupData(g)}),this.elements=C,this.popup=null}render(){const{container:I}=this;I.classList.add("popupAnnotation"),I.role="comment";const g=this.popup=new mZ({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate||this.data.creationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),C=[];for(const A of this.elements)A.popup=g,A.container.ariaHasPopup="dialog",C.push(A.data.id),A.addHighlightArea();return this.container.setAttribute("aria-controls",C.map(A=>`${$g}${A}`).join(",")),this.container}}class mZ{#I=this.#e.bind(this);#g=this.#K.bind(this);#C=this.#H.bind(this);#A=this.#M.bind(this);#Z=null;#l=null;#i=null;#d=null;#c=null;#G=null;#m=null;#s=!1;#W=null;#w=null;#B=null;#b=null;#o=null;#a=null;#Y=null;#N=!1;constructor({container:I,color:g,elements:C,titleObj:A,modificationDate:l,contentsObj:Z,richText:i,parent:d,rect:s,parentRect:G,open:b}){this.#l=I,this.#a=A,this.#i=Z,this.#o=i,this.#G=d,this.#Z=g,this.#b=s,this.#m=G,this.#c=C,this.#d=CC.toDateObject(l),this.trigger=C.flatMap(m=>m.getElementsToTriggerPopup()),this.#R(),this.#l.hidden=!0,b&&this.#M()}#R(){if(this.#w)return;this.#w=new AbortController;const{signal:I}=this.#w;for(const g of this.trigger)g.addEventListener("click",this.#A,{signal:I}),g.addEventListener("mouseenter",this.#C,{signal:I}),g.addEventListener("mouseleave",this.#g,{signal:I}),g.classList.add("popupTriggerArea");for(const g of this.#c)g.container?.addEventListener("keydown",this.#I,{signal:I})}render(){if(this.#W)return;const I=this.#W=document.createElement("div");if(I.className="popup",this.#Z){const A=I.style.outlineColor=t.makeHexColor(...this.#Z);I.style.backgroundColor=`color-mix(in srgb, ${A} 30%, white)`}const g=document.createElement("span");if(g.className="header",this.#a?.str){const A=document.createElement("span");A.className="title",g.append(A),{dir:A.dir,str:A.textContent}=this.#a}if(I.append(g),this.#d){const A=document.createElement("time");A.className="popupDate",A.setAttribute("data-l10n-id","pdfjs-annotation-date-time-string"),A.setAttribute("data-l10n-args",JSON.stringify({dateObj:this.#d.valueOf()})),A.dateTime=this.#d.toISOString(),g.append(A)}const C=this.#h;if(C)VA.render({xfaHtml:C,intent:"richText",div:I}),I.lastChild.classList.add("richText","popupContent");else{const A=this._formatContents(this.#i);I.append(A)}this.#l.append(I)}get#h(){const I=this.#o,g=this.#i;return I?.str&&(!g?.str||g.str===I.str)&&this.#o.html||null}get#n(){return this.#h?.attributes?.style?.fontSize||0}get#t(){return this.#h?.attributes?.style?.color||null}#X(I){const g=[],C={str:I,html:{name:"div",attributes:{dir:"auto"},children:[{name:"p",children:g}]}},A={style:{color:this.#t,fontSize:this.#n?`calc(${this.#n}px * var(--total-scale-factor))`:""}};for(const l of I.split(`
`))g.push({name:"span",value:l,attributes:A});return C}_formatContents({str:I,dir:g}){const C=document.createElement("p");C.classList.add("popupContent"),C.dir=g;const A=I.split(/(?:\r\n?|\n)/);for(let l=0,Z=A.length;l<Z;++l){const i=A[l];C.append(document.createTextNode(i)),l<Z-1&&C.append(document.createElement("br"))}return C}#e(I){I.altKey||I.shiftKey||I.ctrlKey||I.metaKey||(I.key==="Enter"||I.key==="Escape"&&this.#s)&&this.#M()}updateEdited({rect:I,popup:g,deleted:C}){if(C||g?.deleted){this.remove();return}this.#R(),this.#Y||={contentsObj:this.#i,richText:this.#o},I&&(this.#B=null),g&&(this.#o=this.#X(g.text),this.#d=CC.toDateObject(g.date),this.#i=null),this.#W?.remove(),this.#W=null}resetEdited(){this.#Y&&({contentsObj:this.#i,richText:this.#o}=this.#Y,this.#Y=null,this.#W?.remove(),this.#W=null,this.#B=null)}remove(){this.#w?.abort(),this.#w=null,this.#W?.remove(),this.#W=null,this.#N=!1,this.#s=!1;for(const I of this.trigger)I.classList.remove("popupTriggerArea")}#u(){if(this.#B!==null)return;const{page:{view:I},viewport:{rawDims:{pageWidth:g,pageHeight:C,pageX:A,pageY:l}}}=this.#G;let Z=!!this.#m,i=Z?this.#m:this.#b;for(const o of this.#c)if(!i||t.intersect(o.data.rect,i)!==null){i=o.data.rect,Z=!0;break}const d=t.normalizeRect([i[0],I[3]-i[1]+I[1],i[2],I[3]-i[3]+I[1]]),G=Z?i[2]-i[0]+5:0,b=d[0]+G,m=d[1];this.#B=[100*(b-A)/g,100*(m-l)/C];const{style:B}=this.#l;B.left=`${this.#B[0]}%`,B.top=`${this.#B[1]}%`}#M(){this.#s=!this.#s,this.#s?(this.#H(),this.#l.addEventListener("click",this.#A),this.#l.addEventListener("keydown",this.#I)):(this.#K(),this.#l.removeEventListener("click",this.#A),this.#l.removeEventListener("keydown",this.#I))}#H(){this.#W||this.render(),this.isVisible?this.#s&&this.#l.classList.add("focused"):(this.#u(),this.#l.hidden=!1,this.#l.style.zIndex=parseInt(this.#l.style.zIndex)+1e3)}#K(){this.#l.classList.remove("focused"),!(this.#s||!this.isVisible)&&(this.#l.hidden=!0,this.#l.style.zIndex=parseInt(this.#l.style.zIndex)-1e3)}forceHide(){this.#N=this.isVisible,this.#N&&(this.#l.hidden=!0)}maybeShow(){this.#R(),this.#N&&(this.#W||this.#H(),this.#N=!1,this.#l.hidden=!1)}get isVisible(){return this.#l.hidden===!1}}class XA extends E{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),this.textContent=I.data.textContent,this.textPosition=I.data.textPosition,this.annotationEditorType=p.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const I=document.createElement("div");I.classList.add("annotationTextContent"),I.setAttribute("role","comment");for(const g of this.textContent){const C=document.createElement("span");C.textContent=g,I.append(C)}this.container.append(I)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}class BZ extends E{#I=null;constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("lineAnnotation");const{data:I,width:g,height:C}=this,A=this.svgFactory.create(g,C,!0),l=this.#I=this.svgFactory.createElement("svg:line");return l.setAttribute("x1",I.rect[2]-I.lineCoordinates[0]),l.setAttribute("y1",I.rect[3]-I.lineCoordinates[1]),l.setAttribute("x2",I.rect[2]-I.lineCoordinates[2]),l.setAttribute("y2",I.rect[3]-I.lineCoordinates[3]),l.setAttribute("stroke-width",I.borderStyle.width||1),l.setAttribute("stroke","transparent"),l.setAttribute("fill","transparent"),A.append(l),this.container.append(A),!I.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#I}addHighlightArea(){this.container.classList.add("highlightArea")}}class WZ extends E{#I=null;constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("squareAnnotation");const{data:I,width:g,height:C}=this,A=this.svgFactory.create(g,C,!0),l=I.borderStyle.width,Z=this.#I=this.svgFactory.createElement("svg:rect");return Z.setAttribute("x",l/2),Z.setAttribute("y",l/2),Z.setAttribute("width",g-l),Z.setAttribute("height",C-l),Z.setAttribute("stroke-width",l||1),Z.setAttribute("stroke","transparent"),Z.setAttribute("fill","transparent"),A.append(Z),this.container.append(A),!I.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#I}addHighlightArea(){this.container.classList.add("highlightArea")}}class oZ extends E{#I=null;constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0})}render(){this.container.classList.add("circleAnnotation");const{data:I,width:g,height:C}=this,A=this.svgFactory.create(g,C,!0),l=I.borderStyle.width,Z=this.#I=this.svgFactory.createElement("svg:ellipse");return Z.setAttribute("cx",g/2),Z.setAttribute("cy",C/2),Z.setAttribute("rx",g/2-l/2),Z.setAttribute("ry",C/2-l/2),Z.setAttribute("stroke-width",l||1),Z.setAttribute("stroke","transparent"),Z.setAttribute("fill","transparent"),A.append(Z),this.container.append(A),!I.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#I}addHighlightArea(){this.container.classList.add("highlightArea")}}class nA extends E{#I=null;constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const{data:{rect:I,vertices:g,borderStyle:C,popupRef:A},width:l,height:Z}=this;if(!g)return this.container;const i=this.svgFactory.create(l,Z,!0);let d=[];for(let G=0,b=g.length;G<b;G+=2){const m=g[G]-I[0],B=I[3]-g[G+1];d.push(`${m},${B}`)}d=d.join(" ");const s=this.#I=this.svgFactory.createElement(this.svgElementName);return s.setAttribute("points",d),s.setAttribute("stroke-width",C.width||1),s.setAttribute("stroke","transparent"),s.setAttribute("fill","transparent"),i.append(s),this.container.append(i),!A&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return this.#I}addHighlightArea(){this.container.classList.add("highlightArea")}}class wZ extends nA{constructor(I){super(I),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class YZ extends E{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class VC extends E{#I=null;#g=[];constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=this.data.it==="InkHighlight"?p.HIGHLIGHT:p.INK}#C(I,g){switch(I){case 90:return{transform:`rotate(90) translate(${-g[0]},${g[1]}) scale(1,-1)`,width:g[3]-g[1],height:g[2]-g[0]};case 180:return{transform:`rotate(180) translate(${-g[2]},${g[1]}) scale(1,-1)`,width:g[2]-g[0],height:g[3]-g[1]};case 270:return{transform:`rotate(270) translate(${-g[2]},${g[3]}) scale(1,-1)`,width:g[3]-g[1],height:g[2]-g[0]};default:return{transform:`translate(${-g[0]},${g[3]}) scale(1,-1)`,width:g[2]-g[0],height:g[3]-g[1]}}}render(){this.container.classList.add(this.containerClassName);const{data:{rect:I,rotation:g,inkLists:C,borderStyle:A,popupRef:l}}=this,{transform:Z,width:i,height:d}=this.#C(g,I),s=this.svgFactory.create(i,d,!0),G=this.#I=this.svgFactory.createElement("svg:g");s.append(G),G.setAttribute("stroke-width",A.width||1),G.setAttribute("stroke-linecap","round"),G.setAttribute("stroke-linejoin","round"),G.setAttribute("stroke-miterlimit",10),G.setAttribute("stroke","transparent"),G.setAttribute("fill","transparent"),G.setAttribute("transform",Z);for(let b=0,m=C.length;b<m;b++){const B=this.svgFactory.createElement(this.svgElementName);this.#g.push(B),B.setAttribute("points",C[b].join(",")),G.append(B)}return!l&&this.hasPopupData&&this._createPopup(),this.container.append(s),this._editOnDoubleClick(),this.container}updateEdited(I){super.updateEdited(I);const{thickness:g,points:C,rect:A}=I,l=this.#I;if(g>=0&&l.setAttribute("stroke-width",g||1),C)for(let Z=0,i=this.#g.length;Z<i;Z++)this.#g[Z].setAttribute("points",C[Z].join(","));if(A){const{transform:Z,width:i,height:d}=this.#C(this.data.rotation,A);l.parentElement.setAttribute("viewBox",`0 0 ${i} ${d}`),l.setAttribute("transform",Z)}}getElementsToTriggerPopup(){return this.#g}addHighlightArea(){this.container.classList.add("highlightArea")}}class yA extends E{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0}),this.annotationEditorType=p.HIGHLIGHT}render(){const{data:{overlaidText:I,popupRef:g}}=this;if(!g&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this._editOnDoubleClick(),I){const C=document.createElement("mark");C.classList.add("overlaidText"),C.textContent=I,this.container.append(C)}return this.container}}class hZ extends E{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){const{data:{overlaidText:I,popupRef:g}}=this;if(!g&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),I){const C=document.createElement("u");C.classList.add("overlaidText"),C.textContent=I,this.container.append(C)}return this.container}}class aZ extends E{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){const{data:{overlaidText:I,popupRef:g}}=this;if(!g&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),I){const C=document.createElement("u");C.classList.add("overlaidText"),C.textContent=I,this.container.append(C)}return this.container}}class VZ extends E{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){const{data:{overlaidText:I,popupRef:g}}=this;if(!g&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),I){const C=document.createElement("s");C.classList.add("overlaidText"),C.textContent=I,this.container.append(C)}return this.container}}class HA extends E{constructor(I){super(I,{isRenderable:!0,ignoreBorder:!0}),this.annotationEditorType=p.STAMP}render(){return this.container.classList.add("stampAnnotation"),this.container.setAttribute("role","img"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}class NZ extends E{#I=null;constructor(I){super(I,{isRenderable:!0});const{file:g}=this.data;this.filename=g.filename,this.content=g.content,this.linkService.eventBus?.dispatch("fileattachmentannotation",{source:this,...g})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:I,data:g}=this;let C;g.hasAppearance||g.fillAlpha===0?C=document.createElement("div"):(C=document.createElement("img"),C.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(g.name)?"paperclip":"pushpin"}.svg`,g.fillAlpha&&g.fillAlpha<1&&(C.style=`filter: opacity(${Math.round(g.fillAlpha*100)}%);`)),C.addEventListener("dblclick",this.#g.bind(this)),this.#I=C;const{isMac:A}=ZI.platform;return I.addEventListener("keydown",l=>{l.key==="Enter"&&(A?l.metaKey:l.ctrlKey)&&this.#g()}),!g.popupRef&&this.hasPopupData?this._createPopup():C.classList.add("popupTriggerArea"),I.append(C),I}getElementsToTriggerPopup(){return this.#I}addHighlightArea(){this.container.classList.add("highlightArea")}#g(){this.downloadManager?.openOrDownloadData(this.content,this.filename)}}class NC{#I=null;#g=null;#C=new Map;#A=null;constructor({div:I,accessibilityManager:g,annotationCanvasMap:C,annotationEditorUIManager:A,page:l,viewport:Z,structTreeLayer:i}){this.div=I,this.#I=g,this.#g=C,this.#A=i||null,this.page=l,this.viewport=Z,this.zIndex=0,this._annotationEditorUIManager=A}hasEditableAnnotations(){return this.#C.size>0}async#Z(I,g,C){const A=I.firstChild||I,l=A.id=`${$g}${g}`,Z=await this.#A?.getAriaAttributes(l);if(Z)for(const[i,d]of Z)A.setAttribute(i,d);C?C.at(-1).container.after(I):(this.div.append(I),this.#I?.moveElementInDOM(this.div,I,A,!1))}async render(I){const{annotations:g}=I,C=this.div;jI(C,this.viewport);const A=new Map,l={data:null,layer:C,linkService:I.linkService,downloadManager:I.downloadManager,imageResourcesPath:I.imageResourcesPath||"",renderForms:I.renderForms!==!1,svgFactory:new Qg,annotationStorage:I.annotationStorage||new dC,enableScripting:I.enableScripting===!0,hasJSActions:I.hasJSActions,fieldObjects:I.fieldObjects,parent:this,elements:null};for(const Z of g){if(Z.noHTML)continue;const i=Z.annotationType===q.POPUP;if(i){const G=A.get(Z.id);if(!G)continue;l.elements=G}else if(Z.rect[2]===Z.rect[0]||Z.rect[3]===Z.rect[1])continue;l.data=Z;const d=NA.create(l);if(!d.isRenderable)continue;if(!i&&Z.popupRef){const G=A.get(Z.popupRef);G?G.push(d):A.set(Z.popupRef,[d])}const s=d.render();Z.hidden&&(s.style.visibility="hidden"),await this.#Z(s,Z.id,l.elements),d._isEditable&&(this.#C.set(d.data.id,d),this._annotationEditorUIManager?.renderAnnotationElement(d))}this.#l()}async addLinkAnnotations(I,g){const C={data:null,layer:this.div,linkService:g,svgFactory:new Qg,parent:this};for(const A of I){A.borderStyle||=NC._defaultBorderStyle,C.data=A;const l=NA.create(C);if(!l.isRenderable)continue;const Z=l.render();await this.#Z(Z,A.id,null)}}update({viewport:I}){const g=this.div;this.viewport=I,jI(g,{rotation:I.rotation}),this.#l(),g.hidden=!1}#l(){if(!this.#g)return;const I=this.div;for(const[g,C]of this.#g){const A=I.querySelector(`[data-annotation-id="${g}"]`);if(!A)continue;C.className="annotationContent";const{firstChild:l}=A;l?l.nodeName==="CANVAS"?l.replaceWith(C):l.classList.contains("annotationContent")?l.after(C):l.before(C):A.append(C);const Z=this.#C.get(g);Z&&(Z._hasNoCanvas?(this._annotationEditorUIManager?.setMissingCanvas(g,A.id,C),Z._hasNoCanvas=!1):Z.canvas=C)}this.#g.clear()}getEditableAnnotations(){return Array.from(this.#C.values())}getEditableAnnotation(I){return this.#C.get(I)}static get _defaultBorderStyle(){return J(this,"_defaultBorderStyle",Object.freeze({width:1,rawWidth:1,style:fI.SOLID,dashArray:[3],horizontalCornerRadius:0,verticalCornerRadius:0}))}}const jg=/\r\n?|\n/g;class CI extends D{#I;#g="";#C=`${this.id}-editor`;#A=null;#Z;_colorPicker=null;static _freeTextDefaultContent="";static _internalPadding=0;static _defaultColor=null;static _defaultFontSize=10;static get _keyboardManager(){const I=CI.prototype,g=l=>l.isEmpty(),C=JI.TRANSLATE_SMALL,A=JI.TRANSLATE_BIG;return J(this,"_keyboardManager",new mg([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],I.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],I.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],I._translateEmpty,{args:[-C,0],checker:g}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],I._translateEmpty,{args:[-A,0],checker:g}],[["ArrowRight","mac+ArrowRight"],I._translateEmpty,{args:[C,0],checker:g}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],I._translateEmpty,{args:[A,0],checker:g}],[["ArrowUp","mac+ArrowUp"],I._translateEmpty,{args:[0,-C],checker:g}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],I._translateEmpty,{args:[0,-A],checker:g}],[["ArrowDown","mac+ArrowDown"],I._translateEmpty,{args:[0,C],checker:g}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],I._translateEmpty,{args:[0,A],checker:g}]]))}static _type="freetext";static _editorType=p.FREETEXT;constructor(I){super({...I,name:"freeTextEditor"}),this.#I=I.color||CI._defaultColor||D._defaultLineColor,this.#Z=I.fontSize||CI._defaultFontSize,this.annotationElementId||this._uiManager.a11yAlert("pdfjs-editor-freetext-added-alert")}static initialize(I,g){D.initialize(I,g);const C=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(C.getPropertyValue("--freetext-padding"))}static updateDefaultParams(I,g){switch(I){case k.FREETEXT_SIZE:CI._defaultFontSize=g;break;case k.FREETEXT_COLOR:CI._defaultColor=g;break}}updateParams(I,g){switch(I){case k.FREETEXT_SIZE:this.#l(g);break;case k.FREETEXT_COLOR:this.#i(g);break}}static get defaultPropertiesToUpdate(){return[[k.FREETEXT_SIZE,CI._defaultFontSize],[k.FREETEXT_COLOR,CI._defaultColor||D._defaultLineColor]]}get propertiesToUpdate(){return[[k.FREETEXT_SIZE,this.#Z],[k.FREETEXT_COLOR,this.#I]]}get toolbarButtons(){return this._colorPicker||=new ag(this),[["colorPicker",this._colorPicker]]}get colorType(){return k.FREETEXT_COLOR}get colorValue(){return this.#I}#l(I){const g=A=>{this.editorDiv.style.fontSize=`calc(${A}px * var(--total-scale-factor))`,this.translate(0,-(A-this.#Z)*this.parentScale),this.#Z=A,this.#c()},C=this.#Z;this.addCommands({cmd:g.bind(this,I),undo:g.bind(this,C),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:k.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})}#i(I){const g=A=>{this.#I=this.editorDiv.style.color=A,this._colorPicker?.update(A)},C=this.#I;this.addCommands({cmd:g.bind(this,I),undo:g.bind(this,C),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:k.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})}_translateEmpty(I,g){this._uiManager.translateSelectedEditors(I,g,!0)}getInitialTranslation(){const I=this.parentScale;return[-CI._internalPadding*I,-(CI._internalPadding+this.#Z)*I]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){if(!super.enableEditMode())return!1;this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),this.#A=new AbortController;const I=this._uiManager.combinedSignal(this.#A);return this.editorDiv.addEventListener("keydown",this.editorDivKeydown.bind(this),{signal:I}),this.editorDiv.addEventListener("focus",this.editorDivFocus.bind(this),{signal:I}),this.editorDiv.addEventListener("blur",this.editorDivBlur.bind(this),{signal:I}),this.editorDiv.addEventListener("input",this.editorDivInput.bind(this),{signal:I}),this.editorDiv.addEventListener("paste",this.editorDivPaste.bind(this),{signal:I}),!0}disableEditMode(){return super.disableEditMode()?(this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",this.#C),this._isDraggable=!0,this.#A?.abort(),this.#A=null,this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freetextEditing"),!0):!1}focusin(I){this._focusEventsAllowed&&(super.focusin(I),I.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(I){this.width||(this.enableEditMode(),I&&this.editorDiv.focus(),this._initialOptions?.isCentered&&this.center(),this._initialOptions=null)}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freetextEditing")),super.remove()}#d(){const I=[];this.editorDiv.normalize();let g=null;for(const C of this.editorDiv.childNodes)g?.nodeType===Node.TEXT_NODE&&C.nodeName==="BR"||(I.push(CI.#G(C)),g=C);return I.join(`
`)}#c(){const[I,g]=this.parentDimensions;let C;if(this.isAttachedToDOM)C=this.div.getBoundingClientRect();else{const{currentLayer:A,div:l}=this,Z=l.style.display,i=l.classList.contains("hidden");l.classList.remove("hidden"),l.style.display="hidden",A.div.append(this.div),C=l.getBoundingClientRect(),l.remove(),l.style.display=Z,l.classList.toggle("hidden",i)}this.rotation%180===this.parentRotation%180?(this.width=C.width/I,this.height=C.height/g):(this.width=C.height/I,this.height=C.width/g),this.fixAndSetPosition()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const I=this.#g,g=this.#g=this.#d().trimEnd();if(I===g)return;const C=A=>{if(this.#g=A,!A){this.remove();return}this.#m(),this._uiManager.rebuild(this),this.#c()};this.addCommands({cmd:()=>{C(g)},undo:()=>{C(I)},mustExec:!1}),this.#c()}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}keydown(I){I.target===this.div&&I.key==="Enter"&&(this.enterInEditMode(),I.preventDefault())}editorDivKeydown(I){CI._keyboardManager.exec(this,I)}editorDivFocus(I){this.isEditing=!0}editorDivBlur(I){this.isEditing=!1}editorDivInput(I){this.parent.div.classList.toggle("freetextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}get canChangeContent(){return!0}render(){if(this.div)return this.div;let I,g;(this._isCopy||this.annotationElementId)&&(I=this.x,g=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",this.#C),this.editorDiv.setAttribute("data-l10n-id","pdfjs-free-text2"),this.editorDiv.setAttribute("data-l10n-attrs","default-content"),this.enableEditing(),this.editorDiv.contentEditable=!0;const{style:C}=this.editorDiv;if(C.fontSize=`calc(${this.#Z}px * var(--total-scale-factor))`,C.color=this.#I,this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),this._isCopy||this.annotationElementId){const[A,l]=this.parentDimensions;if(this.annotationElementId){const{position:Z}=this._initialData;let[i,d]=this.getInitialTranslation();[i,d]=this.pageTranslationToScreen(i,d);const[s,G]=this.pageDimensions,[b,m]=this.pageTranslation;let B,o;switch(this.rotation){case 0:B=I+(Z[0]-b)/s,o=g+this.height-(Z[1]-m)/G;break;case 90:B=I+(Z[0]-b)/s,o=g-(Z[1]-m)/G,[i,d]=[d,-i];break;case 180:B=I-this.width+(Z[0]-b)/s,o=g-(Z[1]-m)/G,[i,d]=[-i,-d];break;case 270:B=I+(Z[0]-b-this.height*G)/s,o=g+(Z[1]-m-this.width*s)/G,[i,d]=[-d,i];break}this.setAt(B*A,o*l,i,d)}else this._moveAfterPaste(I,g);this.#m(),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}static#G(I){return(I.nodeType===Node.TEXT_NODE?I.nodeValue:I.innerText).replaceAll(jg,"")}editorDivPaste(I){const g=I.clipboardData||window.clipboardData,{types:C}=g;if(C.length===1&&C[0]==="text/plain")return;I.preventDefault();const A=CI.#W(g.getData("text")||"").replaceAll(jg,`
`);if(!A)return;const l=window.getSelection();if(!l.rangeCount)return;this.editorDiv.normalize(),l.deleteFromDocument();const Z=l.getRangeAt(0);if(!A.includes(`
`)){Z.insertNode(document.createTextNode(A)),this.editorDiv.normalize(),l.collapseToStart();return}const{startContainer:i,startOffset:d}=Z,s=[],G=[];if(i.nodeType===Node.TEXT_NODE){const B=i.parentElement;if(G.push(i.nodeValue.slice(d).replaceAll(jg,"")),B!==this.editorDiv){let o=s;for(const W of this.editorDiv.childNodes){if(W===B){o=G;continue}o.push(CI.#G(W))}}s.push(i.nodeValue.slice(0,d).replaceAll(jg,""))}else if(i===this.editorDiv){let B=s,o=0;for(const W of this.editorDiv.childNodes)o++===d&&(B=G),B.push(CI.#G(W))}this.#g=`${s.join(`
`)}${A}${G.join(`
`)}`,this.#m();const b=new Range;let m=Math.sumPrecise(s.map(B=>B.length));for(const{firstChild:B}of this.editorDiv.childNodes)if(B.nodeType===Node.TEXT_NODE){const o=B.nodeValue.length;if(m<=o){b.setStart(B,m),b.setEnd(B,m);break}m-=o}l.removeAllRanges(),l.addRange(b)}#m(){if(this.editorDiv.replaceChildren(),!!this.#g)for(const I of this.#g.split(`
`)){const g=document.createElement("div");g.append(I?document.createTextNode(I):document.createElement("br")),this.editorDiv.append(g)}}#s(){return this.#g.replaceAll(" "," ")}static#W(I){return I.replaceAll(" "," ")}get contentDiv(){return this.editorDiv}static async deserialize(I,g,C){let A=null;if(I instanceof XA){const{data:{defaultAppearanceData:{fontSize:Z,fontColor:i},rect:d,rotation:s,id:G,popupRef:b,contentsObj:m},textContent:B,textPosition:o,parent:{page:{pageNumber:W}}}=I;if(!B||B.length===0)return null;A=I={annotationType:p.FREETEXT,color:Array.from(i),fontSize:Z,value:B.join(`
`),position:o,pageIndex:W-1,rect:d.slice(0),rotation:s,annotationElementId:G,id:G,deleted:!1,popupRef:b,comment:m?.str||null}}const l=await super.deserialize(I,g,C);return l.#Z=I.fontSize,l.#I=t.makeHexColor(...I.color),l.#g=CI.#W(I.value),l._initialData=A,I.comment&&l.setCommentData(I.comment),l}serialize(I=!1){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const g=CI._internalPadding*this.parentScale,C=this.getRect(g,g),A=D._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:this.#I),l={annotationType:p.FREETEXT,color:A,fontSize:this.#Z,value:this.#s(),pageIndex:this.pageIndex,rect:C,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return this.addComment(l),I?(l.isCopy=!0,l):this.annotationElementId&&!this.#w(l)?null:(l.id=this.annotationElementId,l)}#w(I){const{value:g,fontSize:C,color:A,pageIndex:l}=this._initialData;return this.hasEditedComment||this._hasBeenMoved||I.value!==g||I.fontSize!==C||I.color.some((Z,i)=>Z!==A[i])||I.pageIndex!==l}renderAnnotationElement(I){const g=super.renderAnnotationElement(I),{style:C}=g;C.fontSize=`calc(${this.#Z}px * var(--total-scale-factor))`,C.color=this.#I,g.replaceChildren();for(const Z of this.#g.split(`
`)){const i=document.createElement("div");i.append(Z?document.createTextNode(Z):document.createElement("br")),g.append(i)}const A=CI._internalPadding*this.parentScale,l={rect:this.getRect(A,A)};return l.popup=this.hasEditedComment?this.comment:{text:this.#g},I.updateEdited(l),g}resetAnnotationElement(I){super.resetAnnotationElement(I),I.resetEdited()}}class H{static PRECISION=1e-4;toSVGPath(){j("Abstract method `toSVGPath` must be implemented.")}get box(){j("Abstract getter `box` must be implemented.")}serialize(I,g){j("Abstract method `serialize` must be implemented.")}static _rescale(I,g,C,A,l,Z){Z||=new Float32Array(I.length);for(let i=0,d=I.length;i<d;i+=2)Z[i]=g+I[i]*A,Z[i+1]=C+I[i+1]*l;return Z}static _rescaleAndSwap(I,g,C,A,l,Z){Z||=new Float32Array(I.length);for(let i=0,d=I.length;i<d;i+=2)Z[i]=g+I[i+1]*A,Z[i+1]=C+I[i]*l;return Z}static _translate(I,g,C,A){A||=new Float32Array(I.length);for(let l=0,Z=I.length;l<Z;l+=2)A[l]=g+I[l],A[l+1]=C+I[l+1];return A}static svgRound(I){return Math.round(I*1e4)}static _normalizePoint(I,g,C,A,l){switch(l){case 90:return[1-g/C,I/A];case 180:return[1-I/C,1-g/A];case 270:return[g/C,1-I/A];default:return[I/C,g/A]}}static _normalizePagePoint(I,g,C){switch(C){case 90:return[1-g,I];case 180:return[1-I,1-g];case 270:return[g,1-I];default:return[I,g]}}static createBezierPoints(I,g,C,A,l,Z){return[(I+5*C)/6,(g+5*A)/6,(5*C+l)/6,(5*A+Z)/6,(C+l)/2,(A+Z)/2]}}class xI{#I;#g=[];#C;#A;#Z=[];#l=new Float32Array(18);#i;#d;#c;#G;#m;#s;#W=[];static#w=8;static#B=2;static#b=xI.#w+xI.#B;constructor({x:I,y:g},C,A,l,Z,i=0){this.#I=C,this.#s=l*A,this.#A=Z,this.#l.set([NaN,NaN,NaN,NaN,I,g],6),this.#C=i,this.#G=xI.#w*A,this.#c=xI.#b*A,this.#m=A,this.#W.push(I,g)}isEmpty(){return isNaN(this.#l[8])}#o(){const I=this.#l.subarray(4,6),g=this.#l.subarray(16,18),[C,A,l,Z]=this.#I;return[(this.#i+(I[0]-g[0])/2-C)/l,(this.#d+(I[1]-g[1])/2-A)/Z,(this.#i+(g[0]-I[0])/2-C)/l,(this.#d+(g[1]-I[1])/2-A)/Z]}add({x:I,y:g}){this.#i=I,this.#d=g;const[C,A,l,Z]=this.#I;let[i,d,s,G]=this.#l.subarray(8,12);const b=I-s,m=g-G,B=Math.hypot(b,m);if(B<this.#c)return!1;const o=B-this.#G,W=o/B,Y=W*b,w=W*m;let a=i,h=d;i=s,d=G,s+=Y,G+=w,this.#W?.push(I,g);const N=-w/o,V=Y/o,R=N*this.#s,X=V*this.#s;return this.#l.set(this.#l.subarray(2,8),0),this.#l.set([s+R,G+X],4),this.#l.set(this.#l.subarray(14,18),12),this.#l.set([s-R,G-X],16),isNaN(this.#l[6])?(this.#Z.length===0&&(this.#l.set([i+R,d+X],2),this.#Z.push(NaN,NaN,NaN,NaN,(i+R-C)/l,(d+X-A)/Z),this.#l.set([i-R,d-X],14),this.#g.push(NaN,NaN,NaN,NaN,(i-R-C)/l,(d-X-A)/Z)),this.#l.set([a,h,i,d,s,G],6),!this.isEmpty()):(this.#l.set([a,h,i,d,s,G],6),Math.abs(Math.atan2(h-d,a-i)-Math.atan2(w,Y))<Math.PI/2?([i,d,s,G]=this.#l.subarray(2,6),this.#Z.push(NaN,NaN,NaN,NaN,((i+s)/2-C)/l,((d+G)/2-A)/Z),[i,d,a,h]=this.#l.subarray(14,18),this.#g.push(NaN,NaN,NaN,NaN,((a+i)/2-C)/l,((h+d)/2-A)/Z),!0):([a,h,i,d,s,G]=this.#l.subarray(0,6),this.#Z.push(((a+5*i)/6-C)/l,((h+5*d)/6-A)/Z,((5*i+s)/6-C)/l,((5*d+G)/6-A)/Z,((i+s)/2-C)/l,((d+G)/2-A)/Z),[s,G,i,d,a,h]=this.#l.subarray(12,18),this.#g.push(((a+5*i)/6-C)/l,((h+5*d)/6-A)/Z,((5*i+s)/6-C)/l,((5*d+G)/6-A)/Z,((i+s)/2-C)/l,((d+G)/2-A)/Z),!0))}toSVGPath(){if(this.isEmpty())return"";const I=this.#Z,g=this.#g;if(isNaN(this.#l[6])&&!this.isEmpty())return this.#a();const C=[];C.push(`M${I[4]} ${I[5]}`);for(let A=6;A<I.length;A+=6)isNaN(I[A])?C.push(`L${I[A+4]} ${I[A+5]}`):C.push(`C${I[A]} ${I[A+1]} ${I[A+2]} ${I[A+3]} ${I[A+4]} ${I[A+5]}`);this.#N(C);for(let A=g.length-6;A>=6;A-=6)isNaN(g[A])?C.push(`L${g[A+4]} ${g[A+5]}`):C.push(`C${g[A]} ${g[A+1]} ${g[A+2]} ${g[A+3]} ${g[A+4]} ${g[A+5]}`);return this.#Y(C),C.join(" ")}#a(){const[I,g,C,A]=this.#I,[l,Z,i,d]=this.#o();return`M${(this.#l[2]-I)/C} ${(this.#l[3]-g)/A} L${(this.#l[4]-I)/C} ${(this.#l[5]-g)/A} L${l} ${Z} L${i} ${d} L${(this.#l[16]-I)/C} ${(this.#l[17]-g)/A} L${(this.#l[14]-I)/C} ${(this.#l[15]-g)/A} Z`}#Y(I){const g=this.#g;I.push(`L${g[4]} ${g[5]} Z`)}#N(I){const[g,C,A,l]=this.#I,Z=this.#l.subarray(4,6),i=this.#l.subarray(16,18),[d,s,G,b]=this.#o();I.push(`L${(Z[0]-g)/A} ${(Z[1]-C)/l} L${d} ${s} L${G} ${b} L${(i[0]-g)/A} ${(i[1]-C)/l}`)}newFreeDrawOutline(I,g,C,A,l,Z){return new MA(I,g,C,A,l,Z)}getOutlines(){const I=this.#Z,g=this.#g,C=this.#l,[A,l,Z,i]=this.#I,d=new Float32Array((this.#W?.length??0)+2);for(let b=0,m=d.length-2;b<m;b+=2)d[b]=(this.#W[b]-A)/Z,d[b+1]=(this.#W[b+1]-l)/i;if(d[d.length-2]=(this.#i-A)/Z,d[d.length-1]=(this.#d-l)/i,isNaN(C[6])&&!this.isEmpty())return this.#R(d);const s=new Float32Array(this.#Z.length+24+this.#g.length);let G=I.length;for(let b=0;b<G;b+=2){if(isNaN(I[b])){s[b]=s[b+1]=NaN;continue}s[b]=I[b],s[b+1]=I[b+1]}G=this.#n(s,G);for(let b=g.length-6;b>=6;b-=6)for(let m=0;m<6;m+=2){if(isNaN(g[b+m])){s[G]=s[G+1]=NaN,G+=2;continue}s[G]=g[b+m],s[G+1]=g[b+m+1],G+=2}return this.#h(s,G),this.newFreeDrawOutline(s,d,this.#I,this.#m,this.#C,this.#A)}#R(I){const g=this.#l,[C,A,l,Z]=this.#I,[i,d,s,G]=this.#o(),b=new Float32Array(36);return b.set([NaN,NaN,NaN,NaN,(g[2]-C)/l,(g[3]-A)/Z,NaN,NaN,NaN,NaN,(g[4]-C)/l,(g[5]-A)/Z,NaN,NaN,NaN,NaN,i,d,NaN,NaN,NaN,NaN,s,G,NaN,NaN,NaN,NaN,(g[16]-C)/l,(g[17]-A)/Z,NaN,NaN,NaN,NaN,(g[14]-C)/l,(g[15]-A)/Z],0),this.newFreeDrawOutline(b,I,this.#I,this.#m,this.#C,this.#A)}#h(I,g){const C=this.#g;return I.set([NaN,NaN,NaN,NaN,C[4],C[5]],g),g+=6}#n(I,g){const C=this.#l.subarray(4,6),A=this.#l.subarray(16,18),[l,Z,i,d]=this.#I,[s,G,b,m]=this.#o();return I.set([NaN,NaN,NaN,NaN,(C[0]-l)/i,(C[1]-Z)/d,NaN,NaN,NaN,NaN,s,G,NaN,NaN,NaN,NaN,b,m,NaN,NaN,NaN,NaN,(A[0]-l)/i,(A[1]-Z)/d],g),g+=24}}class MA extends H{#I;#g=new Float32Array(4);#C;#A;#Z;#l;#i;constructor(I,g,C,A,l,Z){super(),this.#i=I,this.#Z=g,this.#I=C,this.#l=A,this.#C=l,this.#A=Z,this.lastPoint=[NaN,NaN],this.#d(Z);const[i,d,s,G]=this.#g;for(let b=0,m=I.length;b<m;b+=2)I[b]=(I[b]-i)/s,I[b+1]=(I[b+1]-d)/G;for(let b=0,m=g.length;b<m;b+=2)g[b]=(g[b]-i)/s,g[b+1]=(g[b+1]-d)/G}toSVGPath(){const I=[`M${this.#i[4]} ${this.#i[5]}`];for(let g=6,C=this.#i.length;g<C;g+=6){if(isNaN(this.#i[g])){I.push(`L${this.#i[g+4]} ${this.#i[g+5]}`);continue}I.push(`C${this.#i[g]} ${this.#i[g+1]} ${this.#i[g+2]} ${this.#i[g+3]} ${this.#i[g+4]} ${this.#i[g+5]}`)}return I.push("Z"),I.join(" ")}serialize([I,g,C,A],l){const Z=C-I,i=A-g;let d,s;switch(l){case 0:d=H._rescale(this.#i,I,A,Z,-i),s=H._rescale(this.#Z,I,A,Z,-i);break;case 90:d=H._rescaleAndSwap(this.#i,I,g,Z,i),s=H._rescaleAndSwap(this.#Z,I,g,Z,i);break;case 180:d=H._rescale(this.#i,C,g,-Z,i),s=H._rescale(this.#Z,C,g,-Z,i);break;case 270:d=H._rescaleAndSwap(this.#i,C,A,-Z,-i),s=H._rescaleAndSwap(this.#Z,C,A,-Z,-i);break}return{outline:Array.from(d),points:[Array.from(s)]}}#d(I){const g=this.#i;let C=g[4],A=g[5];const l=[C,A,C,A];let Z=C,i=A;const d=I?Math.max:Math.min;for(let G=6,b=g.length;G<b;G+=6){const m=g[G+4],B=g[G+5];if(isNaN(g[G]))t.pointBoundingBox(m,B,l),i<B?(Z=m,i=B):i===B&&(Z=d(Z,m));else{const o=[1/0,1/0,-1/0,-1/0];t.bezierBoundingBox(C,A,...g.slice(G,G+6),o),t.rectBoundingBox(...o,l),i<o[3]?(Z=o[2],i=o[3]):i===o[3]&&(Z=d(Z,o[2]))}C=m,A=B}const s=this.#g;s[0]=l[0]-this.#C,s[1]=l[1]-this.#C,s[2]=l[2]-l[0]+2*this.#C,s[3]=l[3]-l[1]+2*this.#C,this.lastPoint=[Z,i]}get box(){return this.#g}newOutliner(I,g,C,A,l,Z=0){return new xI(I,g,C,A,l,Z)}getNewOutline(I,g){const[C,A,l,Z]=this.#g,[i,d,s,G]=this.#I,b=l*s,m=Z*G,B=C*s+i,o=A*G+d,W=this.newOutliner({x:this.#Z[0]*b+B,y:this.#Z[1]*m+o},this.#I,this.#l,I,this.#A,g??this.#C);for(let Y=2;Y<this.#Z.length;Y+=2)W.add({x:this.#Z[Y]*b+B,y:this.#Z[Y+1]*m+o});return W.getOutlines()}}class RC{#I;#g;#C=[];#A=[];constructor(I,g=0,C=0,A=!0){const l=[1/0,1/0,-1/0,-1/0],Z=10**-4;for(const{x:B,y:o,width:W,height:Y}of I){const w=Math.floor((B-g)/Z)*Z,a=Math.ceil((B+W+g)/Z)*Z,h=Math.floor((o-g)/Z)*Z,N=Math.ceil((o+Y+g)/Z)*Z,V=[w,h,N,!0],R=[a,h,N,!1];this.#C.push(V,R),t.rectBoundingBox(w,h,a,N,l)}const i=l[2]-l[0]+2*C,d=l[3]-l[1]+2*C,s=l[0]-C,G=l[1]-C,b=this.#C.at(A?-1:-2),m=[b[0],b[2]];for(const B of this.#C){const[o,W,Y]=B;B[0]=(o-s)/i,B[1]=(W-G)/d,B[2]=(Y-G)/d}this.#I=new Float32Array([s,G,i,d]),this.#g=m}getOutlines(){this.#C.sort((g,C)=>g[0]-C[0]||g[1]-C[1]||g[2]-C[2]);const I=[];for(const g of this.#C)g[3]?(I.push(...this.#c(g)),this.#i(g)):(this.#d(g),I.push(...this.#c(g)));return this.#Z(I)}#Z(I){const g=[],C=new Set;for(const Z of I){const[i,d,s]=Z;g.push([i,d,Z],[i,s,Z])}g.sort((Z,i)=>Z[1]-i[1]||Z[0]-i[0]);for(let Z=0,i=g.length;Z<i;Z+=2){const d=g[Z][2],s=g[Z+1][2];d.push(s),s.push(d),C.add(d),C.add(s)}const A=[];let l;for(;C.size>0;){const Z=C.values().next().value;let[i,d,s,G,b]=Z;C.delete(Z);let m=i,B=d;for(l=[i,s],A.push(l);;){let o;if(C.has(G))o=G;else if(C.has(b))o=b;else break;C.delete(o),[i,d,s,G,b]=o,m!==i&&(l.push(m,B,i,B===d?d:s),m=i),B=B===d?s:d}l.push(m,B)}return new RZ(A,this.#I,this.#g)}#l(I){const g=this.#A;let C=0,A=g.length-1;for(;C<=A;){const l=C+A>>1,Z=g[l][0];if(Z===I)return l;Z<I?C=l+1:A=l-1}return A+1}#i([,I,g]){const C=this.#l(I);this.#A.splice(C,0,[I,g])}#d([,I,g]){const C=this.#l(I);for(let A=C;A<this.#A.length;A++){const[l,Z]=this.#A[A];if(l!==I)break;if(l===I&&Z===g){this.#A.splice(A,1);return}}for(let A=C-1;A>=0;A--){const[l,Z]=this.#A[A];if(l!==I)break;if(l===I&&Z===g){this.#A.splice(A,1);return}}}#c(I){const[g,C,A]=I,l=[[g,C,A]],Z=this.#l(A);for(let i=0;i<Z;i++){const[d,s]=this.#A[i];for(let G=0,b=l.length;G<b;G++){const[,m,B]=l[G];if(!(s<=m||B<=d)){if(m>=d){if(B>s)l[G][1]=s;else{if(b===1)return[];l.splice(G,1),G--,b--}continue}l[G][2]=d,B>s&&l.push([g,s,B])}}}return l}}class RZ extends H{#I;#g;constructor(I,g,C){super(),this.#g=I,this.#I=g,this.lastPoint=C}toSVGPath(){const I=[];for(const g of this.#g){let[C,A]=g;I.push(`M${C} ${A}`);for(let l=2;l<g.length;l+=2){const Z=g[l],i=g[l+1];Z===C?(I.push(`V${i}`),A=i):i===A&&(I.push(`H${Z}`),C=Z)}I.push("Z")}return I.join(" ")}serialize([I,g,C,A],l){const Z=[],i=C-I,d=A-g;for(const s of this.#g){const G=new Array(s.length);for(let b=0;b<s.length;b+=2)G[b]=I+s[b]*i,G[b+1]=A-s[b+1]*d;Z.push(G)}return Z}get box(){return this.#I}get classNamesForOutlining(){return["highlightOutline"]}}class XC extends xI{newFreeDrawOutline(I,g,C,A,l,Z){return new XZ(I,g,C,A,l,Z)}}class XZ extends MA{newOutliner(I,g,C,A,l,Z=0){return new XC(I,g,C,A,l,Z)}}class P extends D{#I=null;#g=0;#C;#A=null;#Z=null;#l=null;#i=null;#d=0;#c=null;#G=null;#m=null;#s=!1;#W=null;#w;#B=null;#b="";#o;#a="";static _defaultColor=null;static _defaultOpacity=1;static _defaultThickness=12;static _type="highlight";static _editorType=p.HIGHLIGHT;static _freeHighlightId=-1;static _freeHighlight=null;static _freeHighlightClipId="";static get _keyboardManager(){const I=P.prototype;return J(this,"_keyboardManager",new mg([[["ArrowLeft","mac+ArrowLeft"],I._moveCaret,{args:[0]}],[["ArrowRight","mac+ArrowRight"],I._moveCaret,{args:[1]}],[["ArrowUp","mac+ArrowUp"],I._moveCaret,{args:[2]}],[["ArrowDown","mac+ArrowDown"],I._moveCaret,{args:[3]}]]))}constructor(I){super({...I,name:"highlightEditor"}),this.color=I.color||P._defaultColor,this.#o=I.thickness||P._defaultThickness,this.#w=I.opacity||P._defaultOpacity,this.#C=I.boxes||null,this.#a=I.methodOfCreation||"",this.#b=I.text||"",this._isDraggable=!1,this.defaultL10nId="pdfjs-editor-highlight-editor",I.highlightId>-1?(this.#s=!0,this.#N(I),this.#X()):this.#C&&(this.#I=I.anchorNode,this.#g=I.anchorOffset,this.#i=I.focusNode,this.#d=I.focusOffset,this.#Y(),this.#X(),this.rotate(this.rotation)),this.annotationElementId||this._uiManager.a11yAlert("pdfjs-editor-highlight-added-alert")}get telemetryInitialData(){return{action:"added",type:this.#s?"free_highlight":"highlight",color:this._uiManager.getNonHCMColorName(this.color),thickness:this.#o,methodOfCreation:this.#a}}get telemetryFinalData(){return{type:"highlight",color:this._uiManager.getNonHCMColorName(this.color)}}get commentColor(){return this.color}static computeTelemetryFinalData(I){return{numberOfColors:I.get("color").size}}#Y(){const I=new RC(this.#C,.001);this.#G=I.getOutlines(),[this.x,this.y,this.width,this.height]=this.#G.box;const g=new RC(this.#C,.0025,.001,this._uiManager.direction==="ltr");this.#l=g.getOutlines();const{lastPoint:C}=this.#l;this.#W=[(C[0]-this.x)/this.width,(C[1]-this.y)/this.height]}#N({highlightOutlines:I,highlightId:g,clipPathId:C}){this.#G=I;const A=1.5;if(this.#l=I.getNewOutline(this.#o/2+A,.0025),g>=0)this.#m=g,this.#A=C,this.parent.drawLayer.finalizeDraw(g,{bbox:I.box,path:{d:I.toSVGPath()}}),this.#B=this.parent.drawLayer.drawOutline({rootClass:{highlightOutline:!0,free:!0},bbox:this.#l.box,path:{d:this.#l.toSVGPath()}},!0);else if(this.parent){const G=this.parent.viewport.rotation;this.parent.drawLayer.updateProperties(this.#m,{bbox:P.#e(this.#G.box,(G-this.rotation+360)%360),path:{d:I.toSVGPath()}}),this.parent.drawLayer.updateProperties(this.#B,{bbox:P.#e(this.#l.box,G),path:{d:this.#l.toSVGPath()}})}const[l,Z,i,d]=I.box;switch(this.rotation){case 0:this.x=l,this.y=Z,this.width=i,this.height=d;break;case 90:{const[G,b]=this.parentDimensions;this.x=Z,this.y=1-l,this.width=i*b/G,this.height=d*G/b;break}case 180:this.x=1-l,this.y=1-Z,this.width=i,this.height=d;break;case 270:{const[G,b]=this.parentDimensions;this.x=1-Z,this.y=l,this.width=i*b/G,this.height=d*G/b;break}}const{lastPoint:s}=this.#l;this.#W=[(s[0]-l)/i,(s[1]-Z)/d]}static initialize(I,g){D.initialize(I,g),P._defaultColor||=g.highlightColors?.values().next().value||"#fff066"}static updateDefaultParams(I,g){switch(I){case k.HIGHLIGHT_COLOR:P._defaultColor=g;break;case k.HIGHLIGHT_THICKNESS:P._defaultThickness=g;break}}translateInPage(I,g){}get toolbarPosition(){return this.#W}updateParams(I,g){switch(I){case k.HIGHLIGHT_COLOR:this.#R(g);break;case k.HIGHLIGHT_THICKNESS:this.#h(g);break}}static get defaultPropertiesToUpdate(){return[[k.HIGHLIGHT_COLOR,P._defaultColor],[k.HIGHLIGHT_THICKNESS,P._defaultThickness]]}get propertiesToUpdate(){return[[k.HIGHLIGHT_COLOR,this.color||P._defaultColor],[k.HIGHLIGHT_THICKNESS,this.#o||P._defaultThickness],[k.HIGHLIGHT_FREE,this.#s]]}#R(I){const g=(l,Z)=>{this.color=l,this.#w=Z,this.parent?.drawLayer.updateProperties(this.#m,{root:{fill:l,"fill-opacity":Z}}),this.#Z?.updateColor(l)},C=this.color,A=this.#w;this.addCommands({cmd:g.bind(this,I,P._defaultOpacity),undo:g.bind(this,C,A),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:k.HIGHLIGHT_COLOR,overwriteIfSameType:!0,keepUndo:!0}),this._reportTelemetry({action:"color_changed",color:this._uiManager.getNonHCMColorName(I)},!0)}#h(I){const g=this.#o,C=A=>{this.#o=A,this.#n(A)};this.addCommands({cmd:C.bind(this,I),undo:C.bind(this,g),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:k.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0}),this._reportTelemetry({action:"thickness_changed",thickness:I},!0)}get toolbarButtons(){return this._uiManager.highlightColors?[["colorPicker",this.#Z=new VI({editor:this})]]:super.toolbarButtons}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}fixAndSetPosition(){return super.fixAndSetPosition(this.#H())}getBaseTranslation(){return[0,0]}getRect(I,g){return super.getRect(I,g,this.#H())}onceAdded(I){this.annotationElementId||this.parent.addUndoableEditor(this),I&&this.div.focus()}remove(){this.#t(),this._reportTelemetry({action:"deleted"}),super.remove()}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.#X(),this.isAttachedToDOM||this.parent.add(this)))}setParent(I){let g=!1;this.parent&&!I?this.#t():I&&(this.#X(I),g=!this.parent&&this.div?.classList.contains("selectedEditor")),super.setParent(I),this.show(this._isVisible),g&&this.select()}#n(I){if(!this.#s)return;this.#N({highlightOutlines:this.#G.getNewOutline(I/2)}),this.fixAndSetPosition();const[g,C]=this.parentDimensions;this.setDims(this.width*g,this.height*C)}#t(){this.#m===null||!this.parent||(this.parent.drawLayer.remove(this.#m),this.#m=null,this.parent.drawLayer.remove(this.#B),this.#B=null)}#X(I=this.parent){this.#m===null&&({id:this.#m,clipPathId:this.#A}=I.drawLayer.draw({bbox:this.#G.box,root:{viewBox:"0 0 1 1",fill:this.color,"fill-opacity":this.#w},rootClass:{highlight:!0,free:this.#s},path:{d:this.#G.toSVGPath()}},!1,!0),this.#B=I.drawLayer.drawOutline({rootClass:{highlightOutline:!0,free:this.#s},bbox:this.#l.box,path:{d:this.#l.toSVGPath()}},this.#s),this.#c&&(this.#c.style.clipPath=this.#A))}static#e([I,g,C,A],l){switch(l){case 90:return[1-g-A,I,A,C];case 180:return[1-I-C,1-g-A,C,A];case 270:return[g,1-I-C,A,C]}return[I,g,C,A]}rotate(I){const{drawLayer:g}=this.parent;let C;this.#s?(I=(I-this.rotation+360)%360,C=P.#e(this.#G.box,I)):C=P.#e([this.x,this.y,this.width,this.height],I),g.updateProperties(this.#m,{bbox:C,root:{"data-main-rotation":I}}),g.updateProperties(this.#B,{bbox:P.#e(this.#l.box,I),root:{"data-main-rotation":I}})}render(){if(this.div)return this.div;const I=super.render();this.#b&&(I.setAttribute("aria-label",this.#b),I.setAttribute("role","mark")),this.#s?I.classList.add("free"):this.div.addEventListener("keydown",this.#u.bind(this),{signal:this._uiManager._signal});const g=this.#c=document.createElement("div");I.append(g),g.setAttribute("aria-hidden","true"),g.className="internal",g.style.clipPath=this.#A;const[C,A]=this.parentDimensions;return this.setDims(this.width*C,this.height*A),TC(this,this.#c,["pointerover","pointerleave"]),this.enableEditing(),I}pointerover(){this.isSelected||this.parent?.drawLayer.updateProperties(this.#B,{rootClass:{hovered:!0}})}pointerleave(){this.isSelected||this.parent?.drawLayer.updateProperties(this.#B,{rootClass:{hovered:!1}})}#u(I){P._keyboardManager.exec(this,I)}_moveCaret(I){switch(this.parent.unselect(this),I){case 0:case 2:this.#M(!0);break;case 1:case 3:this.#M(!1);break}}#M(I){if(!this.#I)return;const g=window.getSelection();I?g.setPosition(this.#I,this.#g):g.setPosition(this.#i,this.#d)}select(){super.select(),this.#B&&this.parent?.drawLayer.updateProperties(this.#B,{rootClass:{hovered:!1,selected:!0}})}unselect(){super.unselect(),this.#B&&(this.parent?.drawLayer.updateProperties(this.#B,{rootClass:{selected:!1}}),this.#s||this.#M(!1))}get _mustFixPosition(){return!this.#s}show(I=this._isVisible){super.show(I),this.parent&&(this.parent.drawLayer.updateProperties(this.#m,{rootClass:{hidden:!I}}),this.parent.drawLayer.updateProperties(this.#B,{rootClass:{hidden:!I}}))}#H(){return this.#s?this.rotation:0}#K(){if(this.#s)return null;const[I,g]=this.pageDimensions,[C,A]=this.pageTranslation,l=this.#C,Z=new Float32Array(l.length*8);let i=0;for(const{x:d,y:s,width:G,height:b}of l){const m=d*I+C,B=(1-s)*g+A;Z[i]=Z[i+4]=m,Z[i+1]=Z[i+3]=B,Z[i+2]=Z[i+6]=m+G*I,Z[i+5]=Z[i+7]=B-b*g,i+=8}return Z}#J(I){return this.#G.serialize(I,this.#H())}static startHighlighting(I,g,{target:C,x:A,y:l}){const{x:Z,y:i,width:d,height:s}=C.getBoundingClientRect(),G=new AbortController,b=I.combinedSignal(G),m=B=>{G.abort(),this.#Q(I,B)};window.addEventListener("blur",m,{signal:b}),window.addEventListener("pointerup",m,{signal:b}),window.addEventListener("pointerdown",II,{capture:!0,passive:!1,signal:b}),window.addEventListener("contextmenu",hI,{signal:b}),C.addEventListener("pointermove",this.#S.bind(this,I),{signal:b}),this._freeHighlight=new XC({x:A,y:l},[Z,i,d,s],I.scale,this._defaultThickness/2,g,.001),{id:this._freeHighlightId,clipPathId:this._freeHighlightClipId}=I.drawLayer.draw({bbox:[0,0,1,1],root:{viewBox:"0 0 1 1",fill:this._defaultColor,"fill-opacity":this._defaultOpacity},rootClass:{highlight:!0,free:!0},path:{d:this._freeHighlight.toSVGPath()}},!0,!0)}static#S(I,g){this._freeHighlight.add(g)&&I.drawLayer.updateProperties(this._freeHighlightId,{path:{d:this._freeHighlight.toSVGPath()}})}static#Q(I,g){this._freeHighlight.isEmpty()?I.drawLayer.remove(this._freeHighlightId):I.createAndAddNewEditor(g,!1,{highlightId:this._freeHighlightId,highlightOutlines:this._freeHighlight.getOutlines(),clipPathId:this._freeHighlightClipId,methodOfCreation:"main_toolbar"}),this._freeHighlightId=-1,this._freeHighlight=null,this._freeHighlightClipId=""}static async deserialize(I,g,C){let A=null;if(I instanceof yA){const{data:{quadPoints:o,rect:W,rotation:Y,id:w,color:a,opacity:h,popupRef:N,contentsObj:V},parent:{page:{pageNumber:R}}}=I;A=I={annotationType:p.HIGHLIGHT,color:Array.from(a),opacity:h,quadPoints:o,boxes:null,pageIndex:R-1,rect:W.slice(0),rotation:Y,annotationElementId:w,id:w,deleted:!1,popupRef:N,comment:V?.str||null}}else if(I instanceof VC){const{data:{inkLists:o,rect:W,rotation:Y,id:w,color:a,borderStyle:{rawWidth:h},popupRef:N,contentsObj:V},parent:{page:{pageNumber:R}}}=I;A=I={annotationType:p.HIGHLIGHT,color:Array.from(a),thickness:h,inkLists:o,boxes:null,pageIndex:R-1,rect:W.slice(0),rotation:Y,annotationElementId:w,id:w,deleted:!1,popupRef:N,comment:V?.str||null}}const{color:l,quadPoints:Z,inkLists:i,opacity:d}=I,s=await super.deserialize(I,g,C);s.color=t.makeHexColor(...l),s.#w=d||1,i&&(s.#o=I.thickness),s._initialData=A,I.comment&&s.setCommentData(I.comment);const[G,b]=s.pageDimensions,[m,B]=s.pageTranslation;if(Z){const o=s.#C=[];for(let W=0;W<Z.length;W+=8)o.push({x:(Z[W]-m)/G,y:1-(Z[W+1]-B)/b,width:(Z[W+2]-Z[W])/G,height:(Z[W+1]-Z[W+5])/b});s.#Y(),s.#X(),s.rotate(s.rotation)}else if(i){s.#s=!0;const o=i[0],W={x:o[0]-m,y:b-(o[1]-B)},Y=new XC(W,[0,0,G,b],1,s.#o/2,!0,.001);for(let h=0,N=o.length;h<N;h+=2)W.x=o[h]-m,W.y=b-(o[h+1]-B),Y.add(W);const{id:w,clipPathId:a}=g.drawLayer.draw({bbox:[0,0,1,1],root:{viewBox:"0 0 1 1",fill:s.color,"fill-opacity":s._defaultOpacity},rootClass:{highlight:!0,free:!0},path:{d:Y.toSVGPath()}},!0,!0);s.#N({highlightOutlines:Y.getOutlines(),highlightId:w,clipPathId:a}),s.#X(),s.rotate(s.parentRotation)}return s}serialize(I=!1){if(this.isEmpty()||I)return null;if(this.deleted)return this.serializeDeleted();const g=this.getRect(0,0),C=D._colorManager.convert(this._uiManager.getNonHCMColor(this.color)),A={annotationType:p.HIGHLIGHT,color:C,opacity:this.#w,thickness:this.#o,quadPoints:this.#K(),outlines:this.#J(g),pageIndex:this.pageIndex,rect:g,rotation:this.#H(),structTreeParentId:this._structTreeParentId};return this.addComment(A),this.annotationElementId&&!this.#y(A)?null:(A.id=this.annotationElementId,A)}#y(I){const{color:g}=this._initialData;return this.hasEditedComment||I.color.some((C,A)=>C!==g[A])}renderAnnotationElement(I){const g={rect:this.getRect(0,0)};return this.hasEditedComment&&(g.popup=this.comment),I.updateEdited(g),null}static canCreateNewEmptyEditor(){return!1}}class uA{#I=Object.create(null);updateProperty(I,g){this[I]=g,this.updateSVGProperty(I,g)}updateProperties(I){if(I)for(const[g,C]of Object.entries(I))g.startsWith("_")||this.updateProperty(g,C)}updateSVGProperty(I,g){this.#I[I]=g}toSVGProperties(){const I=this.#I;return this.#I=Object.create(null),{root:I}}reset(){this.#I=Object.create(null)}updateAll(I=this){this.updateProperties(I)}clone(){j("Not implemented")}}class S extends D{#I=null;#g;_colorPicker=null;_drawId=null;static _currentDrawId=-1;static _currentParent=null;static#C=null;static#A=null;static#Z=null;static#l=NaN;static#i=null;static#d=null;static#c=NaN;static _INNER_MARGIN=3;constructor(I){super(I),this.#g=I.mustBeCommitted||!1,this._addOutlines(I)}_addOutlines(I){I.drawOutlines&&(this.#G(I),this.#W())}#G({drawOutlines:I,drawId:g,drawingOptions:C}){this.#I=I,this._drawingOptions||=C,this.annotationElementId||this._uiManager.a11yAlert(`pdfjs-editor-${this.editorType}-added-alert`),g>=0?(this._drawId=g,this.parent.drawLayer.finalizeDraw(g,I.defaultProperties)):this._drawId=this.#m(I,this.parent),this.#b(I.box)}#m(I,g){const{id:C}=g.drawLayer.draw(S._mergeSVGProperties(this._drawingOptions.toSVGProperties(),I.defaultSVGProperties),!1,!1);return C}static _mergeSVGProperties(I,g){const C=new Set(Object.keys(I));for(const[A,l]of Object.entries(g))C.has(A)?Object.assign(I[A],l):I[A]=l;return I}static getDefaultDrawingOptions(I){j("Not implemented")}static get typesMap(){j("Not implemented")}static get isDrawer(){return!0}static get supportMultipleDrawings(){return!1}static updateDefaultParams(I,g){const C=this.typesMap.get(I);C&&this._defaultDrawingOptions.updateProperty(C,g),this._currentParent&&(S.#C.updateProperty(C,g),this._currentParent.drawLayer.updateProperties(this._currentDrawId,this._defaultDrawingOptions.toSVGProperties()))}updateParams(I,g){const C=this.constructor.typesMap.get(I);C&&this._updateProperty(I,C,g)}static get defaultPropertiesToUpdate(){const I=[],g=this._defaultDrawingOptions;for(const[C,A]of this.typesMap)I.push([C,g[A]]);return I}get propertiesToUpdate(){const I=[],{_drawingOptions:g}=this;for(const[C,A]of this.constructor.typesMap)I.push([C,g[A]]);return I}_updateProperty(I,g,C){const A=this._drawingOptions,l=A[g],Z=i=>{A.updateProperty(g,i);const d=this.#I.updateProperty(g,i);d&&this.#b(d),this.parent?.drawLayer.updateProperties(this._drawId,A.toSVGProperties()),I===this.colorType&&this._colorPicker?.update(i)};this.addCommands({cmd:Z.bind(this,C),undo:Z.bind(this,l),post:this._uiManager.updateUI.bind(this._uiManager,this),mustExec:!0,type:I,overwriteIfSameType:!0,keepUndo:!0})}_onResizing(){this.parent?.drawLayer.updateProperties(this._drawId,S._mergeSVGProperties(this.#I.getPathResizingSVGProperties(this.#B()),{bbox:this.#o()}))}_onResized(){this.parent?.drawLayer.updateProperties(this._drawId,S._mergeSVGProperties(this.#I.getPathResizedSVGProperties(this.#B()),{bbox:this.#o()}))}_onTranslating(I,g){this.parent?.drawLayer.updateProperties(this._drawId,{bbox:this.#o()})}_onTranslated(){this.parent?.drawLayer.updateProperties(this._drawId,S._mergeSVGProperties(this.#I.getPathTranslatedSVGProperties(this.#B(),this.parentDimensions),{bbox:this.#o()}))}_onStartDragging(){this.parent?.drawLayer.updateProperties(this._drawId,{rootClass:{moving:!0}})}_onStopDragging(){this.parent?.drawLayer.updateProperties(this._drawId,{rootClass:{moving:!1}})}commit(){super.commit(),this.disableEditMode(),this.disableEditing()}disableEditing(){super.disableEditing(),this.div.classList.toggle("disabled",!0)}enableEditing(){super.enableEditing(),this.div.classList.toggle("disabled",!1)}getBaseTranslation(){return[0,0]}get isResizable(){return!0}onceAdded(I){this.annotationElementId||this.parent.addUndoableEditor(this),this._isDraggable=!0,this.#g&&(this.#g=!1,this.commit(),this.parent.setSelected(this),I&&this.isOnScreen&&this.div.focus())}remove(){this.#s(),super.remove()}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.#W(),this.#b(this.#I.box),this.isAttachedToDOM||this.parent.add(this)))}setParent(I){let g=!1;this.parent&&!I?(this._uiManager.removeShouldRescale(this),this.#s()):I&&(this._uiManager.addShouldRescale(this),this.#W(I),g=!this.parent&&this.div?.classList.contains("selectedEditor")),super.setParent(I),g&&this.select()}#s(){this._drawId===null||!this.parent||(this.parent.drawLayer.remove(this._drawId),this._drawId=null,this._drawingOptions.reset())}#W(I=this.parent){if(!(this._drawId!==null&&this.parent===I)){if(this._drawId!==null){this.parent.drawLayer.updateParent(this._drawId,I.drawLayer);return}this._drawingOptions.updateAll(),this._drawId=this.#m(this.#I,I)}}#w([I,g,C,A]){const{parentDimensions:[l,Z],rotation:i}=this;switch(i){case 90:return[g,1-I,C*(Z/l),A*(l/Z)];case 180:return[1-I,1-g,C,A];case 270:return[1-g,I,C*(Z/l),A*(l/Z)];default:return[I,g,C,A]}}#B(){const{x:I,y:g,width:C,height:A,parentDimensions:[l,Z],rotation:i}=this;switch(i){case 90:return[1-g,I,C*(l/Z),A*(Z/l)];case 180:return[1-I,1-g,C,A];case 270:return[g,1-I,C*(l/Z),A*(Z/l)];default:return[I,g,C,A]}}#b(I){if([this.x,this.y,this.width,this.height]=this.#w(I),this.div){this.fixAndSetPosition();const[g,C]=this.parentDimensions;this.setDims(this.width*g,this.height*C)}this._onResized()}#o(){const{x:I,y:g,width:C,height:A,rotation:l,parentRotation:Z,parentDimensions:[i,d]}=this;switch((l*4+Z)/90){case 1:return[1-g-A,I,A,C];case 2:return[1-I-C,1-g-A,C,A];case 3:return[g,1-I-C,A,C];case 4:return[I,g-C*(i/d),A*(d/i),C*(i/d)];case 5:return[1-g,I,C*(i/d),A*(d/i)];case 6:return[1-I-A*(d/i),1-g,A*(d/i),C*(i/d)];case 7:return[g-C*(i/d),1-I-A*(d/i),C*(i/d),A*(d/i)];case 8:return[I-C,g-A,C,A];case 9:return[1-g,I-C,A,C];case 10:return[1-I,1-g,C,A];case 11:return[g-A,1-I,A,C];case 12:return[I-A*(d/i),g,A*(d/i),C*(i/d)];case 13:return[1-g-C*(i/d),I-A*(d/i),C*(i/d),A*(d/i)];case 14:return[1-I,1-g-C*(i/d),A*(d/i),C*(i/d)];case 15:return[g,1-I,C*(i/d),A*(d/i)];default:return[I,g,C,A]}}rotate(){this.parent&&this.parent.drawLayer.updateProperties(this._drawId,S._mergeSVGProperties({bbox:this.#o()},this.#I.updateRotation((this.parentRotation-this.rotation+360)%360)))}onScaleChanging(){this.parent&&this.#b(this.#I.updateParentDimensions(this.parentDimensions,this.parent.scale))}static onScaleChangingWhenDrawing(){}render(){if(this.div)return this.div;let I,g;this._isCopy&&(I=this.x,g=this.y);const C=super.render();C.classList.add("draw");const A=document.createElement("div");C.append(A),A.setAttribute("aria-hidden","true"),A.className="internal";const[l,Z]=this.parentDimensions;return this.setDims(this.width*l,this.height*Z),this._uiManager.addShouldRescale(this),this.disableEditing(),this._isCopy&&this._moveAfterPaste(I,g),C}static createDrawerInstance(I,g,C,A,l){j("Not implemented")}static startDrawing(I,g,C,A){const{target:l,offsetX:Z,offsetY:i,pointerId:d,pointerType:s}=A;if(S.#i&&S.#i!==s)return;const{viewport:{rotation:G}}=I,{width:b,height:m}=l.getBoundingClientRect(),B=S.#A=new AbortController,o=I.combinedSignal(B);if(S.#l||=d,S.#i??=s,window.addEventListener("pointerup",W=>{S.#l===W.pointerId?this._endDraw(W):S.#d?.delete(W.pointerId)},{signal:o}),window.addEventListener("pointercancel",W=>{S.#l===W.pointerId?this._currentParent.endDrawingSession():S.#d?.delete(W.pointerId)},{signal:o}),window.addEventListener("pointerdown",W=>{S.#i===W.pointerType&&((S.#d||=new Set).add(W.pointerId),S.#C.isCancellable()&&(S.#C.removeLastElement(),S.#C.isEmpty()?this._currentParent.endDrawingSession(!0):this._endDraw(null)))},{capture:!0,passive:!1,signal:o}),window.addEventListener("contextmenu",hI,{signal:o}),l.addEventListener("pointermove",this._drawMove.bind(this),{signal:o}),l.addEventListener("touchmove",W=>{W.timeStamp===S.#c&&II(W)},{signal:o}),I.toggleDrawing(),g._editorUndoBar?.hide(),S.#C){I.drawLayer.updateProperties(this._currentDrawId,S.#C.startNew(Z,i,b,m,G));return}g.updateUIForDefaultProperties(this),S.#C=this.createDrawerInstance(Z,i,b,m,G),S.#Z=this.getDefaultDrawingOptions(),this._currentParent=I,{id:this._currentDrawId}=I.drawLayer.draw(this._mergeSVGProperties(S.#Z.toSVGProperties(),S.#C.defaultSVGProperties),!0,!1)}static _drawMove(I){if(S.#c=-1,!S.#C)return;const{offsetX:g,offsetY:C,pointerId:A}=I;if(S.#l===A){if(S.#d?.size>=1){this._endDraw(I);return}this._currentParent.drawLayer.updateProperties(this._currentDrawId,S.#C.add(g,C)),S.#c=I.timeStamp,II(I)}}static _cleanup(I){I&&(this._currentDrawId=-1,this._currentParent=null,S.#C=null,S.#Z=null,S.#i=null,S.#c=NaN),S.#A&&(S.#A.abort(),S.#A=null,S.#l=NaN,S.#d=null)}static _endDraw(I){const g=this._currentParent;if(g){if(g.toggleDrawing(!0),this._cleanup(!1),I?.target===g.div&&g.drawLayer.updateProperties(this._currentDrawId,S.#C.end(I.offsetX,I.offsetY)),this.supportMultipleDrawings){const C=S.#C,A=this._currentDrawId,l=C.getLastElement();g.addCommands({cmd:()=>{g.drawLayer.updateProperties(A,C.setLastElement(l))},undo:()=>{g.drawLayer.updateProperties(A,C.removeLastElement())},mustExec:!1,type:k.DRAW_STEP});return}this.endDrawing(!1)}}static endDrawing(I){const g=this._currentParent;if(!g)return null;if(g.toggleDrawing(!0),g.cleanUndoStack(k.DRAW_STEP),!S.#C.isEmpty()){const{pageDimensions:[C,A],scale:l}=g,Z=g.createAndAddNewEditor({offsetX:0,offsetY:0},!1,{drawId:this._currentDrawId,drawOutlines:S.#C.getOutlines(C*l,A*l,l,this._INNER_MARGIN),drawingOptions:S.#Z,mustBeCommitted:!I});return this._cleanup(!0),Z}return g.drawLayer.remove(this._currentDrawId),this._cleanup(!0),null}createDrawingOptions(I){}static deserializeDraw(I,g,C,A,l,Z){j("Not implemented")}static async deserialize(I,g,C){const{rawDims:{pageWidth:A,pageHeight:l,pageX:Z,pageY:i}}=g.viewport,d=this.deserializeDraw(Z,i,A,l,this._INNER_MARGIN,I),s=await super.deserialize(I,g,C);return s.createDrawingOptions(I),s.#G({drawOutlines:d}),s.#W(),s.onScaleChanging(),s.rotate(),s}serializeDraw(I){const[g,C]=this.pageTranslation,[A,l]=this.pageDimensions;return this.#I.serialize([g,C,A,l],I)}renderAnnotationElement(I){return I.updateEdited({rect:this.getRect(0,0)}),null}static canCreateNewEmptyEditor(){return!1}}class nZ{#I=new Float64Array(6);#g;#C;#A;#Z;#l;#i="";#d=0;#c=new Ng;#G;#m;constructor(I,g,C,A,l,Z){this.#G=C,this.#m=A,this.#A=l,this.#Z=Z,[I,g]=this.#s(I,g);const i=this.#g=[NaN,NaN,NaN,NaN,I,g];this.#l=[I,g],this.#C=[{line:i,points:this.#l}],this.#I.set(i,0)}updateProperty(I,g){I==="stroke-width"&&(this.#Z=g)}#s(I,g){return H._normalizePoint(I,g,this.#G,this.#m,this.#A)}isEmpty(){return!this.#C||this.#C.length===0}isCancellable(){return this.#l.length<=10}add(I,g){[I,g]=this.#s(I,g);const[C,A,l,Z]=this.#I.subarray(2,6),i=I-l,d=g-Z;return Math.hypot(this.#G*i,this.#m*d)<=2?null:(this.#l.push(I,g),isNaN(C)?(this.#I.set([l,Z,I,g],2),this.#g.push(NaN,NaN,NaN,NaN,I,g),{path:{d:this.toSVGPath()}}):(isNaN(this.#I[0])&&this.#g.splice(6,6),this.#I.set([C,A,l,Z,I,g],0),this.#g.push(...H.createBezierPoints(C,A,l,Z,I,g)),{path:{d:this.toSVGPath()}}))}end(I,g){const C=this.add(I,g);return C||(this.#l.length===2?{path:{d:this.toSVGPath()}}:null)}startNew(I,g,C,A,l){this.#G=C,this.#m=A,this.#A=l,[I,g]=this.#s(I,g);const Z=this.#g=[NaN,NaN,NaN,NaN,I,g];this.#l=[I,g];const i=this.#C.at(-1);return i&&(i.line=new Float32Array(i.line),i.points=new Float32Array(i.points)),this.#C.push({line:Z,points:this.#l}),this.#I.set(Z,0),this.#d=0,this.toSVGPath(),null}getLastElement(){return this.#C.at(-1)}setLastElement(I){return this.#C?(this.#C.push(I),this.#g=I.line,this.#l=I.points,this.#d=0,{path:{d:this.toSVGPath()}}):this.#c.setLastElement(I)}removeLastElement(){if(!this.#C)return this.#c.removeLastElement();this.#C.pop(),this.#i="";for(let I=0,g=this.#C.length;I<g;I++){const{line:C,points:A}=this.#C[I];this.#g=C,this.#l=A,this.#d=0,this.toSVGPath()}return{path:{d:this.#i}}}toSVGPath(){const I=H.svgRound(this.#g[4]),g=H.svgRound(this.#g[5]);if(this.#l.length===2)return this.#i=`${this.#i} M ${I} ${g} Z`,this.#i;if(this.#l.length<=6){const A=this.#i.lastIndexOf("M");this.#i=`${this.#i.slice(0,A)} M ${I} ${g}`,this.#d=6}if(this.#l.length===4){const A=H.svgRound(this.#g[10]),l=H.svgRound(this.#g[11]);return this.#i=`${this.#i} L ${A} ${l}`,this.#d=12,this.#i}const C=[];this.#d===0&&(C.push(`M ${I} ${g}`),this.#d=6);for(let A=this.#d,l=this.#g.length;A<l;A+=6){const[Z,i,d,s,G,b]=this.#g.slice(A,A+6).map(H.svgRound);C.push(`C${Z} ${i} ${d} ${s} ${G} ${b}`)}return this.#i+=C.join(" "),this.#d=this.#g.length,this.#i}getOutlines(I,g,C,A){const l=this.#C.at(-1);return l.line=new Float32Array(l.line),l.points=new Float32Array(l.points),this.#c.build(this.#C,I,g,C,this.#A,this.#Z,A),this.#I=null,this.#g=null,this.#C=null,this.#i=null,this.#c}get defaultSVGProperties(){return{root:{viewBox:"0 0 10000 10000"},rootClass:{draw:!0},bbox:[0,0,1,1]}}}class Ng extends H{#I;#g=0;#C;#A;#Z;#l;#i;#d;#c;build(I,g,C,A,l,Z,i){this.#Z=g,this.#l=C,this.#i=A,this.#d=l,this.#c=Z,this.#C=i??0,this.#A=I,this.#s()}get thickness(){return this.#c}setLastElement(I){return this.#A.push(I),{path:{d:this.toSVGPath()}}}removeLastElement(){return this.#A.pop(),{path:{d:this.toSVGPath()}}}toSVGPath(){const I=[];for(const{line:g}of this.#A){if(I.push(`M${H.svgRound(g[4])} ${H.svgRound(g[5])}`),g.length===6){I.push("Z");continue}if(g.length===12&&isNaN(g[6])){I.push(`L${H.svgRound(g[10])} ${H.svgRound(g[11])}`);continue}for(let C=6,A=g.length;C<A;C+=6){const[l,Z,i,d,s,G]=g.subarray(C,C+6).map(H.svgRound);I.push(`C${l} ${Z} ${i} ${d} ${s} ${G}`)}}return I.join("")}serialize([I,g,C,A],l){const Z=[],i=[],[d,s,G,b]=this.#m();let m,B,o,W,Y,w,a,h,N;switch(this.#d){case 0:N=H._rescale,m=I,B=g+A,o=C,W=-A,Y=I+d*C,w=g+(1-s-b)*A,a=I+(d+G)*C,h=g+(1-s)*A;break;case 90:N=H._rescaleAndSwap,m=I,B=g,o=C,W=A,Y=I+s*C,w=g+d*A,a=I+(s+b)*C,h=g+(d+G)*A;break;case 180:N=H._rescale,m=I+C,B=g,o=-C,W=A,Y=I+(1-d-G)*C,w=g+s*A,a=I+(1-d)*C,h=g+(s+b)*A;break;case 270:N=H._rescaleAndSwap,m=I+C,B=g+A,o=-C,W=-A,Y=I+(1-s-b)*C,w=g+(1-d-G)*A,a=I+(1-s)*C,h=g+(1-d)*A;break}for(const{line:V,points:R}of this.#A)Z.push(N(V,m,B,o,W,l?new Array(V.length):null)),i.push(N(R,m,B,o,W,l?new Array(R.length):null));return{lines:Z,points:i,rect:[Y,w,a,h]}}static deserialize(I,g,C,A,l,{paths:{lines:Z,points:i},rotation:d,thickness:s}){const G=[];let b,m,B,o,W;switch(d){case 0:W=H._rescale,b=-I/C,m=g/A+1,B=1/C,o=-1/A;break;case 90:W=H._rescaleAndSwap,b=-g/A,m=-I/C,B=1/A,o=1/C;break;case 180:W=H._rescale,b=I/C+1,m=-g/A,B=-1/C,o=1/A;break;case 270:W=H._rescaleAndSwap,b=g/A+1,m=I/C+1,B=-1/A,o=-1/C;break}if(!Z){Z=[];for(const w of i){const a=w.length;if(a===2){Z.push(new Float32Array([NaN,NaN,NaN,NaN,w[0],w[1]]));continue}if(a===4){Z.push(new Float32Array([NaN,NaN,NaN,NaN,w[0],w[1],NaN,NaN,NaN,NaN,w[2],w[3]]));continue}const h=new Float32Array(3*(a-2));Z.push(h);let[N,V,R,X]=w.subarray(0,4);h.set([NaN,NaN,NaN,NaN,N,V],0);for(let n=4;n<a;n+=2){const y=w[n],K=w[n+1];h.set(H.createBezierPoints(N,V,R,X,y,K),(n-2)*3),[N,V,R,X]=[R,X,y,K]}}}for(let w=0,a=Z.length;w<a;w++)G.push({line:W(Z[w].map(h=>h??NaN),b,m,B,o),points:W(i[w].map(h=>h??NaN),b,m,B,o)});const Y=new this.prototype.constructor;return Y.build(G,C,A,1,d,s,l),Y}#G(I=this.#c){const g=this.#C+I/2*this.#i;return this.#d%180===0?[g/this.#Z,g/this.#l]:[g/this.#l,g/this.#Z]}#m(){const[I,g,C,A]=this.#I,[l,Z]=this.#G(0);return[I+l,g+Z,C-2*l,A-2*Z]}#s(){const I=this.#I=new Float32Array([1/0,1/0,-1/0,-1/0]);for(const{line:A}of this.#A){if(A.length<=12){for(let i=4,d=A.length;i<d;i+=6)t.pointBoundingBox(A[i],A[i+1],I);continue}let l=A[4],Z=A[5];for(let i=6,d=A.length;i<d;i+=6){const[s,G,b,m,B,o]=A.subarray(i,i+6);t.bezierBoundingBox(l,Z,s,G,b,m,B,o,I),l=B,Z=o}}const[g,C]=this.#G();I[0]=GI(I[0]-g,0,1),I[1]=GI(I[1]-C,0,1),I[2]=GI(I[2]+g,0,1),I[3]=GI(I[3]+C,0,1),I[2]-=I[0],I[3]-=I[1]}get box(){return this.#I}updateProperty(I,g){return I==="stroke-width"?this.#W(g):null}#W(I){const[g,C]=this.#G();this.#c=I;const[A,l]=this.#G(),[Z,i]=[A-g,l-C],d=this.#I;return d[0]-=Z,d[1]-=i,d[2]+=2*Z,d[3]+=2*i,d}updateParentDimensions([I,g],C){const[A,l]=this.#G();this.#Z=I,this.#l=g,this.#i=C;const[Z,i]=this.#G(),d=Z-A,s=i-l,G=this.#I;return G[0]-=d,G[1]-=s,G[2]+=2*d,G[3]+=2*s,G}updateRotation(I){return this.#g=I,{path:{transform:this.rotationTransform}}}get viewBox(){return this.#I.map(H.svgRound).join(" ")}get defaultProperties(){const[I,g]=this.#I;return{root:{viewBox:this.viewBox},path:{"transform-origin":`${H.svgRound(I)} ${H.svgRound(g)}`}}}get rotationTransform(){const[,,I,g]=this.#I;let C=0,A=0,l=0,Z=0,i=0,d=0;switch(this.#g){case 90:A=g/I,l=-I/g,i=I;break;case 180:C=-1,Z=-1,i=I,d=g;break;case 270:A=-g/I,l=I/g,d=g;break;default:return""}return`matrix(${C} ${A} ${l} ${Z} ${H.svgRound(i)} ${H.svgRound(d)})`}getPathResizingSVGProperties([I,g,C,A]){const[l,Z]=this.#G(),[i,d,s,G]=this.#I;if(Math.abs(s-l)<=H.PRECISION||Math.abs(G-Z)<=H.PRECISION){const W=I+C/2-(i+s/2),Y=g+A/2-(d+G/2);return{path:{"transform-origin":`${H.svgRound(I)} ${H.svgRound(g)}`,transform:`${this.rotationTransform} translate(${W} ${Y})`}}}const b=(C-2*l)/(s-2*l),m=(A-2*Z)/(G-2*Z),B=s/C,o=G/A;return{path:{"transform-origin":`${H.svgRound(i)} ${H.svgRound(d)}`,transform:`${this.rotationTransform} scale(${B} ${o}) translate(${H.svgRound(l)} ${H.svgRound(Z)}) scale(${b} ${m}) translate(${H.svgRound(-l)} ${H.svgRound(-Z)})`}}}getPathResizedSVGProperties([I,g,C,A]){const[l,Z]=this.#G(),i=this.#I,[d,s,G,b]=i;if(i[0]=I,i[1]=g,i[2]=C,i[3]=A,Math.abs(G-l)<=H.PRECISION||Math.abs(b-Z)<=H.PRECISION){const Y=I+C/2-(d+G/2),w=g+A/2-(s+b/2);for(const{line:a,points:h}of this.#A)H._translate(a,Y,w,a),H._translate(h,Y,w,h);return{root:{viewBox:this.viewBox},path:{"transform-origin":`${H.svgRound(I)} ${H.svgRound(g)}`,transform:this.rotationTransform||null,d:this.toSVGPath()}}}const m=(C-2*l)/(G-2*l),B=(A-2*Z)/(b-2*Z),o=-m*(d+l)+I+l,W=-B*(s+Z)+g+Z;if(m!==1||B!==1||o!==0||W!==0)for(const{line:Y,points:w}of this.#A)H._rescale(Y,o,W,m,B,Y),H._rescale(w,o,W,m,B,w);return{root:{viewBox:this.viewBox},path:{"transform-origin":`${H.svgRound(I)} ${H.svgRound(g)}`,transform:this.rotationTransform||null,d:this.toSVGPath()}}}getPathTranslatedSVGProperties([I,g],C){const[A,l]=C,Z=this.#I,i=I-Z[0],d=g-Z[1];if(this.#Z===A&&this.#l===l)for(const{line:s,points:G}of this.#A)H._translate(s,i,d,s),H._translate(G,i,d,G);else{const s=this.#Z/A,G=this.#l/l;this.#Z=A,this.#l=l;for(const{line:b,points:m}of this.#A)H._rescale(b,i,d,s,G,b),H._rescale(m,i,d,s,G,m);Z[2]*=s,Z[3]*=G}return Z[0]=I,Z[1]=g,{root:{viewBox:this.viewBox},path:{d:this.toSVGPath(),"transform-origin":`${H.svgRound(I)} ${H.svgRound(g)}`}}}get defaultSVGProperties(){const I=this.#I;return{root:{viewBox:this.viewBox},rootClass:{draw:!0},path:{d:this.toSVGPath(),"transform-origin":`${H.svgRound(I[0])} ${H.svgRound(I[1])}`,transform:this.rotationTransform||null},bbox:I}}}class Og extends uA{constructor(I){super(),this._viewParameters=I,super.updateProperties({fill:"none",stroke:D._defaultLineColor,"stroke-opacity":1,"stroke-width":1,"stroke-linecap":"round","stroke-linejoin":"round","stroke-miterlimit":10})}updateSVGProperty(I,g){I==="stroke-width"&&(g??=this["stroke-width"],g*=this._viewParameters.realScale),super.updateSVGProperty(I,g)}clone(){const I=new Og(this._viewParameters);return I.updateAll(this),I}}class nC extends S{static _type="ink";static _editorType=p.INK;static _defaultDrawingOptions=null;constructor(I){super({...I,name:"inkEditor"}),this._willKeepAspectRatio=!0,this.defaultL10nId="pdfjs-editor-ink-editor"}static initialize(I,g){D.initialize(I,g),this._defaultDrawingOptions=new Og(g.viewParameters)}static getDefaultDrawingOptions(I){const g=this._defaultDrawingOptions.clone();return g.updateProperties(I),g}static get supportMultipleDrawings(){return!0}static get typesMap(){return J(this,"typesMap",new Map([[k.INK_THICKNESS,"stroke-width"],[k.INK_COLOR,"stroke"],[k.INK_OPACITY,"stroke-opacity"]]))}static createDrawerInstance(I,g,C,A,l){return new nZ(I,g,C,A,l,this._defaultDrawingOptions["stroke-width"])}static deserializeDraw(I,g,C,A,l,Z){return Ng.deserialize(I,g,C,A,l,Z)}static async deserialize(I,g,C){let A=null;if(I instanceof VC){const{data:{inkLists:Z,rect:i,rotation:d,id:s,color:G,opacity:b,borderStyle:{rawWidth:m},popupRef:B,contentsObj:o},parent:{page:{pageNumber:W}}}=I;A=I={annotationType:p.INK,color:Array.from(G),thickness:m,opacity:b,paths:{points:Z},boxes:null,pageIndex:W-1,rect:i.slice(0),rotation:d,annotationElementId:s,id:s,deleted:!1,popupRef:B,comment:o?.str||null}}const l=await super.deserialize(I,g,C);return l._initialData=A,I.comment&&l.setCommentData(I.comment),l}get toolbarButtons(){return this._colorPicker||=new ag(this),[["colorPicker",this._colorPicker]]}get colorType(){return k.INK_COLOR}get colorValue(){return this._drawingOptions.stroke}onScaleChanging(){if(!this.parent)return;super.onScaleChanging();const{_drawId:I,_drawingOptions:g,parent:C}=this;g.updateSVGProperty("stroke-width"),C.drawLayer.updateProperties(I,g.toSVGProperties())}static onScaleChangingWhenDrawing(){const I=this._currentParent;I&&(super.onScaleChangingWhenDrawing(),this._defaultDrawingOptions.updateSVGProperty("stroke-width"),I.drawLayer.updateProperties(this._currentDrawId,this._defaultDrawingOptions.toSVGProperties()))}createDrawingOptions({color:I,thickness:g,opacity:C}){this._drawingOptions=nC.getDefaultDrawingOptions({stroke:t.makeHexColor(...I),"stroke-width":g,"stroke-opacity":C})}serialize(I=!1){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const{lines:g,points:C,rect:A}=this.serializeDraw(I),{_drawingOptions:{stroke:l,"stroke-opacity":Z,"stroke-width":i}}=this,d={annotationType:p.INK,color:D._colorManager.convert(l),opacity:Z,thickness:i,paths:{lines:g,points:C},pageIndex:this.pageIndex,rect:A,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return this.addComment(d),I?(d.isCopy=!0,d):this.annotationElementId&&!this.#I(d)?null:(d.id=this.annotationElementId,d)}#I(I){const{color:g,thickness:C,opacity:A,pageIndex:l}=this._initialData;return this.hasEditedComment||this._hasBeenMoved||this._hasBeenResized||I.color.some((Z,i)=>Z!==g[i])||I.thickness!==C||I.opacity!==A||I.pageIndex!==l}renderAnnotationElement(I){const{points:g,rect:C}=this.serializeDraw(!1),A={rect:C,thickness:this._drawingOptions["stroke-width"],points:g};return this.hasEditedComment&&(A.popup=this.comment),I.updateEdited(A),null}}class yC extends Ng{toSVGPath(){let I=super.toSVGPath();return I.endsWith("Z")||(I+="Z"),I}}const Ug=8,Rg=3;class Ag{static#I={maxDim:512,sigmaSFactor:.02,sigmaR:25,kernelSize:16};static#g(I,g,C,A){return C-=I,A-=g,C===0?A>0?0:4:C===1?A+6:2-A}static#C=new Int32Array([0,1,-1,1,-1,0,-1,-1,0,-1,1,-1,1,0,1,1]);static#A(I,g,C,A,l,Z,i){const d=this.#g(C,A,l,Z);for(let s=0;s<8;s++){const G=(-s+d-i+16)%8,b=this.#C[2*G],m=this.#C[2*G+1];if(I[(C+b)*g+(A+m)]!==0)return G}return-1}static#Z(I,g,C,A,l,Z,i){const d=this.#g(C,A,l,Z);for(let s=0;s<8;s++){const G=(s+d+i+16)%8,b=this.#C[2*G],m=this.#C[2*G+1];if(I[(C+b)*g+(A+m)]!==0)return G}return-1}static#l(I,g,C,A){const l=I.length,Z=new Int32Array(l);for(let G=0;G<l;G++)Z[G]=I[G]<=A?1:0;for(let G=1;G<C-1;G++)Z[G*g]=Z[G*g+g-1]=0;for(let G=0;G<g;G++)Z[G]=Z[g*C-1-G]=0;let i=1,d;const s=[];for(let G=1;G<C-1;G++){d=1;for(let b=1;b<g-1;b++){const m=G*g+b,B=Z[m];if(B===0)continue;let o=G,W=b;if(B===1&&Z[m-1]===0)i+=1,W-=1;else if(B>=1&&Z[m+1]===0)i+=1,W+=1,B>1&&(d=B);else{B!==1&&(d=Math.abs(B));continue}const Y=[b,G],w=W===b+1,a={isHole:w,points:Y,id:i,parent:0};s.push(a);let h;for(const e of s)if(e.id===d){h=e;break}h?h.isHole?a.parent=w?h.parent:d:a.parent=w?d:h.parent:a.parent=w?d:0;const N=this.#A(Z,g,G,b,o,W,0);if(N===-1){Z[m]=-i,Z[m]!==1&&(d=Math.abs(Z[m]));continue}let V=this.#C[2*N],R=this.#C[2*N+1];const X=G+V,n=b+R;o=X,W=n;let y=G,K=b;for(;;){const e=this.#Z(Z,g,y,K,o,W,1);V=this.#C[2*e],R=this.#C[2*e+1];const T=y+V,O=K+R;Y.push(O,T);const L=y*g+K;if(Z[L+1]===0?Z[L]=-i:Z[L]===1&&(Z[L]=i),T===G&&O===b&&y===X&&K===n){Z[m]!==1&&(d=Math.abs(Z[m]));break}else o=y,W=K,y=T,K=O}}}return s}static#i(I,g,C,A){if(C-g<=4){for(let X=g;X<C-2;X+=2)A.push(I[X],I[X+1]);return}const l=I[g],Z=I[g+1],i=I[C-4]-l,d=I[C-3]-Z,s=Math.hypot(i,d),G=i/s,b=d/s,m=G*Z-b*l,B=d/i,o=1/s,W=Math.atan(B),Y=Math.cos(W),w=Math.sin(W),a=o*(Math.abs(Y)+Math.abs(w)),h=o*(1-a+a**2),N=Math.max(Math.atan(Math.abs(w+Y)*h),Math.atan(Math.abs(w-Y)*h));let V=0,R=g;for(let X=g+2;X<C-2;X+=2){const n=Math.abs(m-G*I[X+1]+b*I[X]);n>V&&(R=X,V=n)}V>(s*N)**2?(this.#i(I,g,R+2,A),this.#i(I,R,C,A)):A.push(l,Z)}static#d(I){const g=[],C=I.length;return this.#i(I,0,C,g),g.push(I[C-2],I[C-1]),g.length<=4?null:g}static#c(I,g,C,A,l,Z){const i=new Float32Array(Z**2),d=-2*A**2,s=Z>>1;for(let W=0;W<Z;W++){const Y=(W-s)**2;for(let w=0;w<Z;w++)i[W*Z+w]=Math.exp((Y+(w-s)**2)/d)}const G=new Float32Array(256),b=-2*l**2;for(let W=0;W<256;W++)G[W]=Math.exp(W**2/b);const m=I.length,B=new Uint8Array(m),o=new Uint32Array(256);for(let W=0;W<C;W++)for(let Y=0;Y<g;Y++){const w=W*g+Y,a=I[w];let h=0,N=0;for(let R=0;R<Z;R++){const X=W+R-s;if(!(X<0||X>=C))for(let n=0;n<Z;n++){const y=Y+n-s;if(y<0||y>=g)continue;const K=I[X*g+y],e=i[R*Z+n]*G[Math.abs(K-a)];h+=K*e,N+=e}}const V=B[w]=Math.round(h/N);o[V]++}return[B,o]}static#G(I){const g=new Uint32Array(256);for(const C of I)g[C]++;return g}static#m(I){const g=I.length,C=new Uint8ClampedArray(g>>2);let A=-1/0,l=1/0;for(let i=0,d=C.length;i<d;i++){const s=C[i]=I[i<<2];A=Math.max(A,s),l=Math.min(l,s)}const Z=255/(A-l);for(let i=0,d=C.length;i<d;i++)C[i]=(C[i]-l)*Z;return C}static#s(I){let g,C=-1/0,A=-1/0;const l=I.findIndex(d=>d!==0);let Z=l,i=l;for(g=l;g<256;g++){const d=I[g];d>C&&(g-Z>A&&(A=g-Z,i=g-1),C=d,Z=g)}for(g=i-1;g>=0&&!(I[g]>I[g+1]);g--);return g}static#W(I){const g=I,{width:C,height:A}=I,{maxDim:l}=this.#I;let Z=C,i=A;if(C>l||A>l){let m=C,B=A,o=Math.log2(Math.max(C,A)/l);const W=Math.floor(o);o=o===W?W-1:W;for(let w=0;w<o;w++){Z=Math.ceil(m/2),i=Math.ceil(B/2);const a=new OffscreenCanvas(Z,i);a.getContext("2d").drawImage(I,0,0,m,B,0,0,Z,i),m=Z,B=i,I!==g&&I.close(),I=a.transferToImageBitmap()}const Y=Math.min(l/Z,l/i);Z=Math.round(Z*Y),i=Math.round(i*Y)}const s=new OffscreenCanvas(Z,i).getContext("2d",{willReadFrequently:!0});s.fillStyle="white",s.fillRect(0,0,Z,i),s.filter="grayscale(1)",s.drawImage(I,0,0,I.width,I.height,0,0,Z,i);const G=s.getImageData(0,0,Z,i).data;return[this.#m(G),Z,i]}static extractContoursFromText(I,{fontFamily:g,fontStyle:C,fontWeight:A},l,Z,i,d){let s=new OffscreenCanvas(1,1),G=s.getContext("2d",{alpha:!1});const b=200,m=G.font=`${C} ${A} ${b}px ${g}`,{actualBoundingBoxLeft:B,actualBoundingBoxRight:o,actualBoundingBoxAscent:W,actualBoundingBoxDescent:Y,fontBoundingBoxAscent:w,fontBoundingBoxDescent:a,width:h}=G.measureText(I),N=1.5,V=Math.ceil(Math.max(Math.abs(B)+Math.abs(o)||0,h)*N),R=Math.ceil(Math.max(Math.abs(W)+Math.abs(Y)||b,Math.abs(w)+Math.abs(a)||b)*N);s=new OffscreenCanvas(V,R),G=s.getContext("2d",{alpha:!0,willReadFrequently:!0}),G.font=m,G.filter="grayscale(1)",G.fillStyle="white",G.fillRect(0,0,V,R),G.fillStyle="black",G.fillText(I,V*(N-1)/2,R*(3-N)/2);const X=this.#m(G.getImageData(0,0,V,R).data),n=this.#G(X),y=this.#s(n),K=this.#l(X,V,R,y);return this.processDrawnLines({lines:{curves:K,width:V,height:R},pageWidth:l,pageHeight:Z,rotation:i,innerMargin:d,mustSmooth:!0,areContours:!0})}static process(I,g,C,A,l){const[Z,i,d]=this.#W(I),[s,G]=this.#c(Z,i,d,Math.hypot(i,d)*this.#I.sigmaSFactor,this.#I.sigmaR,this.#I.kernelSize),b=this.#s(G),m=this.#l(s,i,d,b);return this.processDrawnLines({lines:{curves:m,width:i,height:d},pageWidth:g,pageHeight:C,rotation:A,innerMargin:l,mustSmooth:!0,areContours:!0})}static processDrawnLines({lines:I,pageWidth:g,pageHeight:C,rotation:A,innerMargin:l,mustSmooth:Z,areContours:i}){A%180!==0&&([g,C]=[C,g]);const{curves:d,width:s,height:G}=I,b=I.thickness??0,m=[],B=Math.min(g/s,C/G),o=B/g,W=B/C,Y=[];for(const{points:a}of d){const h=Z?this.#d(a):a;if(!h)continue;Y.push(h);const N=h.length,V=new Float32Array(N),R=new Float32Array(3*(N===2?2:N-2));if(m.push({line:R,points:V}),N===2){V[0]=h[0]*o,V[1]=h[1]*W,R.set([NaN,NaN,NaN,NaN,V[0],V[1]],0);continue}let[X,n,y,K]=h;X*=o,n*=W,y*=o,K*=W,V.set([X,n,y,K],0),R.set([NaN,NaN,NaN,NaN,X,n],0);for(let e=4;e<N;e+=2){const T=V[e]=h[e]*o,O=V[e+1]=h[e+1]*W;R.set(H.createBezierPoints(X,n,y,K,T,O),(e-2)*3),[X,n,y,K]=[y,K,T,O]}}if(m.length===0)return null;const w=i?new yC:new Ng;return w.build(m,g,C,1,A,i?0:b,l),{outline:w,newCurves:Y,areContours:i,thickness:b,width:s,height:G}}static async compressSignature({outlines:I,areContours:g,thickness:C,width:A,height:l}){let Z=1/0,i=-1/0,d=0;for(const h of I){d+=h.length;for(let N=2,V=h.length;N<V;N++){const R=h[N]-h[N-2];Z=Math.min(Z,R),i=Math.max(i,R)}}let s;Z>=-128&&i<=127?s=Int8Array:Z>=-32768&&i<=32767?s=Int16Array:s=Int32Array;const G=I.length,b=Ug+Rg*G,m=new Uint32Array(b);let B=0;m[B++]=b*Uint32Array.BYTES_PER_ELEMENT+(d-2*G)*s.BYTES_PER_ELEMENT,m[B++]=0,m[B++]=A,m[B++]=l,m[B++]=g?0:1,m[B++]=Math.max(0,Math.floor(C??0)),m[B++]=G,m[B++]=s.BYTES_PER_ELEMENT;for(const h of I)m[B++]=h.length-2,m[B++]=h[0],m[B++]=h[1];const o=new CompressionStream("deflate-raw"),W=o.writable.getWriter();await W.ready,W.write(m);const Y=s.prototype.constructor;for(const h of I){const N=new Y(h.length-2);for(let V=2,R=h.length;V<R;V++)N[V-2]=h[V]-h[V-2];W.write(N)}W.close();const w=await new Response(o.readable).arrayBuffer(),a=new Uint8Array(w);return kC(a)}static async decompressSignature(I){try{const g=rA(I),{readable:C,writable:A}=new DecompressionStream("deflate-raw"),l=A.getWriter();await l.ready,l.write(g).then(async()=>{await l.ready,await l.close()}).catch(()=>{});let Z=null,i=0;for await(const h of C)Z||=new Uint8Array(new Uint32Array(h.buffer,0,4)[0]),Z.set(h,i),i+=h.length;const d=new Uint32Array(Z.buffer,0,Z.length>>2),s=d[1];if(s!==0)throw new Error(`Invalid version: ${s}`);const G=d[2],b=d[3],m=d[4]===0,B=d[5],o=d[6],W=d[7],Y=[],w=(Ug+Rg*o)*Uint32Array.BYTES_PER_ELEMENT;let a;switch(W){case Int8Array.BYTES_PER_ELEMENT:a=new Int8Array(Z.buffer,w);break;case Int16Array.BYTES_PER_ELEMENT:a=new Int16Array(Z.buffer,w);break;case Int32Array.BYTES_PER_ELEMENT:a=new Int32Array(Z.buffer,w);break}i=0;for(let h=0;h<o;h++){const N=d[Rg*h+Ug],V=new Float32Array(N+2);Y.push(V);for(let R=0;R<Rg-1;R++)V[R]=d[Rg*h+Ug+R+1];for(let R=0;R<N;R++)V[R+2]=V[R]+a[i++]}return{areContours:m,thickness:B,outlines:Y,width:G,height:b}}catch(g){return F(`decompressSignature: ${g}`),null}}}class HC extends uA{constructor(){super(),super.updateProperties({fill:D._defaultLineColor,"stroke-width":0})}clone(){const I=new HC;return I.updateAll(this),I}}class MC extends Og{constructor(I){super(I),super.updateProperties({stroke:D._defaultLineColor,"stroke-width":1})}clone(){const I=new MC(this._viewParameters);return I.updateAll(this),I}}class MI extends S{#I=!1;#g=null;#C=null;#A=null;static _type="signature";static _editorType=p.SIGNATURE;static _defaultDrawingOptions=null;constructor(I){super({...I,mustBeCommitted:!0,name:"signatureEditor"}),this._willKeepAspectRatio=!0,this.#C=I.signatureData||null,this.#g=null,this.defaultL10nId="pdfjs-editor-signature-editor1"}static initialize(I,g){D.initialize(I,g),this._defaultDrawingOptions=new HC,this._defaultDrawnSignatureOptions=new MC(g.viewParameters)}static getDefaultDrawingOptions(I){const g=this._defaultDrawingOptions.clone();return g.updateProperties(I),g}static get supportMultipleDrawings(){return!1}static get typesMap(){return J(this,"typesMap",new Map)}static get isDrawer(){return!1}get telemetryFinalData(){return{type:"signature",hasDescription:!!this.#g}}static computeTelemetryFinalData(I){const g=I.get("hasDescription");return{hasAltText:g.get(!0)??0,hasNoAltText:g.get(!1)??0}}get isResizable(){return!0}onScaleChanging(){this._drawId!==null&&super.onScaleChanging()}render(){if(this.div)return this.div;let I,g;const{_isCopy:C}=this;if(C&&(this._isCopy=!1,I=this.x,g=this.y),super.render(),this._drawId===null)if(this.#C){const{lines:A,mustSmooth:l,areContours:Z,description:i,uuid:d,heightInPage:s}=this.#C,{rawDims:{pageWidth:G,pageHeight:b},rotation:m}=this.parent.viewport,B=Ag.processDrawnLines({lines:A,pageWidth:G,pageHeight:b,rotation:m,innerMargin:MI._INNER_MARGIN,mustSmooth:l,areContours:Z});this.addSignature(B,s,i,d)}else this.div.setAttribute("data-l10n-args",JSON.stringify({description:""})),this.div.hidden=!0,this._uiManager.getSignature(this);else this.div.setAttribute("data-l10n-args",JSON.stringify({description:this.#g||""}));return C&&(this._isCopy=!0,this._moveAfterPaste(I,g)),this.div}setUuid(I){this.#A=I,this.addEditToolbar()}getUuid(){return this.#A}get description(){return this.#g}set description(I){this.#g=I,this.div&&(this.div.setAttribute("data-l10n-args",JSON.stringify({description:I})),super.addEditToolbar().then(g=>{g?.updateEditSignatureButton(I)}))}getSignaturePreview(){const{newCurves:I,areContours:g,thickness:C,width:A,height:l}=this.#C,Z=Math.max(A,l),i=Ag.processDrawnLines({lines:{curves:I.map(d=>({points:d})),thickness:C,width:A,height:l},pageWidth:Z,pageHeight:Z,rotation:0,innerMargin:0,mustSmooth:!1,areContours:g});return{areContours:g,outline:i.outline}}get toolbarButtons(){return this._uiManager.signatureManager?[["editSignature",this._uiManager.signatureManager]]:super.toolbarButtons}addSignature(I,g,C,A){const{x:l,y:Z}=this,{outline:i}=this.#C=I;this.#I=i instanceof yC,this.description=C;let d;this.#I?d=MI.getDefaultDrawingOptions():(d=MI._defaultDrawnSignatureOptions.clone(),d.updateProperties({"stroke-width":i.thickness})),this._addOutlines({drawOutlines:i,drawingOptions:d});const[s,G]=this.parentDimensions,[,b]=this.pageDimensions;let m=g/b;m=m>=1?.5:m,this.width*=m/this.height,this.width>=1&&(m*=.9/this.width,this.width=.9),this.height=m,this.setDims(s*this.width,G*this.height),this.x=l,this.y=Z,this.center(),this._onResized(),this.onScaleChanging(),this.rotate(),this._uiManager.addToAnnotationStorage(this),this.setUuid(A),this._reportTelemetry({action:"pdfjs.signature.inserted",data:{hasBeenSaved:!!A,hasDescription:!!C}}),this.div.hidden=!1}getFromImage(I){const{rawDims:{pageWidth:g,pageHeight:C},rotation:A}=this.parent.viewport;return Ag.process(I,g,C,A,MI._INNER_MARGIN)}getFromText(I,g){const{rawDims:{pageWidth:C,pageHeight:A},rotation:l}=this.parent.viewport;return Ag.extractContoursFromText(I,g,C,A,l,MI._INNER_MARGIN)}getDrawnSignature(I){const{rawDims:{pageWidth:g,pageHeight:C},rotation:A}=this.parent.viewport;return Ag.processDrawnLines({lines:I,pageWidth:g,pageHeight:C,rotation:A,innerMargin:MI._INNER_MARGIN,mustSmooth:!1,areContours:!1})}createDrawingOptions({areContours:I,thickness:g}){I?this._drawingOptions=MI.getDefaultDrawingOptions():(this._drawingOptions=MI._defaultDrawnSignatureOptions.clone(),this._drawingOptions.updateProperties({"stroke-width":g}))}serialize(I=!1){if(this.isEmpty())return null;const{lines:g,points:C,rect:A}=this.serializeDraw(I),{_drawingOptions:{"stroke-width":l}}=this,Z={annotationType:p.SIGNATURE,isSignature:!0,areContours:this.#I,color:[0,0,0],thickness:this.#I?0:l,pageIndex:this.pageIndex,rect:A,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return this.addComment(Z),I?(Z.paths={lines:g,points:C},Z.uuid=this.#A,Z.isCopy=!0):Z.lines=g,this.#g&&(Z.accessibilityData={type:"Figure",alt:this.#g}),Z}static deserializeDraw(I,g,C,A,l,Z){return Z.areContours?yC.deserialize(I,g,C,A,l,Z):Ng.deserialize(I,g,C,A,l,Z)}static async deserialize(I,g,C){const A=await super.deserialize(I,g,C);return A.#I=I.areContours,A.description=I.accessibilityData?.alt||"",A.#A=I.uuid,A}}class yZ extends D{#I=null;#g=null;#C=null;#A=null;#Z=null;#l="";#i=null;#d=!1;#c=null;#G=!1;#m=!1;static _type="stamp";static _editorType=p.STAMP;constructor(I){super({...I,name:"stampEditor"}),this.#A=I.bitmapUrl,this.#Z=I.bitmapFile,this.defaultL10nId="pdfjs-editor-stamp-editor"}static initialize(I,g){D.initialize(I,g)}static isHandlingMimeForPasting(I){return AC.includes(I)}static paste(I,g){g.pasteEditor({mode:p.STAMP},{bitmapFile:I.getAsFile()})}altTextFinish(){this._uiManager.useNewAltTextFlow&&(this.div.hidden=!1),super.altTextFinish()}get telemetryFinalData(){return{type:"stamp",hasAltText:!!this.altTextData?.altText}}static computeTelemetryFinalData(I){const g=I.get("hasAltText");return{hasAltText:g.get(!0)??0,hasNoAltText:g.get(!1)??0}}#s(I,g=!1){if(!I){this.remove();return}this.#I=I.bitmap,g||(this.#g=I.id,this.#G=I.isSvg),I.file&&(this.#l=I.file.name),this.#B()}#W(){if(this.#C=null,this._uiManager.enableWaiting(!1),!!this.#i){if(this._uiManager.useNewAltTextWhenAddingImage&&this._uiManager.useNewAltTextFlow&&this.#I){this.addEditToolbar().then(()=>{this._editToolbar.hide(),this._uiManager.editAltText(this,!0)});return}if(!this._uiManager.useNewAltTextWhenAddingImage&&this._uiManager.useNewAltTextFlow&&this.#I){this._reportTelemetry({action:"pdfjs.image.image_added",data:{alt_text_modal:!1,alt_text_type:"empty"}});try{this.mlGuessAltText()}catch{}}this.div.focus()}}async mlGuessAltText(I=null,g=!0){if(this.hasAltTextData())return null;const{mlManager:C}=this._uiManager;if(!C)throw new Error("No ML.");if(!await C.isEnabledFor("altText"))throw new Error("ML isn't enabled for alt text.");const{data:A,width:l,height:Z}=I||this.copyCanvas(null,null,!0).imageData,i=await C.guess({name:"altText",request:{data:A,width:l,height:Z,channels:A.length/(l*Z)}});if(!i)throw new Error("No response from the AI service.");if(i.error)throw new Error("Error from the AI service.");if(i.cancel)return null;if(!i.output)throw new Error("No valid response from the AI service.");const d=i.output;return await this.setGuessedAltText(d),g&&!this.hasAltTextData()&&(this.altTextData={alt:d,decorative:!1}),d}#w(){if(this.#g){this._uiManager.enableWaiting(!0),this._uiManager.imageManager.getFromId(this.#g).then(C=>this.#s(C,!0)).finally(()=>this.#W());return}if(this.#A){const C=this.#A;this.#A=null,this._uiManager.enableWaiting(!0),this.#C=this._uiManager.imageManager.getFromUrl(C).then(A=>this.#s(A)).finally(()=>this.#W());return}if(this.#Z){const C=this.#Z;this.#Z=null,this._uiManager.enableWaiting(!0),this.#C=this._uiManager.imageManager.getFromFile(C).then(A=>this.#s(A)).finally(()=>this.#W());return}const I=document.createElement("input");I.type="file",I.accept=AC.join(",");const g=this._uiManager._signal;this.#C=new Promise(C=>{I.addEventListener("change",async()=>{if(!I.files||I.files.length===0)this.remove();else{this._uiManager.enableWaiting(!0);const A=await this._uiManager.imageManager.getFromFile(I.files[0]);this._reportTelemetry({action:"pdfjs.image.image_selected",data:{alt_text_modal:this._uiManager.useNewAltTextFlow}}),this.#s(A)}C()},{signal:g}),I.addEventListener("cancel",()=>{this.remove(),C()},{signal:g})}).finally(()=>this.#W()),I.click()}remove(){this.#g&&(this.#I=null,this._uiManager.imageManager.deleteId(this.#g),this.#i?.remove(),this.#i=null,this.#c&&(clearTimeout(this.#c),this.#c=null)),super.remove()}rebuild(){if(!this.parent){this.#g&&this.#w();return}super.rebuild(),this.div!==null&&(this.#g&&this.#i===null&&this.#w(),this.isAttachedToDOM||this.parent.add(this))}onceAdded(I){this._isDraggable=!0,I&&this.div.focus()}isEmpty(){return!(this.#C||this.#I||this.#A||this.#Z||this.#g||this.#d)}get toolbarButtons(){return[["altText",this.createAltText()]]}get isResizable(){return!0}render(){if(this.div)return this.div;let I,g;return this._isCopy&&(I=this.x,g=this.y),super.render(),this.div.hidden=!0,this.createAltText(),this.#d||(this.#I?this.#B():this.#w()),this._isCopy&&this._moveAfterPaste(I,g),this._uiManager.addShouldRescale(this),this.div}setCanvas(I,g){const{id:C,bitmap:A}=this._uiManager.imageManager.getFromCanvas(I,g);g.remove(),C&&this._uiManager.imageManager.isValidId(C)&&(this.#g=C,A&&(this.#I=A),this.#d=!1,this.#B())}_onResized(){this.onScaleChanging()}onScaleChanging(){if(!this.parent)return;this.#c!==null&&clearTimeout(this.#c);const I=200;this.#c=setTimeout(()=>{this.#c=null,this.#o()},I)}#B(){const{div:I}=this;let{width:g,height:C}=this.#I;const[A,l]=this.pageDimensions,Z=.75;if(this.width)g=this.width*A,C=this.height*l;else if(g>Z*A||C>Z*l){const G=Math.min(Z*A/g,Z*l/C);g*=G,C*=G}const[i,d]=this.parentDimensions;this.setDims(g*i/A,C*d/l),this._uiManager.enableWaiting(!1);const s=this.#i=document.createElement("canvas");s.setAttribute("role","img"),this.addContainer(s),this.width=g/A,this.height=C/l,this._initialOptions?.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,(!this._uiManager.useNewAltTextWhenAddingImage||!this._uiManager.useNewAltTextFlow||this.annotationElementId)&&(I.hidden=!1),this.#o(),this.#m||(this.parent.addUndoableEditor(this),this.#m=!0),this._reportTelemetry({action:"inserted_image"}),this.#l&&this.div.setAttribute("aria-description",this.#l),this.annotationElementId||this._uiManager.a11yAlert("pdfjs-editor-stamp-added-alert")}copyCanvas(I,g,C=!1){I||(I=224);const{width:A,height:l}=this.#I,Z=new nI;let i=this.#I,d=A,s=l,G=null;if(g){if(A>g||l>g){const R=Math.min(g/A,g/l);d=Math.floor(A*R),s=Math.floor(l*R)}G=document.createElement("canvas");const m=G.width=Math.ceil(d*Z.sx),B=G.height=Math.ceil(s*Z.sy);this.#G||(i=this.#b(m,B));const o=G.getContext("2d");o.filter=this._uiManager.hcmFilter;let W="white",Y="#cfcfd8";this._uiManager.hcmFilter!=="none"?Y="black":window.matchMedia?.("(prefers-color-scheme: dark)").matches&&(W="#8f8f9d",Y="#42414d");const w=15,a=w*Z.sx,h=w*Z.sy,N=new OffscreenCanvas(a*2,h*2),V=N.getContext("2d");V.fillStyle=W,V.fillRect(0,0,a*2,h*2),V.fillStyle=Y,V.fillRect(0,0,a,h),V.fillRect(a,h,a,h),o.fillStyle=o.createPattern(N,"repeat"),o.fillRect(0,0,m,B),o.drawImage(i,0,0,i.width,i.height,0,0,m,B)}let b=null;if(C){let m,B;if(Z.symmetric&&i.width<I&&i.height<I)m=i.width,B=i.height;else if(i=this.#I,A>I||l>I){const Y=Math.min(I/A,I/l);m=Math.floor(A*Y),B=Math.floor(l*Y),this.#G||(i=this.#b(m,B))}const W=new OffscreenCanvas(m,B).getContext("2d",{willReadFrequently:!0});W.drawImage(i,0,0,i.width,i.height,0,0,m,B),b={width:m,height:B,data:W.getImageData(0,0,m,B).data}}return{canvas:G,width:d,height:s,imageData:b}}#b(I,g){const{width:C,height:A}=this.#I;let l=C,Z=A,i=this.#I;for(;l>2*I||Z>2*g;){const d=l,s=Z;l>2*I&&(l=l>=16384?Math.floor(l/2)-1:Math.ceil(l/2)),Z>2*g&&(Z=Z>=16384?Math.floor(Z/2)-1:Math.ceil(Z/2));const G=new OffscreenCanvas(l,Z);G.getContext("2d").drawImage(i,0,0,d,s,0,0,l,Z),i=G.transferToImageBitmap()}return i}#o(){const[I,g]=this.parentDimensions,{width:C,height:A}=this,l=new nI,Z=Math.ceil(C*I*l.sx),i=Math.ceil(A*g*l.sy),d=this.#i;if(!d||d.width===Z&&d.height===i)return;d.width=Z,d.height=i;const s=this.#G?this.#I:this.#b(Z,i),G=d.getContext("2d");G.filter=this._uiManager.hcmFilter,G.drawImage(s,0,0,s.width,s.height,0,0,Z,i)}#a(I){if(I){if(this.#G){const A=this._uiManager.imageManager.getSvgUrl(this.#g);if(A)return A}const g=document.createElement("canvas");return{width:g.width,height:g.height}=this.#I,g.getContext("2d").drawImage(this.#I,0,0),g.toDataURL()}if(this.#G){const[g,C]=this.pageDimensions,A=Math.round(this.width*g*_I.PDF_TO_CSS_UNITS),l=Math.round(this.height*C*_I.PDF_TO_CSS_UNITS),Z=new OffscreenCanvas(A,l);return Z.getContext("2d").drawImage(this.#I,0,0,this.#I.width,this.#I.height,0,0,A,l),Z.transferToImageBitmap()}return structuredClone(this.#I)}static async deserialize(I,g,C){let A=null,l=!1;if(I instanceof HA){const{data:{rect:W,rotation:Y,id:w,structParent:a,popupRef:h,contentsObj:N},container:V,parent:{page:{pageNumber:R}},canvas:X}=I;let n,y;X?(delete I.canvas,{id:n,bitmap:y}=C.imageManager.getFromCanvas(V.id,X),X.remove()):(l=!0,I._hasNoCanvas=!0);const K=(await g._structTree.getAriaAttributes(`${$g}${w}`))?.get("aria-label")||"";A=I={annotationType:p.STAMP,bitmapId:n,bitmap:y,pageIndex:R-1,rect:W.slice(0),rotation:Y,annotationElementId:w,id:w,deleted:!1,accessibilityData:{decorative:!1,altText:K},isSvg:!1,structParent:a,popupRef:h,comment:N?.str||null}}const Z=await super.deserialize(I,g,C),{rect:i,bitmap:d,bitmapUrl:s,bitmapId:G,isSvg:b,accessibilityData:m}=I;l?(C.addMissingCanvas(I.id,Z),Z.#d=!0):G&&C.imageManager.isValidId(G)?(Z.#g=G,d&&(Z.#I=d)):Z.#A=s,Z.#G=b;const[B,o]=Z.pageDimensions;return Z.width=(i[2]-i[0])/B,Z.height=(i[3]-i[1])/o,m&&(Z.altTextData=m),Z._initialData=A,I.comment&&Z.setCommentData(I.comment),Z.#m=!!A,Z}serialize(I=!1,g=null){if(this.isEmpty())return null;if(this.deleted)return this.serializeDeleted();const C={annotationType:p.STAMP,bitmapId:this.#g,pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:this.#G,structTreeParentId:this._structTreeParentId};if(this.addComment(C),I)return C.bitmapUrl=this.#a(!0),C.accessibilityData=this.serializeAltText(!0),C.isCopy=!0,C;const{decorative:A,altText:l}=this.serializeAltText(!1);if(!A&&l&&(C.accessibilityData={type:"Figure",alt:l}),this.annotationElementId){const i=this.#Y(C);if(i.isSame)return null;i.isSameAltText?delete C.accessibilityData:C.accessibilityData.structParent=this._initialData.structParent??-1}if(C.id=this.annotationElementId,g===null)return C;g.stamps||=new Map;const Z=this.#G?(C.rect[2]-C.rect[0])*(C.rect[3]-C.rect[1]):null;if(!g.stamps.has(this.#g))g.stamps.set(this.#g,{area:Z,serialized:C}),C.bitmap=this.#a(!1);else if(this.#G){const i=g.stamps.get(this.#g);Z>i.area&&(i.area=Z,i.serialized.bitmap.close(),i.serialized.bitmap=this.#a(!1))}return C}#Y(I){const{pageIndex:g,accessibilityData:{altText:C}}=this._initialData,A=I.pageIndex===g,l=(I.accessibilityData?.alt||"")===C;return{isSame:!this.hasEditedComment&&!this._hasBeenMoved&&!this._hasBeenResized&&A&&l,isSameAltText:l}}renderAnnotationElement(I){const g={rect:this.getRect(0,0)};return this.hasEditedComment&&(g.popup=this.comment),I.updateEdited(g),null}}class KI{#I;#g=!1;#C=null;#A=null;#Z=null;#l=new Map;#i=!1;#d=!1;#c=!1;#G=null;#m=null;#s=null;#W=null;#w=null;#B=-1;#b;static _initialized=!1;static#o=new Map([CI,nC,yZ,P,MI].map(I=>[I._editorType,I]));constructor({uiManager:I,pageIndex:g,div:C,structTreeLayer:A,accessibilityManager:l,annotationLayer:Z,drawLayer:i,textLayer:d,viewport:s,l10n:G}){const b=[...KI.#o.values()];if(!KI._initialized){KI._initialized=!0;for(const m of b)m.initialize(G,I)}I.registerEditorTypes(b),this.#b=I,this.pageIndex=g,this.div=C,this.#I=l,this.#C=Z,this.viewport=s,this.#s=d,this.drawLayer=i,this._structTree=A,this.#b.addLayer(this)}get isEmpty(){return this.#l.size===0}get isInvisible(){return this.isEmpty&&this.#b.getMode()===p.NONE}updateToolbar(I){this.#b.updateToolbar(I)}updateMode(I=this.#b.getMode()){switch(this.#h(),I){case p.NONE:this.disableTextSelection(),this.togglePointerEvents(!1),this.toggleAnnotationLayerPointerEvents(!0),this.disableClick();return;case p.INK:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick();break;case p.HIGHLIGHT:this.enableTextSelection(),this.togglePointerEvents(!1),this.disableClick();break;default:this.disableTextSelection(),this.togglePointerEvents(!0),this.enableClick()}this.toggleAnnotationLayerPointerEvents(!1);const{classList:g}=this.div;for(const C of KI.#o.values())g.toggle(`${C._type}Editing`,I===C._editorType);this.div.hidden=!1}hasTextLayer(I){return I===this.#s?.div}setEditingState(I){this.#b.setEditingState(I)}addCommands(I){this.#b.addCommands(I)}cleanUndoStack(I){this.#b.cleanUndoStack(I)}toggleDrawing(I=!1){this.div.classList.toggle("drawing",!I)}togglePointerEvents(I=!1){this.div.classList.toggle("disabled",!I)}toggleAnnotationLayerPointerEvents(I=!1){this.#C?.div.classList.toggle("disabled",!I)}async enable(){this.#c=!0,this.div.tabIndex=0,this.togglePointerEvents(!0),this.#w?.abort(),this.#w=null;const I=new Set;for(const C of this.#l.values())C.enableEditing(),C.show(!0),C.annotationElementId&&(this.#b.removeChangedExistingAnnotation(C),I.add(C.annotationElementId));if(!this.#C){this.#c=!1;return}const g=this.#C.getEditableAnnotations();for(const C of g){if(C.hide(),this.#b.isDeletedAnnotationElement(C.data.id)||I.has(C.data.id))continue;const A=await this.deserialize(C);A&&(this.addOrRebuild(A),A.enableEditing())}this.#c=!1}disable(){if(this.#d=!0,this.div.tabIndex=-1,this.togglePointerEvents(!1),this.#s&&!this.#w){this.#w=new AbortController;const A=this.#b.combinedSignal(this.#w);this.#s.div.addEventListener("pointerdown",l=>{const{clientX:i,clientY:d,timeStamp:s}=l,G=this.#B;if(s-G>500){this.#B=s;return}this.#B=-1;const{classList:b}=this.div;b.toggle("getElements",!0);const m=document.elementsFromPoint(i,d);if(b.toggle("getElements",!1),!this.div.contains(m[0]))return;let B;const o=new RegExp(`^${DC}[0-9]+$`);for(const Y of m)if(o.test(Y.id)){B=Y.id;break}if(!B)return;const W=this.#l.get(B);W?.annotationElementId===null&&(l.stopPropagation(),l.preventDefault(),W.dblclick())},{signal:A,capture:!0})}const I=new Map,g=new Map;for(const A of this.#l.values())if(A.disableEditing(),!!A.annotationElementId){if(A.serialize()!==null){I.set(A.annotationElementId,A);continue}else g.set(A.annotationElementId,A);this.getEditableAnnotation(A.annotationElementId)?.show(),A.remove()}if(this.#C){const A=this.#C.getEditableAnnotations();for(const l of A){const{id:Z}=l.data;if(this.#b.isDeletedAnnotationElement(Z)){l.updateEdited({deleted:!0});continue}let i=g.get(Z);if(i){i.resetAnnotationElement(l),i.show(!1),l.show();continue}i=I.get(Z),i&&(this.#b.addChangedExistingAnnotation(i),i.renderAnnotationElement(l)&&i.show(!1)),l.show()}}this.#h(),this.isEmpty&&(this.div.hidden=!0);const{classList:C}=this.div;for(const A of KI.#o.values())C.remove(`${A._type}Editing`);this.disableTextSelection(),this.toggleAnnotationLayerPointerEvents(!0),this.#d=!1}getEditableAnnotation(I){return this.#C?.getEditableAnnotation(I)||null}setActiveEditor(I){this.#b.getActive()!==I&&this.#b.setActiveEditor(I)}enableTextSelection(){if(this.div.tabIndex=-1,this.#s?.div&&!this.#W){this.#W=new AbortController;const I=this.#b.combinedSignal(this.#W);this.#s.div.addEventListener("pointerdown",this.#a.bind(this),{signal:I}),this.#s.div.classList.add("highlighting")}}disableTextSelection(){this.div.tabIndex=0,this.#s?.div&&this.#W&&(this.#W.abort(),this.#W=null,this.#s.div.classList.remove("highlighting"))}#a(I){this.#b.unselectAll();const{target:g}=I;if(g===this.#s.div||(g.getAttribute("role")==="img"||g.classList.contains("endOfContent"))&&this.#s.div.contains(g)){const{isMac:C}=ZI.platform;if(I.button!==0||I.ctrlKey&&C)return;this.#b.showAllEditors("highlight",!0,!0),this.#s.div.classList.add("free"),this.toggleDrawing(),P.startHighlighting(this,this.#b.direction==="ltr",{target:this.#s.div,x:I.x,y:I.y}),this.#s.div.addEventListener("pointerup",()=>{this.#s.div.classList.remove("free"),this.toggleDrawing(!0)},{once:!0,signal:this.#b._signal}),I.preventDefault()}}enableClick(){if(this.#A)return;this.#A=new AbortController;const I=this.#b.combinedSignal(this.#A);this.div.addEventListener("pointerdown",this.pointerdown.bind(this),{signal:I});const g=this.pointerup.bind(this);this.div.addEventListener("pointerup",g,{signal:I}),this.div.addEventListener("pointercancel",g,{signal:I})}disableClick(){this.#A?.abort(),this.#A=null}attach(I){this.#l.set(I.id,I);const{annotationElementId:g}=I;g&&this.#b.isDeletedAnnotationElement(g)&&this.#b.removeDeletedAnnotationElement(I)}detach(I){this.#l.delete(I.id),this.#I?.removePointerInTextLayer(I.contentDiv),!this.#d&&I.annotationElementId&&this.#b.addDeletedAnnotationElement(I)}remove(I){this.detach(I),this.#b.removeEditor(I),I.div.remove(),I.isAttachedToDOM=!1}changeParent(I){I.parent!==this&&(I.parent&&I.annotationElementId&&(this.#b.addDeletedAnnotationElement(I.annotationElementId),D.deleteAnnotationElement(I),I.annotationElementId=null),this.attach(I),I.parent?.detach(I),I.setParent(this),I.div&&I.isAttachedToDOM&&(I.div.remove(),this.div.append(I.div)))}add(I){if(!(I.parent===this&&I.isAttachedToDOM)){if(this.changeParent(I),this.#b.addEditor(I),this.attach(I),!I.isAttachedToDOM){const g=I.render();this.div.append(g),I.isAttachedToDOM=!0}I.fixAndSetPosition(),I.onceAdded(!this.#c),this.#b.addToAnnotationStorage(I),I._reportTelemetry(I.telemetryInitialData)}}moveEditorInDOM(I){if(!I.isAttachedToDOM)return;const{activeElement:g}=document;I.div.contains(g)&&!this.#Z&&(I._focusEventsAllowed=!1,this.#Z=setTimeout(()=>{this.#Z=null,I.div.contains(document.activeElement)?I._focusEventsAllowed=!0:(I.div.addEventListener("focusin",()=>{I._focusEventsAllowed=!0},{once:!0,signal:this.#b._signal}),g.focus())},0)),I._structTreeParentId=this.#I?.moveElementInDOM(this.div,I.div,I.contentDiv,!0)}addOrRebuild(I){I.needsToBeRebuilt()?(I.parent||=this,I.rebuild(),I.show()):this.add(I)}addUndoableEditor(I){const g=()=>I._uiManager.rebuild(I),C=()=>{I.remove()};this.addCommands({cmd:g,undo:C,mustExec:!1})}getNextId(){return this.#b.getId()}get#Y(){return KI.#o.get(this.#b.getMode())}combinedSignal(I){return this.#b.combinedSignal(I)}#N(I){const g=this.#Y;return g?new g.prototype.constructor(I):null}canCreateNewEmptyEditor(){return this.#Y?.canCreateNewEmptyEditor()}async pasteEditor(I,g){this.updateToolbar(I),await this.#b.updateMode(I.mode);const{offsetX:C,offsetY:A}=this.#R(),l=this.getNextId(),Z=this.#N({parent:this,id:l,x:C,y:A,uiManager:this.#b,isCentered:!0,...g});Z&&this.add(Z)}async deserialize(I){return await KI.#o.get(I.annotationType??I.annotationEditorType)?.deserialize(I,this,this.#b)||null}createAndAddNewEditor(I,g,C={}){const A=this.getNextId(),l=this.#N({parent:this,id:A,x:I.offsetX,y:I.offsetY,uiManager:this.#b,isCentered:g,...C});return l&&this.add(l),l}#R(){const{x:I,y:g,width:C,height:A}=this.div.getBoundingClientRect(),l=Math.max(0,I),Z=Math.max(0,g),i=Math.min(window.innerWidth,I+C),d=Math.min(window.innerHeight,g+A),s=(l+i)/2-I,G=(Z+d)/2-g,[b,m]=this.viewport.rotation%180===0?[s,G]:[G,s];return{offsetX:b,offsetY:m}}addNewEditor(I={}){this.createAndAddNewEditor(this.#R(),!0,I)}setSelected(I){this.#b.setSelected(I)}toggleSelected(I){this.#b.toggleSelected(I)}unselect(I){this.#b.unselect(I)}pointerup(I){const{isMac:g}=ZI.platform;if(I.button!==0||I.ctrlKey&&g||I.target!==this.div||!this.#i||(this.#i=!1,this.#Y?.isDrawer&&this.#Y.supportMultipleDrawings))return;if(!this.#g){this.#g=!0;return}const C=this.#b.getMode();if(C===p.STAMP||C===p.SIGNATURE){this.#b.unselectAll();return}this.createAndAddNewEditor(I,!1)}pointerdown(I){if(this.#b.getMode()===p.HIGHLIGHT&&this.enableTextSelection(),this.#i){this.#i=!1;return}const{isMac:g}=ZI.platform;if(I.button!==0||I.ctrlKey&&g||I.target!==this.div)return;if(this.#i=!0,this.#Y?.isDrawer){this.startDrawingSession(I);return}const C=this.#b.getActive();this.#g=!C||C.isEmpty()}startDrawingSession(I){if(this.div.focus({preventScroll:!0}),this.#G){this.#Y.startDrawing(this,this.#b,!1,I);return}this.#b.setCurrentDrawingSession(this),this.#G=new AbortController;const g=this.#b.combinedSignal(this.#G);this.div.addEventListener("blur",({relatedTarget:C})=>{C&&!this.div.contains(C)&&(this.#m=null,this.commitOrRemove())},{signal:g}),this.#Y.startDrawing(this,this.#b,!1,I)}pause(I){if(I){const{activeElement:g}=document;this.div.contains(g)&&(this.#m=g);return}this.#m&&setTimeout(()=>{this.#m?.focus(),this.#m=null},0)}endDrawingSession(I=!1){return this.#G?(this.#b.setCurrentDrawingSession(null),this.#G.abort(),this.#G=null,this.#m=null,this.#Y.endDrawing(I)):null}findNewParent(I,g,C){const A=this.#b.findParent(g,C);return A===null||A===this?!1:(A.changeParent(I),!0)}commitOrRemove(){return this.#G?(this.endDrawingSession(),!0):!1}onScaleChanging(){this.#G&&this.#Y.onScaleChangingWhenDrawing(this)}destroy(){this.commitOrRemove(),this.#b.getActive()?.parent===this&&(this.#b.commitOrRemove(),this.#b.setActiveEditor(null)),this.#Z&&(clearTimeout(this.#Z),this.#Z=null);for(const I of this.#l.values())this.#I?.removePointerInTextLayer(I.contentDiv),I.setParent(null),I.isAttachedToDOM=!1,I.div.remove();this.div=null,this.#l.clear(),this.#b.removeLayer(this)}#h(){for(const I of this.#l.values())I.isEmpty()&&I.remove()}render({viewport:I}){this.viewport=I,jI(this.div,I);for(const g of this.#b.getEditors(this.pageIndex))this.add(g),g.rebuild();this.updateMode()}update({viewport:I}){this.#b.commitOrRemove(),this.#h();const g=this.viewport.rotation,C=I.rotation;if(this.viewport=I,jI(this.div,{rotation:C}),g!==C)for(const A of this.#l.values())A.rotate(C)}get pageDimensions(){const{pageWidth:I,pageHeight:g}=this.viewport.rawDims;return[I,g]}get scale(){return this.#b.viewParameters.realScale}}class dI{#I=null;#g=new Map;#C=new Map;static#A=0;constructor({pageIndex:I}){this.pageIndex=I}setParent(I){if(!this.#I){this.#I=I;return}if(this.#I!==I){if(this.#g.size>0)for(const g of this.#g.values())g.remove(),I.append(g);this.#I=I}}static get _svgFactory(){return J(this,"_svgFactory",new Qg)}static#Z(I,[g,C,A,l]){const{style:Z}=I;Z.top=`${100*C}%`,Z.left=`${100*g}%`,Z.width=`${100*A}%`,Z.height=`${100*l}%`}#l(){const I=dI._svgFactory.create(1,1,!0);return this.#I.append(I),I.setAttribute("aria-hidden",!0),I}#i(I,g){const C=dI._svgFactory.createElement("clipPath");I.append(C);const A=`clip_${g}`;C.setAttribute("id",A),C.setAttribute("clipPathUnits","objectBoundingBox");const l=dI._svgFactory.createElement("use");return C.append(l),l.setAttribute("href",`#${g}`),l.classList.add("clip"),A}#d(I,g){for(const[C,A]of Object.entries(g))A===null?I.removeAttribute(C):I.setAttribute(C,A)}draw(I,g=!1,C=!1){const A=dI.#A++,l=this.#l(),Z=dI._svgFactory.createElement("defs");l.append(Z);const i=dI._svgFactory.createElement("path");Z.append(i);const d=`path_p${this.pageIndex}_${A}`;i.setAttribute("id",d),i.setAttribute("vector-effect","non-scaling-stroke"),g&&this.#C.set(A,i);const s=C?this.#i(Z,d):null,G=dI._svgFactory.createElement("use");return l.append(G),G.setAttribute("href",`#${d}`),this.updateProperties(l,I),this.#g.set(A,l),{id:A,clipPathId:`url(#${s})`}}drawOutline(I,g){const C=dI.#A++,A=this.#l(),l=dI._svgFactory.createElement("defs");A.append(l);const Z=dI._svgFactory.createElement("path");l.append(Z);const i=`path_p${this.pageIndex}_${C}`;Z.setAttribute("id",i),Z.setAttribute("vector-effect","non-scaling-stroke");let d;if(g){const b=dI._svgFactory.createElement("mask");l.append(b),d=`mask_p${this.pageIndex}_${C}`,b.setAttribute("id",d),b.setAttribute("maskUnits","objectBoundingBox");const m=dI._svgFactory.createElement("rect");b.append(m),m.setAttribute("width","1"),m.setAttribute("height","1"),m.setAttribute("fill","white");const B=dI._svgFactory.createElement("use");b.append(B),B.setAttribute("href",`#${i}`),B.setAttribute("stroke","none"),B.setAttribute("fill","black"),B.setAttribute("fill-rule","nonzero"),B.classList.add("mask")}const s=dI._svgFactory.createElement("use");A.append(s),s.setAttribute("href",`#${i}`),d&&s.setAttribute("mask",`url(#${d})`);const G=s.cloneNode();return A.append(G),s.classList.add("mainOutline"),G.classList.add("secondaryOutline"),this.updateProperties(A,I),this.#g.set(C,A),C}finalizeDraw(I,g){this.#C.delete(I),this.updateProperties(I,g)}updateProperties(I,g){if(!g)return;const{root:C,bbox:A,rootClass:l,path:Z}=g,i=typeof I=="number"?this.#g.get(I):I;if(i){if(C&&this.#d(i,C),A&&dI.#Z(i,A),l){const{classList:d}=i;for(const[s,G]of Object.entries(l))d.toggle(s,G)}if(Z){const s=i.firstChild.firstChild;this.#d(s,Z)}}}updateParent(I,g){if(g===this)return;const C=this.#g.get(I);C&&(g.#I.append(C),this.#g.delete(I),g.#g.set(I,C))}remove(I){this.#C.delete(I),this.#I!==null&&(this.#g.get(I).remove(),this.#g.delete(I))}destroy(){this.#I=null;for(const I of this.#g.values())I.remove();this.#g.clear(),this.#C.clear()}}globalThis._pdfjsTestingUtils={HighlightOutliner:RC},globalThis.pdfjsLib={AbortException:zI,AnnotationEditorLayer:KI,AnnotationEditorParamsType:k,AnnotationEditorType:p,AnnotationEditorUIManager:JI,AnnotationLayer:NC,AnnotationMode:FI,AnnotationType:q,build:CZ,ColorPicker:VI,createValidAbsoluteUrl:KC,DOMSVGFactory:Qg,DrawLayer:dI,FeatureTest:ZI,fetchData:sg,getDocument:wA,getFilenameFromUrl:EA,getPdfFilenameFromUrl:PA,getRGB:Sg,getUuid:JC,getXfaPageViewport:_A,GlobalWorkerOptions:Ig,ImageKind:yg,InvalidPDFException:fg,isDataScheme:Kg,isPdfFile:gC,isValidExplicitDest:sl,MathClamp:GI,noContextMenu:hI,normalizeUnicode:xA,OPS:Mg,OutputScale:nI,PasswordResponses:zA,PDFDataRangeTransport:YA,PDFDateString:CC,PDFWorker:hg,PermissionFlag:FA,PixelsPerInch:_I,RenderingCancelledException:IC,ResponseException:Dg,setLayerDimensions:jI,shadow:J,SignatureExtractor:Ag,stopEvent:II,SupportedImageMimeTypes:AC,TextLayer:cI,TouchManager:Fg,updateUrlHash:SC,Util:t,VerbosityLevel:Hg,version:gZ,XfaLayer:VA};const HZ="data:text/javascript;base64,",MZ={class:"vue-pdf-signer"},uZ={class:"pdf-signer-toolbar"},tZ={class:"toolbar-group"},eZ={class:"btn btn-secondary"},DZ={class:"btn btn-primary"},KZ={key:0,class:"toolbar-group"},SZ={class:"pdf-viewport"},tA=((c,I)=>{const g=c.__vccOpts||c;for(const[C,A]of I)g[C]=A;return g})(z.defineComponent({__name:"PdfSigner",props:{pdfData:{},signatureData:{},isDownload:{type:Boolean},translations:{},enableZoom:{type:Boolean}},emits:["finish"],setup(c){Ig.workerSrc=HZ;const I=c,g=z.computed(()=>({updateSignature:I.translations?.updateSignature||"Update Signature",save:I.translations?.save||"Save"})),C=z.ref(null);return z.watchEffect(async()=>{if(!(!I.pdfData||!C.value)){C.value.innerHTML="";try{const A=atob(I.pdfData),l=new Uint8Array(A.length);for(let d=0;d<A.length;d++)l[d]=A.charCodeAt(d);const i=await wA({data:l}).promise;for(let d=1;d<=i.numPages;d++){const s=await i.getPage(d),G=s.getViewport({scale:1}),m=C.value.clientWidth*.95/G.width,B=s.getViewport({scale:m}),o=document.createElement("canvas");o.style.display="block",o.style.marginBottom="1rem";const W=o.getContext("2d");o.height=B.height,o.width=B.width,C.value.appendChild(o);const Y={canvasContext:W,viewport:B,canvas:o};await s.render(Y).promise}}catch(A){console.error("Failed to render PDF:",A),C.value.innerHTML='<p style="color: red;">Error: Failed to load PDF.</p>'}}}),(A,l)=>(z.openBlock(),z.createElementBlock("div",MZ,[z.createElementVNode("div",uZ,[z.createElementVNode("div",tZ,[z.createElementVNode("button",eZ,z.toDisplayString(g.value.updateSignature),1),z.createElementVNode("button",DZ,z.toDisplayString(g.value.save),1)]),I.enableZoom?(z.openBlock(),z.createElementBlock("div",KZ,l[0]||(l[0]=[z.createElementVNode("button",{class:"btn btn-icon"},"-",-1),z.createElementVNode("span",{class:"zoom-level"},"100%",-1),z.createElementVNode("button",{class:"btn btn-icon"},"+",-1)]))):z.createCommentVNode("",!0)]),z.createElementVNode("div",SZ,[z.createElementVNode("div",{ref_key:"pdfContainer",ref:C,class:"pdf-render-view"},null,512)])]))}}),[["__scopeId","data-v-edc4e6d4"]]),pZ={install(c){c.component("PdfSigner",tA)}};Q.PdfSigner=tA,Q.default=pZ,Object.defineProperties(Q,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})}));
